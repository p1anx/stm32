
build/debug/motor_f407ve_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004c98  08004c98  00005c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800509c  0800509c  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a4  080050a4  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080050ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000071d4  2**0
                  CONTENTS
 10 .bss          0000020c  200001d4  200001d4  000071d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  000071d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000039  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dd0e  00000000  00000000  0000723d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020cb  00000000  00000000  00014f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a28  00000000  00000000  00017018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007a9  00000000  00000000  00017a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc69  00000000  00000000  000181e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002f78  00000000  00000000  00024e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a54  00000000  00000000  00027dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000070c7  00000000  00000000  00029820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  000308e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b7c:	f000 b80c 	b.w	8000b98 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f003 fefc 	bl	8004984 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__do_global_dtors_aux>:
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4c05      	ldr	r4, [pc, #20]	@ (8000bb4 <__do_global_dtors_aux+0x18>)
 8000ba0:	7823      	ldrb	r3, [r4, #0]
 8000ba2:	b933      	cbnz	r3, 8000bb2 <__do_global_dtors_aux+0x16>
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__do_global_dtors_aux+0x1c>)
 8000ba6:	b113      	cbz	r3, 8000bae <__do_global_dtors_aux+0x12>
 8000ba8:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <__do_global_dtors_aux+0x20>)
 8000baa:	f3af 8000 	nop.w
 8000bae:	2301      	movs	r3, #1
 8000bb0:	7023      	strb	r3, [r4, #0]
 8000bb2:	bd10      	pop	{r4, pc}
 8000bb4:	200001d4 	.word	0x200001d4
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	08004c7c 	.word	0x08004c7c

08000bc0 <frame_dummy>:
 8000bc0:	b508      	push	{r3, lr}
 8000bc2:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <frame_dummy+0x10>)
 8000bc4:	b11b      	cbz	r3, 8000bce <frame_dummy+0xe>
 8000bc6:	4903      	ldr	r1, [pc, #12]	@ (8000bd4 <frame_dummy+0x14>)
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <frame_dummy+0x18>)
 8000bca:	f3af 8000 	nop.w
 8000bce:	bd08      	pop	{r3, pc}
 8000bd0:	00000000 	.word	0x00000000
 8000bd4:	200001d8 	.word	0x200001d8
 8000bd8:	08004c7c 	.word	0x08004c7c

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	ad05      	add	r5, sp, #20
 8000be4:	2400      	movs	r4, #0
 8000be6:	9405      	str	r4, [sp, #20]
 8000be8:	9406      	str	r4, [sp, #24]
 8000bea:	9407      	str	r4, [sp, #28]
 8000bec:	9408      	str	r4, [sp, #32]
 8000bee:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf0:	9401      	str	r4, [sp, #4]
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0xac>)
 8000bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bfe:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000c02:	9201      	str	r2, [sp, #4]
 8000c04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	9402      	str	r4, [sp, #8]
 8000c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c0a:	f042 0204 	orr.w	r2, r2, #4
 8000c0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c12:	f002 0204 	and.w	r2, r2, #4
 8000c16:	9202      	str	r2, [sp, #8]
 8000c18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	9403      	str	r4, [sp, #12]
 8000c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c1e:	f042 0202 	orr.w	r2, r2, #2
 8000c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c26:	f002 0202 	and.w	r2, r2, #2
 8000c2a:	9203      	str	r2, [sp, #12]
 8000c2c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	9404      	str	r4, [sp, #16]
 8000c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c32:	f042 0201 	orr.w	r2, r2, #1
 8000c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	9304      	str	r3, [sp, #16]
 8000c40:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c42:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8000c90 <MX_GPIO_Init+0xb4>
 8000c46:	4622      	mov	r2, r4
 8000c48:	2120      	movs	r1, #32
 8000c4a:	4640      	mov	r0, r8
 8000c4c:	f000 fad2 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c50:	4e0e      	ldr	r6, [pc, #56]	@ (8000c8c <MX_GPIO_Init+0xb0>)
 8000c52:	4622      	mov	r2, r4
 8000c54:	2104      	movs	r1, #4
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 facc 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2701      	movs	r7, #1
 8000c62:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	4629      	mov	r1, r5
 8000c6a:	4640      	mov	r0, r8
 8000c6c:	f000 f9cc 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c70:	2304      	movs	r3, #4
 8000c72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f000 f9c3 	bl	8001008 <HAL_GPIO_Init>

}
 8000c82:	b00a      	add	sp, #40	@ 0x28
 8000c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800

08000c94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c94:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c96:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <MX_I2C1_Init+0x30>)
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_I2C1_Init+0x34>)
 8000c9a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_I2C1_Init+0x38>)
 8000c9e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000caa:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cae:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	f000 faae 	bl	8001214 <HAL_I2C_Init>
 8000cb8:	b900      	cbnz	r0, 8000cbc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cbc:	f000 f84c 	bl	8000d58 <Error_Handler>
}
 8000cc0:	e7fb      	b.n	8000cba <MX_I2C1_Init+0x26>
 8000cc2:	bf00      	nop
 8000cc4:	200001f0 	.word	0x200001f0
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	000186a0 	.word	0x000186a0

08000cd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd0:	b530      	push	{r4, r5, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9303      	str	r3, [sp, #12]
 8000cd8:	9304      	str	r3, [sp, #16]
 8000cda:	9305      	str	r3, [sp, #20]
 8000cdc:	9306      	str	r3, [sp, #24]
 8000cde:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000ce0:	6802      	ldr	r2, [r0, #0]
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_I2C_MspInit+0x64>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d001      	beq.n	8000cec <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ce8:	b009      	add	sp, #36	@ 0x24
 8000cea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	2500      	movs	r5, #0
 8000cee:	9501      	str	r5, [sp, #4]
 8000cf0:	4c11      	ldr	r4, [pc, #68]	@ (8000d38 <HAL_I2C_MspInit+0x68>)
 8000cf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000cfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d04:	23c0      	movs	r3, #192	@ 0xc0
 8000d06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d08:	2312      	movs	r3, #18
 8000d0a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d10:	2304      	movs	r3, #4
 8000d12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	a903      	add	r1, sp, #12
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <HAL_I2C_MspInit+0x6c>)
 8000d18:	f000 f976 	bl	8001008 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1c:	9502      	str	r5, [sp, #8]
 8000d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d24:	6423      	str	r3, [r4, #64]	@ 0x40
 8000d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	9b02      	ldr	r3, [sp, #8]
}
 8000d30:	e7da      	b.n	8000ce8 <HAL_I2C_MspInit+0x18>
 8000d32:	bf00      	nop
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <led_blink>:
#include "led.h"

void led_blink(int time_ms){
 8000d40:	b510      	push	{r4, lr}
 8000d42:	4604      	mov	r4, r0
    LED1_TOGGLE();
 8000d44:	2120      	movs	r1, #32
 8000d46:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <led_blink+0x14>)
 8000d48:	f000 fa5a 	bl	8001200 <HAL_GPIO_TogglePin>
    HAL_Delay(time_ms);
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f000 f8dd 	bl	8000f0c <HAL_Delay>
 8000d52:	bd10      	pop	{r4, pc}
 8000d54:	40020800 	.word	0x40020800

08000d58 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <Error_Handler+0x2>

08000d5c <SystemClock_Config>:
{
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d60:	ac08      	add	r4, sp, #32
 8000d62:	2230      	movs	r2, #48	@ 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4620      	mov	r0, r4
 8000d68:	f001 ff62 	bl	8002c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	9304      	str	r3, [sp, #16]
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	9306      	str	r3, [sp, #24]
 8000d76:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	4a21      	ldr	r2, [pc, #132]	@ (8000e00 <SystemClock_Config+0xa4>)
 8000d7c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000d7e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000d82:	6411      	str	r1, [r2, #64]	@ 0x40
 8000d84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000d86:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <SystemClock_Config+0xa8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dac:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000db6:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000db8:	2219      	movs	r2, #25
 8000dba:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dbc:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000dc0:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc2:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f000 fb1d 	bl	8001408 <HAL_RCC_OscConfig>
 8000dce:	b990      	cbnz	r0, 8000df6 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ddc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000de0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de8:	2105      	movs	r1, #5
 8000dea:	a803      	add	r0, sp, #12
 8000dec:	f000 fd5c 	bl	80018a8 <HAL_RCC_ClockConfig>
 8000df0:	b918      	cbnz	r0, 8000dfa <SystemClock_Config+0x9e>
}
 8000df2:	b014      	add	sp, #80	@ 0x50
 8000df4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000df6:	f7ff ffaf 	bl	8000d58 <Error_Handler>
    Error_Handler();
 8000dfa:	f7ff ffad 	bl	8000d58 <Error_Handler>
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <main>:
{
 8000e08:	b508      	push	{r3, lr}
  HAL_Init();
 8000e0a:	f000 f853 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 8000e0e:	f7ff ffa5 	bl	8000d5c <SystemClock_Config>
  MX_GPIO_Init();
 8000e12:	f7ff fee3 	bl	8000bdc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e16:	f7ff ff3d 	bl	8000c94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e1a:	f001 f81d 	bl	8001e58 <MX_USART1_UART_Init>
  mymain();
 8000e1e:	f000 f80b 	bl	8000e38 <mymain>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000e22:	2104      	movs	r1, #4
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <main+0x2c>)
 8000e26:	f000 f9eb 	bl	8001200 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e2e:	f000 f86d 	bl	8000f0c <HAL_Delay>
  while (1)
 8000e32:	e7f6      	b.n	8000e22 <main+0x1a>
 8000e34:	40020400 	.word	0x40020400

08000e38 <mymain>:
#include "mymain.h"
int mymain(void){
 8000e38:	b500      	push	{lr}
 8000e3a:	b083      	sub	sp, #12
    float a = 1.2;
    int b = 10;
    while(1){
       led_blink(1000); 
 8000e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e40:	f7ff ff7e 	bl	8000d40 <led_blink>
       printf("hello makefile\n");
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <mymain+0x24>)
 8000e46:	f001 fe15 	bl	8002a74 <puts>
       printf("hello gcc, %f, %d\n", a, b);
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e52:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <mymain+0x28>)
 8000e54:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <mymain+0x2c>)
 8000e56:	f001 fda5 	bl	80029a4 <iprintf>
    while(1){
 8000e5a:	e7ef      	b.n	8000e3c <mymain+0x4>
 8000e5c:	08004c98 	.word	0x08004c98
 8000e60:	3ff33333 	.word	0x3ff33333
 8000e64:	08004ca8 	.word	0x08004ca8

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_InitTick+0x40>)
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e78:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <HAL_InitTick+0x44>)
 8000e7a:	6810      	ldr	r0, [r2, #0]
 8000e7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e80:	f000 f8ae 	bl	8000fe0 <HAL_SYSTICK_Config>
 8000e84:	b968      	cbnz	r0, 8000ea2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	2c0f      	cmp	r4, #15
 8000e88:	d901      	bls.n	8000e8e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e00a      	b.n	8000ea4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4621      	mov	r1, r4
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e96:	f000 f893 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_InitTick+0x48>)
 8000e9c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
}
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_Init>:
{
 8000eb4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_Init+0x30>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ebe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ec6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ece:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f863 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff ffc6 	bl	8000e68 <HAL_InitTick>
  HAL_MspInit();
 8000edc:	f000 fa78 	bl	80013d0 <HAL_MspInit>
}
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	bd08      	pop	{r3, pc}
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ee8:	4a03      	ldr	r2, [pc, #12]	@ (8000ef8 <HAL_IncTick+0x10>)
 8000eea:	6811      	ldr	r1, [r2, #0]
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_IncTick+0x14>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000244 	.word	0x20000244
 8000efc:	20000000 	.word	0x20000000

08000f00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f00:	4b01      	ldr	r3, [pc, #4]	@ (8000f08 <HAL_GetTick+0x8>)
 8000f02:	6818      	ldr	r0, [r3, #0]
}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000244 	.word	0x20000244

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fff6 	bl	8000f00 <HAL_GetTick>
 8000f14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000f1a:	d002      	beq.n	8000f22 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <HAL_Delay+0x24>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	f7ff ffed 	bl	8000f00 <HAL_GetTick>
 8000f26:	1b40      	subs	r0, r0, r5
 8000f28:	42a0      	cmp	r0, r4
 8000f2a:	d3fa      	bcc.n	8000f22 <HAL_Delay+0x16>
  {
  }
}
 8000f2c:	bd38      	pop	{r3, r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000

08000f34 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f34:	2800      	cmp	r0, #0
 8000f36:	db08      	blt.n	8000f4a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	0109      	lsls	r1, r1, #4
 8000f3a:	b2c9      	uxtb	r1, r1
 8000f3c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f40:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f44:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000f48:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	f000 000f 	and.w	r0, r0, #15
 8000f4e:	0109      	lsls	r1, r1, #4
 8000f50:	b2c9      	uxtb	r1, r1
 8000f52:	4b01      	ldr	r3, [pc, #4]	@ (8000f58 <__NVIC_SetPriority+0x24>)
 8000f54:	5419      	strb	r1, [r3, r0]
  }
}
 8000f56:	4770      	bx	lr
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f62:	f1c0 0c07 	rsb	ip, r0, #7
 8000f66:	f1bc 0f04 	cmp.w	ip, #4
 8000f6a:	bf28      	it	cs
 8000f6c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f70:	1d03      	adds	r3, r0, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d90f      	bls.n	8000f96 <NVIC_EncodePriority+0x3a>
 8000f76:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000f7c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000f80:	ea21 0100 	bic.w	r1, r1, r0
 8000f84:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f86:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f8a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000f8e:	ea41 0002 	orr.w	r0, r1, r2
 8000f92:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	2300      	movs	r3, #0
 8000f98:	e7ee      	b.n	8000f78 <NVIC_EncodePriority+0x1c>
	...

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	0200      	lsls	r0, r0, #8
 8000faa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000fb8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_NVIC_SetPriority+0x1c>)
 8000fc6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000fcc:	f7ff ffc6 	bl	8000f5c <NVIC_EncodePriority>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff ffae 	bl	8000f34 <__NVIC_SetPriority>
}
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000fe6:	d20b      	bcs.n	8001000 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000fec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <HAL_SYSTICK_Config+0x24>)
 8000ff0:	21f0      	movs	r1, #240	@ 0xf0
 8000ff2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001000:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001008:	2300      	movs	r3, #0
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f200 80e9 	bhi.w	80011e2 <HAL_GPIO_Init+0x1da>
{
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	e065      	b.n	80010e2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800101c:	2403      	movs	r4, #3
 800101e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001022:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	68cc      	ldr	r4, [r1, #12]
 8001028:	fa04 f40e 	lsl.w	r4, r4, lr
 800102c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800102e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001032:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001036:	684a      	ldr	r2, [r1, #4]
 8001038:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800103c:	409a      	lsls	r2, r3
 800103e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001040:	6042      	str	r2, [r0, #4]
 8001042:	e05c      	b.n	80010fe <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	08dc      	lsrs	r4, r3, #3
 8001046:	3408      	adds	r4, #8
 8001048:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104c:	f003 0507 	and.w	r5, r3, #7
 8001050:	00ad      	lsls	r5, r5, #2
 8001052:	f04f 0e0f 	mov.w	lr, #15
 8001056:	fa0e fe05 	lsl.w	lr, lr, r5
 800105a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105e:	690a      	ldr	r2, [r1, #16]
 8001060:	40aa      	lsls	r2, r5
 8001062:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800106a:	e05c      	b.n	8001126 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106c:	2207      	movs	r2, #7
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 8001070:	2200      	movs	r2, #0
 8001072:	fa02 f20e 	lsl.w	r2, r2, lr
 8001076:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	3402      	adds	r4, #2
 800107a:	4d5a      	ldr	r5, [pc, #360]	@ (80011e4 <HAL_GPIO_Init+0x1dc>)
 800107c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001080:	4a59      	ldr	r2, [pc, #356]	@ (80011e8 <HAL_GPIO_Init+0x1e0>)
 8001082:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001084:	ea6f 020c 	mvn.w	r2, ip
 8001088:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108c:	684e      	ldr	r6, [r1, #4]
 800108e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001092:	d001      	beq.n	8001098 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001094:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001098:	4c53      	ldr	r4, [pc, #332]	@ (80011e8 <HAL_GPIO_Init+0x1e0>)
 800109a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800109c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800109e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a2:	684e      	ldr	r6, [r1, #4]
 80010a4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80010a8:	d001      	beq.n	80010ae <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80010aa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80010ae:	4c4e      	ldr	r4, [pc, #312]	@ (80011e8 <HAL_GPIO_Init+0x1e0>)
 80010b0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80010b2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b8:	684e      	ldr	r6, [r1, #4]
 80010ba:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80010be:	d001      	beq.n	80010c4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80010c0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80010c4:	4c48      	ldr	r4, [pc, #288]	@ (80011e8 <HAL_GPIO_Init+0x1e0>)
 80010c6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010cc:	684d      	ldr	r5, [r1, #4]
 80010ce:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80010d2:	d001      	beq.n	80010d8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80010d4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80010d8:	4c43      	ldr	r4, [pc, #268]	@ (80011e8 <HAL_GPIO_Init+0x1e0>)
 80010da:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010dc:	3301      	adds	r3, #1
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d87d      	bhi.n	80011de <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80010e2:	2201      	movs	r2, #1
 80010e4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	680c      	ldr	r4, [r1, #0]
 80010e8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80010ec:	ea32 0404 	bics.w	r4, r2, r4
 80010f0:	d1f4      	bne.n	80010dc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	684c      	ldr	r4, [r1, #4]
 80010f4:	f004 0403 	and.w	r4, r4, #3
 80010f8:	3c01      	subs	r4, #1
 80010fa:	2c01      	cmp	r4, #1
 80010fc:	d98b      	bls.n	8001016 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fe:	684a      	ldr	r2, [r1, #4]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	2a03      	cmp	r2, #3
 8001106:	d009      	beq.n	800111c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001108:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	005d      	lsls	r5, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	40aa      	lsls	r2, r5
 8001110:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	688a      	ldr	r2, [r1, #8]
 8001116:	40aa      	lsls	r2, r5
 8001118:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800111a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111c:	684a      	ldr	r2, [r1, #4]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	2a02      	cmp	r2, #2
 8001124:	d08e      	beq.n	8001044 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001126:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001128:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001132:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001136:	684a      	ldr	r2, [r1, #4]
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001140:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001142:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	684a      	ldr	r2, [r1, #4]
 8001146:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800114a:	d0c7      	beq.n	80010dc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	2200      	movs	r2, #0
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <HAL_GPIO_Init+0x1e4>)
 8001152:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001154:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001158:	6454      	str	r4, [r2, #68]	@ 0x44
 800115a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800115c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001164:	089c      	lsrs	r4, r3, #2
 8001166:	1ca5      	adds	r5, r4, #2
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <HAL_GPIO_Init+0x1dc>)
 800116a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116e:	f003 0e03 	and.w	lr, r3, #3
 8001172:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f20e 	lsl.w	r2, r2, lr
 800117c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_GPIO_Init+0x1e8>)
 8001182:	4290      	cmp	r0, r2
 8001184:	f43f af74 	beq.w	8001070 <HAL_GPIO_Init+0x68>
 8001188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800118c:	4290      	cmp	r0, r2
 800118e:	d01a      	beq.n	80011c6 <HAL_GPIO_Init+0x1be>
 8001190:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001194:	4290      	cmp	r0, r2
 8001196:	d018      	beq.n	80011ca <HAL_GPIO_Init+0x1c2>
 8001198:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800119c:	4290      	cmp	r0, r2
 800119e:	d016      	beq.n	80011ce <HAL_GPIO_Init+0x1c6>
 80011a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d014      	beq.n	80011d2 <HAL_GPIO_Init+0x1ca>
 80011a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d012      	beq.n	80011d6 <HAL_GPIO_Init+0x1ce>
 80011b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011b4:	4290      	cmp	r0, r2
 80011b6:	d010      	beq.n	80011da <HAL_GPIO_Init+0x1d2>
 80011b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80011bc:	4290      	cmp	r0, r2
 80011be:	f43f af55 	beq.w	800106c <HAL_GPIO_Init+0x64>
 80011c2:	2208      	movs	r2, #8
 80011c4:	e755      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011c6:	2201      	movs	r2, #1
 80011c8:	e753      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011ca:	2202      	movs	r2, #2
 80011cc:	e751      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011ce:	2203      	movs	r2, #3
 80011d0:	e74f      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011d2:	2204      	movs	r2, #4
 80011d4:	e74d      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011d6:	2205      	movs	r2, #5
 80011d8:	e74b      	b.n	8001072 <HAL_GPIO_Init+0x6a>
 80011da:	2206      	movs	r2, #6
 80011dc:	e749      	b.n	8001072 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80011de:	b002      	add	sp, #8
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	4770      	bx	lr
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40013c00 	.word	0x40013c00
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	b10a      	cbz	r2, 80011fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	6181      	str	r1, [r0, #24]
 80011f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	0409      	lsls	r1, r1, #16
 80011fc:	6181      	str	r1, [r0, #24]
  }
}
 80011fe:	4770      	bx	lr

08001200 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001200:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001202:	ea01 0203 	and.w	r2, r1, r3
 8001206:	ea21 0103 	bic.w	r1, r1, r3
 800120a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800120e:	6181      	str	r1, [r0, #24]
}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 80cc 	beq.w	80013b2 <HAL_I2C_Init+0x19e>
{
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800121e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001222:	2b00      	cmp	r3, #0
 8001224:	d077      	beq.n	8001316 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001226:	2324      	movs	r3, #36	@ 0x24
 8001228:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800123e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001248:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800124a:	f000 fbe3 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800124e:	6862      	ldr	r2, [r4, #4]
 8001250:	4b5a      	ldr	r3, [pc, #360]	@ (80013bc <HAL_I2C_Init+0x1a8>)
 8001252:	429a      	cmp	r2, r3
 8001254:	d864      	bhi.n	8001320 <HAL_I2C_Init+0x10c>
 8001256:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <HAL_I2C_Init+0x1ac>)
 8001258:	4298      	cmp	r0, r3
 800125a:	bf8c      	ite	hi
 800125c:	2300      	movhi	r3, #0
 800125e:	2301      	movls	r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 80a8 	bne.w	80013b6 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001266:	4957      	ldr	r1, [pc, #348]	@ (80013c4 <HAL_I2C_Init+0x1b0>)
 8001268:	fba1 3100 	umull	r3, r1, r1, r0
 800126c:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126e:	6825      	ldr	r5, [r4, #0]
 8001270:	686a      	ldr	r2, [r5, #4]
 8001272:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001276:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800127a:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127c:	6821      	ldr	r1, [r4, #0]
 800127e:	6a0a      	ldr	r2, [r1, #32]
 8001280:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001284:	6866      	ldr	r6, [r4, #4]
 8001286:	4d4d      	ldr	r5, [pc, #308]	@ (80013bc <HAL_I2C_Init+0x1a8>)
 8001288:	42ae      	cmp	r6, r5
 800128a:	d84f      	bhi.n	800132c <HAL_I2C_Init+0x118>
 800128c:	3301      	adds	r3, #1
 800128e:	4313      	orrs	r3, r2
 8001290:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001292:	6821      	ldr	r1, [r4, #0]
 8001294:	69ca      	ldr	r2, [r1, #28]
 8001296:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800129a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800129e:	6865      	ldr	r5, [r4, #4]
 80012a0:	4b46      	ldr	r3, [pc, #280]	@ (80013bc <HAL_I2C_Init+0x1a8>)
 80012a2:	429d      	cmp	r5, r3
 80012a4:	d84c      	bhi.n	8001340 <HAL_I2C_Init+0x12c>
 80012a6:	1e43      	subs	r3, r0, #1
 80012a8:	006d      	lsls	r5, r5, #1
 80012aa:	fbb3 f3f5 	udiv	r3, r3, r5
 80012ae:	3301      	adds	r3, #1
 80012b0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80012b4:	4203      	tst	r3, r0
 80012b6:	d078      	beq.n	80013aa <HAL_I2C_Init+0x196>
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	431a      	orrs	r2, r3
 80012be:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c0:	6821      	ldr	r1, [r4, #0]
 80012c2:	680b      	ldr	r3, [r1, #0]
 80012c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80012c8:	69e2      	ldr	r2, [r4, #28]
 80012ca:	6a20      	ldr	r0, [r4, #32]
 80012cc:	4302      	orrs	r2, r0
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	688b      	ldr	r3, [r1, #8]
 80012d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012de:	6922      	ldr	r2, [r4, #16]
 80012e0:	68e0      	ldr	r0, [r4, #12]
 80012e2:	4302      	orrs	r2, r0
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012e8:	6821      	ldr	r1, [r4, #0]
 80012ea:	68cb      	ldr	r3, [r1, #12]
 80012ec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012f0:	6962      	ldr	r2, [r4, #20]
 80012f2:	69a0      	ldr	r0, [r4, #24]
 80012f4:	4302      	orrs	r2, r0
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012fa:	6822      	ldr	r2, [r4, #0]
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	2000      	movs	r0, #0
 8001306:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001308:	2320      	movs	r3, #32
 800130a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800130e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001314:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800131a:	f7ff fcd9 	bl	8000cd0 <HAL_I2C_MspInit>
 800131e:	e782      	b.n	8001226 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <HAL_I2C_Init+0x1b4>)
 8001322:	4298      	cmp	r0, r3
 8001324:	bf8c      	ite	hi
 8001326:	2300      	movhi	r3, #0
 8001328:	2301      	movls	r3, #1
 800132a:	e799      	b.n	8001260 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800132c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001330:	fb05 f303 	mul.w	r3, r5, r3
 8001334:	4d25      	ldr	r5, [pc, #148]	@ (80013cc <HAL_I2C_Init+0x1b8>)
 8001336:	fba5 5303 	umull	r5, r3, r5, r3
 800133a:	099b      	lsrs	r3, r3, #6
 800133c:	3301      	adds	r3, #1
 800133e:	e7a6      	b.n	800128e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001340:	68a6      	ldr	r6, [r4, #8]
 8001342:	b9be      	cbnz	r6, 8001374 <HAL_I2C_Init+0x160>
 8001344:	1e43      	subs	r3, r0, #1
 8001346:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800134a:	fbb3 f3fc 	udiv	r3, r3, ip
 800134e:	3301      	adds	r3, #1
 8001350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	bb43      	cbnz	r3, 80013ae <HAL_I2C_Init+0x19a>
 800135c:	b9c6      	cbnz	r6, 8001390 <HAL_I2C_Init+0x17c>
 800135e:	1e43      	subs	r3, r0, #1
 8001360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001364:	fbb3 f3f5 	udiv	r3, r3, r5
 8001368:	3301      	adds	r3, #1
 800136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001372:	e7a3      	b.n	80012bc <HAL_I2C_Init+0xa8>
 8001374:	1e43      	subs	r3, r0, #1
 8001376:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800137a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800137e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	e7e4      	b.n	800135a <HAL_I2C_Init+0x146>
 8001390:	1e43      	subs	r3, r0, #1
 8001392:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001396:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800139a:	fbb3 f3f5 	udiv	r3, r3, r5
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013a8:	e788      	b.n	80012bc <HAL_I2C_Init+0xa8>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e786      	b.n	80012bc <HAL_I2C_Init+0xa8>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e784      	b.n	80012bc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
}
 80013b4:	4770      	bx	lr
    return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
 80013b8:	e7ac      	b.n	8001314 <HAL_I2C_Init+0x100>
 80013ba:	bf00      	nop
 80013bc:	000186a0 	.word	0x000186a0
 80013c0:	001e847f 	.word	0x001e847f
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	003d08ff 	.word	0x003d08ff
 80013cc:	10624dd3 	.word	0x10624dd3

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2100      	movs	r1, #0
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_MspInit+0x34>)
 80013d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44
 80013e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013e2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80013e6:	9200      	str	r2, [sp, #0]
 80013e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	9101      	str	r1, [sp, #4]
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	b002      	add	sp, #8
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	2800      	cmp	r0, #0
 800140a:	f000 81e0 	beq.w	80017ce <HAL_RCC_OscConfig+0x3c6>
{
 800140e:	b570      	push	{r4, r5, r6, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001414:	6803      	ldr	r3, [r0, #0]
 8001416:	f013 0f01 	tst.w	r3, #1
 800141a:	d03b      	beq.n	8001494 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800141c:	4b9f      	ldr	r3, [pc, #636]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d02c      	beq.n	8001482 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001428:	4b9c      	ldr	r3, [pc, #624]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001430:	2b08      	cmp	r3, #8
 8001432:	d021      	beq.n	8001478 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	6863      	ldr	r3, [r4, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143a:	d04f      	beq.n	80014dc <HAL_RCC_OscConfig+0xd4>
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d052      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
 8001442:	4b96      	ldr	r3, [pc, #600]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001452:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d050      	beq.n	80014fc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fd51 	bl	8000f00 <HAL_GetTick>
 800145e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	4b8e      	ldr	r3, [pc, #568]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001468:	d114      	bne.n	8001494 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146a:	f7ff fd49 	bl	8000f00 <HAL_GetTick>
 800146e:	1b40      	subs	r0, r0, r5
 8001470:	2864      	cmp	r0, #100	@ 0x64
 8001472:	d9f5      	bls.n	8001460 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001474:	2003      	movs	r0, #3
 8001476:	e1b1      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001478:	4b88      	ldr	r3, [pc, #544]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001480:	d0d8      	beq.n	8001434 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b86      	ldr	r3, [pc, #536]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800148a:	d003      	beq.n	8001494 <HAL_RCC_OscConfig+0x8c>
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 819f 	beq.w	80017d2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	f013 0f02 	tst.w	r3, #2
 800149a:	d054      	beq.n	8001546 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800149c:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f013 0f0c 	tst.w	r3, #12
 80014a4:	d03e      	beq.n	8001524 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b7d      	ldr	r3, [pc, #500]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d033      	beq.n	800151a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b2:	68e3      	ldr	r3, [r4, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d068      	beq.n	800158a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <HAL_RCC_OscConfig+0x298>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fd1f 	bl	8000f00 <HAL_GetTick>
 80014c2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b75      	ldr	r3, [pc, #468]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f013 0f02 	tst.w	r3, #2
 80014cc:	d154      	bne.n	8001578 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fd17 	bl	8000f00 <HAL_GetTick>
 80014d2:	1b40      	subs	r0, r0, r5
 80014d4:	2802      	cmp	r0, #2
 80014d6:	d9f5      	bls.n	80014c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
 80014da:	e17f      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	4a6f      	ldr	r2, [pc, #444]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e7b5      	b.n	8001454 <HAL_RCC_OscConfig+0x4c>
 80014e8:	4b6c      	ldr	r3, [pc, #432]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e7ab      	b.n	8001454 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80014fc:	f7ff fd00 	bl	8000f00 <HAL_GetTick>
 8001500:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b66      	ldr	r3, [pc, #408]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800150a:	d0c3      	beq.n	8001494 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcf8 	bl	8000f00 <HAL_GetTick>
 8001510:	1b40      	subs	r0, r0, r5
 8001512:	2864      	cmp	r0, #100	@ 0x64
 8001514:	d9f5      	bls.n	8001502 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e160      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b60      	ldr	r3, [pc, #384]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001522:	d1c6      	bne.n	80014b2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001524:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f013 0f02 	tst.w	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_OscConfig+0x12e>
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 8150 	bne.w	80017d6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4a59      	ldr	r2, [pc, #356]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800153e:	6921      	ldr	r1, [r4, #16]
 8001540:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001544:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	f013 0f08 	tst.w	r3, #8
 800154c:	d042      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800154e:	6963      	ldr	r3, [r4, #20]
 8001550:	b36b      	cbz	r3, 80015ae <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <HAL_RCC_OscConfig+0x298>)
 8001554:	2201      	movs	r2, #1
 8001556:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fcd1 	bl	8000f00 <HAL_GetTick>
 800155e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001560:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001564:	f013 0f02 	tst.w	r3, #2
 8001568:	d134      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fcc9 	bl	8000f00 <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	2802      	cmp	r0, #2
 8001572:	d9f5      	bls.n	8001560 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001574:	2003      	movs	r0, #3
 8001576:	e131      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4a48      	ldr	r2, [pc, #288]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001580:	6921      	ldr	r1, [r4, #16]
 8001582:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e7dd      	b.n	8001546 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <HAL_RCC_OscConfig+0x298>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001590:	f7ff fcb6 	bl	8000f00 <HAL_GetTick>
 8001594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f013 0f02 	tst.w	r3, #2
 800159e:	d0d2      	beq.n	8001546 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fcae 	bl	8000f00 <HAL_GetTick>
 80015a4:	1b40      	subs	r0, r0, r5
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9f5      	bls.n	8001596 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
 80015ac:	e116      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <HAL_RCC_OscConfig+0x298>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fca3 	bl	8000f00 <HAL_GetTick>
 80015ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80015be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c0:	f013 0f02 	tst.w	r3, #2
 80015c4:	d006      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc9b 	bl	8000f00 <HAL_GetTick>
 80015ca:	1b40      	subs	r0, r0, r5
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9f5      	bls.n	80015bc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
 80015d2:	e103      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	f013 0f04 	tst.w	r3, #4
 80015da:	d077      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4b2f      	ldr	r3, [pc, #188]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80015e4:	d133      	bne.n	800164e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	4b2c      	ldr	r3, [pc, #176]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 80015ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80015f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015fe:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <HAL_RCC_OscConfig+0x29c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001608:	d023      	beq.n	8001652 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d034      	beq.n	800167a <HAL_RCC_OscConfig+0x272>
 8001610:	2b05      	cmp	r3, #5
 8001612:	d038      	beq.n	8001686 <HAL_RCC_OscConfig+0x27e>
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001616:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	671a      	str	r2, [r3, #112]	@ 0x70
 800161e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001620:	f022 0204 	bic.w	r2, r2, #4
 8001624:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001626:	68a3      	ldr	r3, [r4, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03d      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc68 	bl	8000f00 <HAL_GetTick>
 8001630:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f013 0f02 	tst.w	r3, #2
 800163a:	d146      	bne.n	80016ca <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff fc60 	bl	8000f00 <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001646:	4298      	cmp	r0, r3
 8001648:	d9f3      	bls.n	8001632 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800164a:	2003      	movs	r0, #3
 800164c:	e0c6      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2500      	movs	r5, #0
 8001650:	e7d6      	b.n	8001600 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <HAL_RCC_OscConfig+0x29c>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800165c:	f7ff fc50 	bl	8000f00 <HAL_GetTick>
 8001660:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <HAL_RCC_OscConfig+0x29c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800166a:	d1ce      	bne.n	800160a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166c:	f7ff fc48 	bl	8000f00 <HAL_GetTick>
 8001670:	1b80      	subs	r0, r0, r6
 8001672:	2802      	cmp	r0, #2
 8001674:	d9f5      	bls.n	8001662 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001676:	2003      	movs	r0, #3
 8001678:	e0b0      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	4a08      	ldr	r2, [pc, #32]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 800167c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	@ 0x70
 8001684:	e7cf      	b.n	8001626 <HAL_RCC_OscConfig+0x21e>
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_RCC_OscConfig+0x294>)
 8001688:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800168a:	f042 0204 	orr.w	r2, r2, #4
 800168e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001690:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	671a      	str	r2, [r3, #112]	@ 0x70
 8001698:	e7c5      	b.n	8001626 <HAL_RCC_OscConfig+0x21e>
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	42470000 	.word	0x42470000
 80016a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fc2a 	bl	8000f00 <HAL_GetTick>
 80016ac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	4b52      	ldr	r3, [pc, #328]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	f013 0f02 	tst.w	r3, #2
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fc22 	bl	8000f00 <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016c2:	4298      	cmp	r0, r3
 80016c4:	d9f3      	bls.n	80016ae <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80016c6:	2003      	movs	r0, #3
 80016c8:	e088      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ca:	b9ed      	cbnz	r5, 8001708 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	69a3      	ldr	r3, [r4, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8083 	beq.w	80017da <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d4:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 80016d6:	6892      	ldr	r2, [r2, #8]
 80016d8:	f002 020c 	and.w	r2, r2, #12
 80016dc:	2a08      	cmp	r2, #8
 80016de:	d051      	beq.n	8001784 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d017      	beq.n	8001714 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <HAL_RCC_OscConfig+0x3f4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fc09 	bl	8000f00 <HAL_GetTick>
 80016ee:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f0:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80016f8:	d042      	beq.n	8001780 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fc01 	bl	8000f00 <HAL_GetTick>
 80016fe:	1b00      	subs	r0, r0, r4
 8001700:	2802      	cmp	r0, #2
 8001702:	d9f5      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001704:	2003      	movs	r0, #3
 8001706:	e069      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4a3b      	ldr	r2, [pc, #236]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 800170a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	e7db      	b.n	80016cc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x3f4>)
 8001716:	2200      	movs	r2, #0
 8001718:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800171a:	f7ff fbf1 	bl	8000f00 <HAL_GetTick>
 800171e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001728:	d006      	beq.n	8001738 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fbe9 	bl	8000f00 <HAL_GetTick>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	2802      	cmp	r0, #2
 8001732:	d9f5      	bls.n	8001720 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e051      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001738:	69e3      	ldr	r3, [r4, #28]
 800173a:	6a22      	ldr	r2, [r4, #32]
 800173c:	4313      	orrs	r3, r2
 800173e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001740:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001744:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001746:	0852      	lsrs	r2, r2, #1
 8001748:	3a01      	subs	r2, #1
 800174a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800174e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001750:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001754:	4a28      	ldr	r2, [pc, #160]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 8001756:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <HAL_RCC_OscConfig+0x3f4>)
 800175a:	2201      	movs	r2, #1
 800175c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800175e:	f7ff fbcf 	bl	8000f00 <HAL_GetTick>
 8001762:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fbc7 	bl	8000f00 <HAL_GetTick>
 8001772:	1b00      	subs	r0, r0, r4
 8001774:	2802      	cmp	r0, #2
 8001776:	d9f5      	bls.n	8001764 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001778:	2003      	movs	r0, #3
 800177a:	e02f      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800177c:	2000      	movs	r0, #0
 800177e:	e02d      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 8001780:	2000      	movs	r0, #0
 8001782:	e02b      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	2b01      	cmp	r3, #1
 8001786:	d02b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x3f0>)
 800178a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001790:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001792:	4291      	cmp	r1, r2
 8001794:	d126      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800179a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	428a      	cmp	r2, r1
 800179e:	d123      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80017a6:	401a      	ands	r2, r3
 80017a8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80017ac:	d11e      	bne.n	80017ec <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ae:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80017b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80017b4:	0852      	lsrs	r2, r2, #1
 80017b6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017be:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80017c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80017c8:	d114      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e006      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
}
 80017d0:	4770      	bx	lr
        return HAL_ERROR;
 80017d2:	2001      	movs	r0, #1
 80017d4:	e002      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
}
 80017dc:	b002      	add	sp, #8
 80017de:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e7fb      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	e7f9      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 80017e8:	2001      	movs	r0, #1
 80017ea:	e7f7      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 80017ec:	2001      	movs	r0, #1
 80017ee:	e7f5      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 80017f0:	2001      	movs	r0, #1
 80017f2:	e7f3      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7f1      	b.n	80017dc <HAL_RCC_OscConfig+0x3d4>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	42470000 	.word	0x42470000

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d041      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x92>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d141      	bne.n	8001896 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001820:	d012      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800182a:	481d      	ldr	r0, [pc, #116]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800182c:	2300      	movs	r3, #0
 800182e:	fba1 0100 	umull	r0, r1, r1, r0
 8001832:	f7ff f999 	bl	8000b68 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800183e:	3301      	adds	r3, #1
 8001840:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001842:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001846:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_RCC_GetSysClockFreq+0x9c>)
 800184a:	6858      	ldr	r0, [r3, #4]
 800184c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001850:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001854:	ebbc 0c00 	subs.w	ip, ip, r0
 8001858:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800185c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001860:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001864:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001868:	ebb1 010c 	subs.w	r1, r1, ip
 800186c:	eb63 030e 	sbc.w	r3, r3, lr
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001876:	00c9      	lsls	r1, r1, #3
 8001878:	eb11 0c00 	adds.w	ip, r1, r0
 800187c:	f143 0300 	adc.w	r3, r3, #0
 8001880:	0299      	lsls	r1, r3, #10
 8001882:	2300      	movs	r3, #0
 8001884:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001888:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800188c:	f7ff f96c 	bl	8000b68 <__aeabi_uldivmod>
 8001890:	e7d1      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001894:	e7d7      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001896:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001898:	e7d5      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x46>
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	017d7840 	.word	0x017d7840
 80018a4:	00f42400 	.word	0x00f42400

080018a8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f000 809b 	beq.w	80019e4 <HAL_RCC_ClockConfig+0x13c>
{
 80018ae:	b570      	push	{r4, r5, r6, lr}
 80018b0:	460d      	mov	r5, r1
 80018b2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <HAL_RCC_ClockConfig+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	428b      	cmp	r3, r1
 80018be:	d208      	bcs.n	80018d2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c0:	b2cb      	uxtb	r3, r1
 80018c2:	4a4c      	ldr	r2, [pc, #304]	@ (80019f4 <HAL_RCC_ClockConfig+0x14c>)
 80018c4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	428b      	cmp	r3, r1
 80018ce:	f040 808b 	bne.w	80019e8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f013 0f02 	tst.w	r3, #2
 80018d8:	d017      	beq.n	800190a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018da:	f013 0f04 	tst.w	r3, #4
 80018de:	d004      	beq.n	80018ea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4a45      	ldr	r2, [pc, #276]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018e8:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	f013 0f08 	tst.w	r3, #8
 80018f0:	d004      	beq.n	80018fc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f2:	4a41      	ldr	r2, [pc, #260]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 80018f4:	6893      	ldr	r3, [r2, #8]
 80018f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018fa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fc:	4a3e      	ldr	r2, [pc, #248]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 80018fe:	6893      	ldr	r3, [r2, #8]
 8001900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001904:	68a1      	ldr	r1, [r4, #8]
 8001906:	430b      	orrs	r3, r1
 8001908:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f013 0f01 	tst.w	r3, #1
 8001910:	d032      	beq.n	8001978 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d021      	beq.n	800195c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001918:	1e9a      	subs	r2, r3, #2
 800191a:	2a01      	cmp	r2, #1
 800191c:	d925      	bls.n	800196a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4a36      	ldr	r2, [pc, #216]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	f012 0f02 	tst.w	r2, #2
 8001926:	d061      	beq.n	80019ec <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001928:	4933      	ldr	r1, [pc, #204]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 800192a:	688a      	ldr	r2, [r1, #8]
 800192c:	f022 0203 	bic.w	r2, r2, #3
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001934:	f7ff fae4 	bl	8000f00 <HAL_GetTick>
 8001938:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	6862      	ldr	r2, [r4, #4]
 8001944:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001948:	d016      	beq.n	8001978 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff fad9 	bl	8000f00 <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001954:	4298      	cmp	r0, r3
 8001956:	d9f0      	bls.n	800193a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001958:	2003      	movs	r0, #3
 800195a:	e042      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195c:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001964:	d1e0      	bne.n	8001928 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	e03b      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001972:	d1d9      	bne.n	8001928 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	e034      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_RCC_ClockConfig+0x14c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	42ab      	cmp	r3, r5
 8001982:	d907      	bls.n	8001994 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001984:	b2ea      	uxtb	r2, r5
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_RCC_ClockConfig+0x14c>)
 8001988:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	42ab      	cmp	r3, r5
 8001992:	d12d      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 0f04 	tst.w	r3, #4
 800199a:	d006      	beq.n	80019aa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 800199e:	6893      	ldr	r3, [r2, #8]
 80019a0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80019a4:	68e1      	ldr	r1, [r4, #12]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f013 0f08 	tst.w	r3, #8
 80019b0:	d007      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 80019b4:	6893      	ldr	r3, [r2, #8]
 80019b6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80019ba:	6921      	ldr	r1, [r4, #16]
 80019bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019c0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c2:	f7ff ff1d 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_RCC_ClockConfig+0x150>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019ce:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <HAL_RCC_ClockConfig+0x154>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	40d8      	lsrs	r0, r3
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_RCC_ClockConfig+0x158>)
 80019d6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x15c>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f7ff fa44 	bl	8000e68 <HAL_InitTick>
  return HAL_OK;
 80019e0:	2000      	movs	r0, #0
}
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	4770      	bx	lr
      return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7fa      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e7f8      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
 80019f2:	e7f6      	b.n	80019e2 <HAL_RCC_ClockConfig+0x13a>
 80019f4:	40023c00 	.word	0x40023c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08004cc4 	.word	0x08004cc4
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a08:	4b01      	ldr	r3, [pc, #4]	@ (8001a10 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a16:	f7ff fff7 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a1a:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a22:	4a03      	ldr	r2, [pc, #12]	@ (8001a30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a24:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a26:	40d8      	lsrs	r0, r3
 8001a28:	bd08      	pop	{r3, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08004cbc 	.word	0x08004cbc

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a36:	f7ff ffe7 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a42:	4a03      	ldr	r2, [pc, #12]	@ (8001a50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a46:	40d8      	lsrs	r0, r3
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004cbc 	.word	0x08004cbc

08001a54 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a56:	f102 030c 	add.w	r3, r2, #12
 8001a5a:	e853 3f00 	ldrex	r3, [r3]
 8001a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a62:	320c      	adds	r2, #12
 8001a64:	e842 3100 	strex	r1, r3, [r2]
 8001a68:	2900      	cmp	r1, #0
 8001a6a:	d1f3      	bne.n	8001a54 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a6e:	f102 0314 	add.w	r3, r2, #20
 8001a72:	e853 3f00 	ldrex	r3, [r3]
 8001a76:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7a:	3214      	adds	r2, #20
 8001a7c:	e842 3100 	strex	r1, r3, [r2]
 8001a80:	2900      	cmp	r1, #0
 8001a82:	d1f3      	bne.n	8001a6c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d005      	beq.n	8001a96 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a90:	2300      	movs	r3, #0
 8001a92:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8001a94:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a96:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a98:	f102 030c 	add.w	r3, r2, #12
 8001a9c:	e853 3f00 	ldrex	r3, [r3]
 8001aa0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa4:	320c      	adds	r2, #12
 8001aa6:	e842 3100 	strex	r1, r3, [r2]
 8001aaa:	2900      	cmp	r1, #0
 8001aac:	d1f3      	bne.n	8001a96 <UART_EndRxTransfer+0x42>
 8001aae:	e7ec      	b.n	8001a8a <UART_EndRxTransfer+0x36>

08001ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ab4:	6802      	ldr	r2, [r0, #0]
 8001ab6:	6913      	ldr	r3, [r2, #16]
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001abc:	68c1      	ldr	r1, [r0, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac2:	6883      	ldr	r3, [r0, #8]
 8001ac4:	6902      	ldr	r2, [r0, #16]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	6943      	ldr	r3, [r0, #20]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	69c3      	ldr	r3, [r0, #28]
 8001ace:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001ad0:	6801      	ldr	r1, [r0, #0]
 8001ad2:	68cb      	ldr	r3, [r1, #12]
 8001ad4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001ad8:	f023 030c 	bic.w	r3, r3, #12
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ae0:	6802      	ldr	r2, [r0, #0]
 8001ae2:	6953      	ldr	r3, [r2, #20]
 8001ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ae8:	6981      	ldr	r1, [r0, #24]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001aee:	6803      	ldr	r3, [r0, #0]
 8001af0:	4a31      	ldr	r2, [pc, #196]	@ (8001bb8 <UART_SetConfig+0x108>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d006      	beq.n	8001b04 <UART_SetConfig+0x54>
 8001af6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d002      	beq.n	8001b04 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001afe:	f7ff ff89 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8001b02:	e001      	b.n	8001b08 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b04:	f7ff ff96 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b08:	69e3      	ldr	r3, [r4, #28]
 8001b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b0e:	d029      	beq.n	8001b64 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b10:	2100      	movs	r1, #0
 8001b12:	1803      	adds	r3, r0, r0
 8001b14:	4149      	adcs	r1, r1
 8001b16:	181b      	adds	r3, r3, r0
 8001b18:	f141 0100 	adc.w	r1, r1, #0
 8001b1c:	00c9      	lsls	r1, r1, #3
 8001b1e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	1818      	adds	r0, r3, r0
 8001b26:	6863      	ldr	r3, [r4, #4]
 8001b28:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001b2c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001b30:	f141 0100 	adc.w	r1, r1, #0
 8001b34:	f7ff f818 	bl	8000b68 <__aeabi_uldivmod>
 8001b38:	4a20      	ldr	r2, [pc, #128]	@ (8001bbc <UART_SetConfig+0x10c>)
 8001b3a:	fba2 3100 	umull	r3, r1, r2, r0
 8001b3e:	0949      	lsrs	r1, r1, #5
 8001b40:	2364      	movs	r3, #100	@ 0x64
 8001b42:	fb03 0311 	mls	r3, r3, r1, r0
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	3332      	adds	r3, #50	@ 0x32
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b54:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	6821      	ldr	r1, [r4, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }
}
 8001b62:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b64:	2300      	movs	r3, #0
 8001b66:	1802      	adds	r2, r0, r0
 8001b68:	eb43 0103 	adc.w	r1, r3, r3
 8001b6c:	1812      	adds	r2, r2, r0
 8001b6e:	f141 0100 	adc.w	r1, r1, #0
 8001b72:	00c9      	lsls	r1, r1, #3
 8001b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b78:	00d2      	lsls	r2, r2, #3
 8001b7a:	1810      	adds	r0, r2, r0
 8001b7c:	f141 0100 	adc.w	r1, r1, #0
 8001b80:	6862      	ldr	r2, [r4, #4]
 8001b82:	1892      	adds	r2, r2, r2
 8001b84:	415b      	adcs	r3, r3
 8001b86:	f7fe ffef 	bl	8000b68 <__aeabi_uldivmod>
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <UART_SetConfig+0x10c>)
 8001b8c:	fba2 3100 	umull	r3, r1, r2, r0
 8001b90:	0949      	lsrs	r1, r1, #5
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	fb03 0311 	mls	r3, r3, r1, r0
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	3332      	adds	r3, #50	@ 0x32
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	005a      	lsls	r2, r3, #1
 8001ba4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001ba8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	6821      	ldr	r1, [r4, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
 8001bb6:	e7d4      	b.n	8001b62 <UART_SetConfig+0xb2>
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	51eb851f 	.word	0x51eb851f

08001bc0 <UART_WaitOnFlagUntilTimeout>:
{
 8001bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	460e      	mov	r6, r1
 8001bca:	4617      	mov	r7, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	ea36 0404 	bics.w	r4, r6, r4
 8001bda:	bf0c      	ite	eq
 8001bdc:	2401      	moveq	r4, #1
 8001bde:	2400      	movne	r4, #0
 8001be0:	42bc      	cmp	r4, r7
 8001be2:	d128      	bne.n	8001c36 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001be8:	d0f3      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff f989 	bl	8000f00 <HAL_GetTick>
 8001bee:	eba0 0009 	sub.w	r0, r0, r9
 8001bf2:	4540      	cmp	r0, r8
 8001bf4:	d823      	bhi.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x7e>
 8001bf6:	f1b8 0f00 	cmp.w	r8, #0
 8001bfa:	d022      	beq.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	f012 0f04 	tst.w	r2, #4
 8001c04:	d0e5      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x12>
 8001c06:	2e80      	cmp	r6, #128	@ 0x80
 8001c08:	d0e3      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x12>
 8001c0a:	2e40      	cmp	r6, #64	@ 0x40
 8001c0c:	d0e1      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f012 0f08 	tst.w	r2, #8
 8001c14:	d0dd      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c16:	2400      	movs	r4, #0
 8001c18:	9401      	str	r4, [sp, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff ff15 	bl	8001a54 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8001c2e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
 8001c34:	e000      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
}
 8001c38:	b003      	add	sp, #12
 8001c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001c3e:	2003      	movs	r0, #3
 8001c40:	e7fa      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x78>
 8001c42:	2003      	movs	r0, #3
 8001c44:	e7f8      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0x78>

08001c46 <HAL_UART_Init>:
  if (huart == NULL)
 8001c46:	b360      	cbz	r0, 8001ca2 <HAL_UART_Init+0x5c>
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c4c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c50:	b313      	cbz	r3, 8001c98 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c52:	2324      	movs	r3, #36	@ 0x24
 8001c54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	68d3      	ldr	r3, [r2, #12]
 8001c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c60:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ff24 	bl	8001ab0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	6913      	ldr	r3, [r2, #16]
 8001c6c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001c70:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	6953      	ldr	r3, [r2, #20]
 8001c76:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001c7a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	68d3      	ldr	r3, [r2, #12]
 8001c80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c84:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c86:	2000      	movs	r0, #0
 8001c88:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c94:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001c96:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c98:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001c9c:	f000 f8f6 	bl	8001e8c <HAL_UART_MspInit>
 8001ca0:	e7d7      	b.n	8001c52 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
}
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_UART_Transmit>:
{
 8001ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cae:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d156      	bne.n	8001d64 <HAL_UART_Transmit+0xbe>
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	460d      	mov	r5, r1
 8001cba:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d055      	beq.n	8001d6c <HAL_UART_Transmit+0xc6>
 8001cc0:	b90a      	cbnz	r2, 8001cc6 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	e04f      	b.n	8001d66 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cca:	2321      	movs	r3, #33	@ 0x21
 8001ccc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f916 	bl	8000f00 <HAL_GetTick>
 8001cd4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001cd6:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cda:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cde:	68a3      	ldr	r3, [r4, #8]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce4:	d002      	beq.n	8001cec <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8001ce6:	f04f 0800 	mov.w	r8, #0
 8001cea:	e014      	b.n	8001d16 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cec:	6923      	ldr	r3, [r4, #16]
 8001cee:	b32b      	cbz	r3, 8001d3c <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8001cf0:	f04f 0800 	mov.w	r8, #0
 8001cf4:	e00f      	b.n	8001d16 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	e032      	b.n	8001d66 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d00:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001d0c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	3a01      	subs	r2, #1
 8001d12:	b292      	uxth	r2, r2
 8001d14:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001d16:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b193      	cbz	r3, 8001d42 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	9600      	str	r6, [sp, #0]
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff4b 	bl	8001bc0 <UART_WaitOnFlagUntilTimeout>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d1e3      	bne.n	8001cf6 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d0e6      	beq.n	8001d00 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d32:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d3a:	e7e7      	b.n	8001d0c <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8001d3c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001d3e:	2500      	movs	r5, #0
 8001d40:	e7e9      	b.n	8001d16 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	9600      	str	r6, [sp, #0]
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	2140      	movs	r1, #64	@ 0x40
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff ff38 	bl	8001bc0 <UART_WaitOnFlagUntilTimeout>
 8001d50:	b918      	cbnz	r0, 8001d5a <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8001d52:	2320      	movs	r3, #32
 8001d54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001d58:	e005      	b.n	8001d66 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001d60:	2003      	movs	r0, #3
 8001d62:	e000      	b.n	8001d66 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001d64:	2002      	movs	r0, #2
}
 8001d66:	b002      	add	sp, #8
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	e7fa      	b.n	8001d66 <HAL_UART_Transmit+0xc0>

08001d70 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler>

08001d72 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler>

08001d74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler>

08001d76 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler>

08001d78 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler>

08001d7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f7ff f8b1 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bd08      	pop	{r3, pc}

08001d88 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001d88:	2001      	movs	r0, #1
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8e:	f000 ffa1 	bl	8002cd4 <__errno>
 8001d92:	2316      	movs	r3, #22
 8001d94:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d9a:	bd08      	pop	{r3, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da2:	f7ff fff3 	bl	8001d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da6:	e7fe      	b.n	8001da6 <_exit+0xa>

08001da8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	460c      	mov	r4, r1
 8001dac:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2500      	movs	r5, #0
 8001db0:	e006      	b.n	8001dc0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001db2:	f3af 8000 	nop.w
 8001db6:	4621      	mov	r1, r4
 8001db8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001dbe:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	42b5      	cmp	r5, r6
 8001dc2:	dbf6      	blt.n	8001db2 <_read+0xa>
  }

  return len;
}
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}

08001dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2500      	movs	r5, #0
 8001dd0:	e004      	b.n	8001ddc <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001dd2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001dd6:	f000 f893 	bl	8001f00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	3501      	adds	r5, #1
 8001ddc:	42b5      	cmp	r5, r6
 8001dde:	dbf8      	blt.n	8001dd2 <_write+0xa>
  }
  return len;
}
 8001de0:	4630      	mov	r0, r6
 8001de2:	bd70      	pop	{r4, r5, r6, pc}

08001de4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dee:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001df4:	2001      	movs	r0, #1
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001df8:	2000      	movs	r0, #0
 8001dfa:	4770      	bx	lr

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <_sbrk+0x38>)
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <_sbrk+0x40>)
 8001e06:	6800      	ldr	r0, [r0, #0]
 8001e08:	b140      	cbz	r0, 8001e1c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <_sbrk+0x40>)
 8001e0c:	6800      	ldr	r0, [r0, #0]
 8001e0e:	4403      	add	r3, r0
 8001e10:	1a52      	subs	r2, r2, r1
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d806      	bhi.n	8001e24 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <_sbrk+0x40>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001e1a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <_sbrk+0x40>)
 8001e1e:	4c08      	ldr	r4, [pc, #32]	@ (8001e40 <_sbrk+0x44>)
 8001e20:	6004      	str	r4, [r0, #0]
 8001e22:	e7f2      	b.n	8001e0a <_sbrk+0xe>
    errno = ENOMEM;
 8001e24:	f000 ff56 	bl	8002cd4 <__errno>
 8001e28:	230c      	movs	r3, #12
 8001e2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e30:	e7f3      	b.n	8001e1a <_sbrk+0x1e>
 8001e32:	bf00      	nop
 8001e34:	20020000 	.word	0x20020000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	20000248 	.word	0x20000248
 8001e40:	200003e0 	.word	0x200003e0

08001e44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4a03      	ldr	r2, [pc, #12]	@ (8001e54 <SystemInit+0x10>)
 8001e46:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001e4a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5a:	480a      	ldr	r0, [pc, #40]	@ (8001e84 <MX_USART1_UART_Init+0x2c>)
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <MX_USART1_UART_Init+0x30>)
 8001e5e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001e60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001e64:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	2300      	movs	r3, #0
 8001e68:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6e:	220c      	movs	r2, #12
 8001e70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e76:	f7ff fee6 	bl	8001c46 <HAL_UART_Init>
 8001e7a:	b900      	cbnz	r0, 8001e7e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e7e:	f7fe ff6b 	bl	8000d58 <Error_Handler>
}
 8001e82:	e7fb      	b.n	8001e7c <MX_USART1_UART_Init+0x24>
 8001e84:	2000024c 	.word	0x2000024c
 8001e88:	40011000 	.word	0x40011000

08001e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e8c:	b500      	push	{lr}
 8001e8e:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	2300      	movs	r3, #0
 8001e92:	9303      	str	r3, [sp, #12]
 8001e94:	9304      	str	r3, [sp, #16]
 8001e96:	9305      	str	r3, [sp, #20]
 8001e98:	9306      	str	r3, [sp, #24]
 8001e9a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001e9c:	6802      	ldr	r2, [r0, #0]
 8001e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ea2:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d002      	beq.n	8001eb0 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001eaa:	b009      	add	sp, #36	@ 0x24
 8001eac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	9101      	str	r1, [sp, #4]
 8001eb4:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eba:	f042 0210 	orr.w	r2, r2, #16
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ec2:	f002 0210 	and.w	r2, r2, #16
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	9102      	str	r1, [sp, #8]
 8001ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ede:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ee2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eec:	2307      	movs	r3, #7
 8001eee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	a903      	add	r1, sp, #12
 8001ef2:	4802      	ldr	r0, [pc, #8]	@ (8001efc <HAL_UART_MspInit+0x70>)
 8001ef4:	f7ff f888 	bl	8001008 <HAL_GPIO_Init>
}
 8001ef8:	e7d7      	b.n	8001eaa <HAL_UART_MspInit+0x1e>
 8001efa:	bf00      	nop
 8001efc:	40020000 	.word	0x40020000

08001f00 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001f00:	b500      	push	{lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);//阻塞方式打印,串口1
 8001f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	a901      	add	r1, sp, #4
 8001f0e:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <__io_putchar+0x1c>)
 8001f10:	f7ff fec9 	bl	8001ca6 <HAL_UART_Transmit>
  return ch;
}
 8001f14:	9801      	ldr	r0, [sp, #4]
 8001f16:	b003      	add	sp, #12
 8001f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f1c:	2000024c 	.word	0x2000024c

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f24:	f7ff ff8e 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	@ (8001f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f000 fec7 	bl	8002ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7fe ff59 	bl	8000e08 <main>
  bx  lr    
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f64:	080050ac 	.word	0x080050ac
  ldr r2, =_sbss
 8001f68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f6c:	200003e0 	.word	0x200003e0

08001f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC_IRQHandler>

08001f72 <__cvt>:
 8001f72:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f76:	ec57 6b10 	vmov	r6, r7, d0
 8001f7a:	2f00      	cmp	r7, #0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4619      	mov	r1, r3
 8001f80:	463b      	mov	r3, r7
 8001f82:	bfbb      	ittet	lt
 8001f84:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001f88:	461f      	movlt	r7, r3
 8001f8a:	2300      	movge	r3, #0
 8001f8c:	232d      	movlt	r3, #45	@ 0x2d
 8001f8e:	700b      	strb	r3, [r1, #0]
 8001f90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001f92:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001f96:	4691      	mov	r9, r2
 8001f98:	f023 0820 	bic.w	r8, r3, #32
 8001f9c:	bfbc      	itt	lt
 8001f9e:	4632      	movlt	r2, r6
 8001fa0:	4616      	movlt	r6, r2
 8001fa2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001fa6:	d005      	beq.n	8001fb4 <__cvt+0x42>
 8001fa8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001fac:	d100      	bne.n	8001fb0 <__cvt+0x3e>
 8001fae:	3401      	adds	r4, #1
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	e000      	b.n	8001fb6 <__cvt+0x44>
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	ab03      	add	r3, sp, #12
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	ab02      	add	r3, sp, #8
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	ec47 6b10 	vmov	d0, r6, r7
 8001fc2:	4653      	mov	r3, sl
 8001fc4:	4622      	mov	r2, r4
 8001fc6:	f000 ff3b 	bl	8002e40 <_dtoa_r>
 8001fca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001fce:	4605      	mov	r5, r0
 8001fd0:	d119      	bne.n	8002006 <__cvt+0x94>
 8001fd2:	f019 0f01 	tst.w	r9, #1
 8001fd6:	d00e      	beq.n	8001ff6 <__cvt+0x84>
 8001fd8:	eb00 0904 	add.w	r9, r0, r4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2300      	movs	r3, #0
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	4639      	mov	r1, r7
 8001fe4:	f7fe fd50 	bl	8000a88 <__aeabi_dcmpeq>
 8001fe8:	b108      	cbz	r0, 8001fee <__cvt+0x7c>
 8001fea:	f8cd 900c 	str.w	r9, [sp, #12]
 8001fee:	2230      	movs	r2, #48	@ 0x30
 8001ff0:	9b03      	ldr	r3, [sp, #12]
 8001ff2:	454b      	cmp	r3, r9
 8001ff4:	d31e      	bcc.n	8002034 <__cvt+0xc2>
 8001ff6:	9b03      	ldr	r3, [sp, #12]
 8001ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001ffa:	1b5b      	subs	r3, r3, r5
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	b004      	add	sp, #16
 8002002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002006:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800200a:	eb00 0904 	add.w	r9, r0, r4
 800200e:	d1e5      	bne.n	8001fdc <__cvt+0x6a>
 8002010:	7803      	ldrb	r3, [r0, #0]
 8002012:	2b30      	cmp	r3, #48	@ 0x30
 8002014:	d10a      	bne.n	800202c <__cvt+0xba>
 8002016:	2200      	movs	r2, #0
 8002018:	2300      	movs	r3, #0
 800201a:	4630      	mov	r0, r6
 800201c:	4639      	mov	r1, r7
 800201e:	f7fe fd33 	bl	8000a88 <__aeabi_dcmpeq>
 8002022:	b918      	cbnz	r0, 800202c <__cvt+0xba>
 8002024:	f1c4 0401 	rsb	r4, r4, #1
 8002028:	f8ca 4000 	str.w	r4, [sl]
 800202c:	f8da 3000 	ldr.w	r3, [sl]
 8002030:	4499      	add	r9, r3
 8002032:	e7d3      	b.n	8001fdc <__cvt+0x6a>
 8002034:	1c59      	adds	r1, r3, #1
 8002036:	9103      	str	r1, [sp, #12]
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e7d9      	b.n	8001ff0 <__cvt+0x7e>

0800203c <__exponent>:
 800203c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800203e:	2900      	cmp	r1, #0
 8002040:	bfba      	itte	lt
 8002042:	4249      	neglt	r1, r1
 8002044:	232d      	movlt	r3, #45	@ 0x2d
 8002046:	232b      	movge	r3, #43	@ 0x2b
 8002048:	2909      	cmp	r1, #9
 800204a:	7002      	strb	r2, [r0, #0]
 800204c:	7043      	strb	r3, [r0, #1]
 800204e:	dd29      	ble.n	80020a4 <__exponent+0x68>
 8002050:	f10d 0407 	add.w	r4, sp, #7
 8002054:	4625      	mov	r5, r4
 8002056:	270a      	movs	r7, #10
 8002058:	4622      	mov	r2, r4
 800205a:	fbb1 f6f7 	udiv	r6, r1, r7
 800205e:	fb07 1316 	mls	r3, r7, r6, r1
 8002062:	3330      	adds	r3, #48	@ 0x30
 8002064:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002068:	460b      	mov	r3, r1
 800206a:	2b63      	cmp	r3, #99	@ 0x63
 800206c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8002070:	4631      	mov	r1, r6
 8002072:	dcf1      	bgt.n	8002058 <__exponent+0x1c>
 8002074:	3130      	adds	r1, #48	@ 0x30
 8002076:	1e93      	subs	r3, r2, #2
 8002078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800207c:	1c41      	adds	r1, r0, #1
 800207e:	461c      	mov	r4, r3
 8002080:	42ab      	cmp	r3, r5
 8002082:	d30a      	bcc.n	800209a <__exponent+0x5e>
 8002084:	f10d 0309 	add.w	r3, sp, #9
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	42a5      	cmp	r5, r4
 800208c:	bf38      	it	cc
 800208e:	2300      	movcc	r3, #0
 8002090:	1c82      	adds	r2, r0, #2
 8002092:	4413      	add	r3, r2
 8002094:	1a18      	subs	r0, r3, r0
 8002096:	b003      	add	sp, #12
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800209e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80020a2:	e7ed      	b.n	8002080 <__exponent+0x44>
 80020a4:	2330      	movs	r3, #48	@ 0x30
 80020a6:	3130      	adds	r1, #48	@ 0x30
 80020a8:	7083      	strb	r3, [r0, #2]
 80020aa:	70c1      	strb	r1, [r0, #3]
 80020ac:	1d03      	adds	r3, r0, #4
 80020ae:	e7f1      	b.n	8002094 <__exponent+0x58>

080020b0 <_printf_float>:
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b4:	b08d      	sub	sp, #52	@ 0x34
 80020b6:	460c      	mov	r4, r1
 80020b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80020bc:	4616      	mov	r6, r2
 80020be:	461f      	mov	r7, r3
 80020c0:	4605      	mov	r5, r0
 80020c2:	f000 fdbd 	bl	8002c40 <_localeconv_r>
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	9306      	str	r3, [sp, #24]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f8b0 	bl	8000230 <strlen>
 80020d0:	2300      	movs	r3, #0
 80020d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80020d4:	f8d8 3000 	ldr.w	r3, [r8]
 80020d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80020dc:	f8d4 b000 	ldr.w	fp, [r4]
 80020e0:	9007      	str	r0, [sp, #28]
 80020e2:	3307      	adds	r3, #7
 80020e4:	f023 0307 	bic.w	r3, r3, #7
 80020e8:	ecb3 7b02 	vldmia	r3!, {d7}
 80020ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80020f0:	f8c8 3000 	str.w	r3, [r8]
 80020f4:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 80020f8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80020fc:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8002100:	4b9c      	ldr	r3, [pc, #624]	@ (8002374 <_printf_float+0x2c4>)
 8002102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002106:	4640      	mov	r0, r8
 8002108:	4649      	mov	r1, r9
 800210a:	f7fe fcef 	bl	8000aec <__aeabi_dcmpun>
 800210e:	bb70      	cbnz	r0, 800216e <_printf_float+0xbe>
 8002110:	4b98      	ldr	r3, [pc, #608]	@ (8002374 <_printf_float+0x2c4>)
 8002112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002116:	4640      	mov	r0, r8
 8002118:	4649      	mov	r1, r9
 800211a:	f7fe fcc9 	bl	8000ab0 <__aeabi_dcmple>
 800211e:	bb30      	cbnz	r0, 800216e <_printf_float+0xbe>
 8002120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002124:	2200      	movs	r2, #0
 8002126:	2300      	movs	r3, #0
 8002128:	f7fe fcb8 	bl	8000a9c <__aeabi_dcmplt>
 800212c:	b110      	cbz	r0, 8002134 <_printf_float+0x84>
 800212e:	232d      	movs	r3, #45	@ 0x2d
 8002130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002134:	4a90      	ldr	r2, [pc, #576]	@ (8002378 <_printf_float+0x2c8>)
 8002136:	4b91      	ldr	r3, [pc, #580]	@ (800237c <_printf_float+0x2cc>)
 8002138:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800213c:	bf8c      	ite	hi
 800213e:	4690      	movhi	r8, r2
 8002140:	4698      	movls	r8, r3
 8002142:	2303      	movs	r3, #3
 8002144:	6123      	str	r3, [r4, #16]
 8002146:	f02b 0304 	bic.w	r3, fp, #4
 800214a:	6023      	str	r3, [r4, #0]
 800214c:	f04f 0900 	mov.w	r9, #0
 8002150:	9700      	str	r7, [sp, #0]
 8002152:	4633      	mov	r3, r6
 8002154:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002156:	4621      	mov	r1, r4
 8002158:	4628      	mov	r0, r5
 800215a:	f000 f9d1 	bl	8002500 <_printf_common>
 800215e:	3001      	adds	r0, #1
 8002160:	f040 808c 	bne.w	800227c <_printf_float+0x1cc>
 8002164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002168:	b00d      	add	sp, #52	@ 0x34
 800216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800216e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fcb9 	bl	8000aec <__aeabi_dcmpun>
 800217a:	b140      	cbz	r0, 800218e <_printf_float+0xde>
 800217c:	9b05      	ldr	r3, [sp, #20]
 800217e:	4a80      	ldr	r2, [pc, #512]	@ (8002380 <_printf_float+0x2d0>)
 8002180:	2b00      	cmp	r3, #0
 8002182:	bfbc      	itt	lt
 8002184:	232d      	movlt	r3, #45	@ 0x2d
 8002186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800218a:	4b7e      	ldr	r3, [pc, #504]	@ (8002384 <_printf_float+0x2d4>)
 800218c:	e7d4      	b.n	8002138 <_printf_float+0x88>
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 8002196:	d13b      	bne.n	8002210 <_printf_float+0x160>
 8002198:	2306      	movs	r3, #6
 800219a:	6063      	str	r3, [r4, #4]
 800219c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80021a0:	2300      	movs	r3, #0
 80021a2:	6022      	str	r2, [r4, #0]
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80021a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80021ac:	ab09      	add	r3, sp, #36	@ 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	6861      	ldr	r1, [r4, #4]
 80021b2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80021b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7ff fed9 	bl	8001f72 <__cvt>
 80021c0:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80021c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80021c6:	4680      	mov	r8, r0
 80021c8:	d129      	bne.n	800221e <_printf_float+0x16e>
 80021ca:	1cc8      	adds	r0, r1, #3
 80021cc:	db02      	blt.n	80021d4 <_printf_float+0x124>
 80021ce:	6863      	ldr	r3, [r4, #4]
 80021d0:	428b      	cmp	r3, r1
 80021d2:	da41      	bge.n	8002258 <_printf_float+0x1a8>
 80021d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80021d8:	fa5f fa8a 	uxtb.w	sl, sl
 80021dc:	3901      	subs	r1, #1
 80021de:	4652      	mov	r2, sl
 80021e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80021e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80021e6:	f7ff ff29 	bl	800203c <__exponent>
 80021ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80021ec:	1813      	adds	r3, r2, r0
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	4681      	mov	r9, r0
 80021f2:	6123      	str	r3, [r4, #16]
 80021f4:	dc02      	bgt.n	80021fc <_printf_float+0x14c>
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	07d2      	lsls	r2, r2, #31
 80021fa:	d501      	bpl.n	8002200 <_printf_float+0x150>
 80021fc:	3301      	adds	r3, #1
 80021fe:	6123      	str	r3, [r4, #16]
 8002200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0a3      	beq.n	8002150 <_printf_float+0xa0>
 8002208:	232d      	movs	r3, #45	@ 0x2d
 800220a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800220e:	e79f      	b.n	8002150 <_printf_float+0xa0>
 8002210:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8002214:	d1c2      	bne.n	800219c <_printf_float+0xec>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1c0      	bne.n	800219c <_printf_float+0xec>
 800221a:	2301      	movs	r3, #1
 800221c:	e7bd      	b.n	800219a <_printf_float+0xea>
 800221e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002222:	d9db      	bls.n	80021dc <_printf_float+0x12c>
 8002224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002228:	d118      	bne.n	800225c <_printf_float+0x1ac>
 800222a:	2900      	cmp	r1, #0
 800222c:	6863      	ldr	r3, [r4, #4]
 800222e:	dd0b      	ble.n	8002248 <_printf_float+0x198>
 8002230:	6121      	str	r1, [r4, #16]
 8002232:	b913      	cbnz	r3, 800223a <_printf_float+0x18a>
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	07d0      	lsls	r0, r2, #31
 8002238:	d502      	bpl.n	8002240 <_printf_float+0x190>
 800223a:	3301      	adds	r3, #1
 800223c:	440b      	add	r3, r1
 800223e:	6123      	str	r3, [r4, #16]
 8002240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002242:	f04f 0900 	mov.w	r9, #0
 8002246:	e7db      	b.n	8002200 <_printf_float+0x150>
 8002248:	b913      	cbnz	r3, 8002250 <_printf_float+0x1a0>
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	07d2      	lsls	r2, r2, #31
 800224e:	d501      	bpl.n	8002254 <_printf_float+0x1a4>
 8002250:	3302      	adds	r3, #2
 8002252:	e7f4      	b.n	800223e <_printf_float+0x18e>
 8002254:	2301      	movs	r3, #1
 8002256:	e7f2      	b.n	800223e <_printf_float+0x18e>
 8002258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800225c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800225e:	428b      	cmp	r3, r1
 8002260:	dc05      	bgt.n	800226e <_printf_float+0x1be>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	6121      	str	r1, [r4, #16]
 8002266:	07d8      	lsls	r0, r3, #31
 8002268:	d5ea      	bpl.n	8002240 <_printf_float+0x190>
 800226a:	1c4b      	adds	r3, r1, #1
 800226c:	e7e7      	b.n	800223e <_printf_float+0x18e>
 800226e:	2900      	cmp	r1, #0
 8002270:	bfd4      	ite	le
 8002272:	f1c1 0202 	rsble	r2, r1, #2
 8002276:	2201      	movgt	r2, #1
 8002278:	4413      	add	r3, r2
 800227a:	e7e0      	b.n	800223e <_printf_float+0x18e>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	055a      	lsls	r2, r3, #21
 8002280:	d407      	bmi.n	8002292 <_printf_float+0x1e2>
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	4642      	mov	r2, r8
 8002286:	4631      	mov	r1, r6
 8002288:	4628      	mov	r0, r5
 800228a:	47b8      	blx	r7
 800228c:	3001      	adds	r0, #1
 800228e:	d12b      	bne.n	80022e8 <_printf_float+0x238>
 8002290:	e768      	b.n	8002164 <_printf_float+0xb4>
 8002292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002296:	f240 80dd 	bls.w	8002454 <_printf_float+0x3a4>
 800229a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800229e:	2200      	movs	r2, #0
 80022a0:	2300      	movs	r3, #0
 80022a2:	f7fe fbf1 	bl	8000a88 <__aeabi_dcmpeq>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d033      	beq.n	8002312 <_printf_float+0x262>
 80022aa:	4a37      	ldr	r2, [pc, #220]	@ (8002388 <_printf_float+0x2d8>)
 80022ac:	2301      	movs	r3, #1
 80022ae:	4631      	mov	r1, r6
 80022b0:	4628      	mov	r0, r5
 80022b2:	47b8      	blx	r7
 80022b4:	3001      	adds	r0, #1
 80022b6:	f43f af55 	beq.w	8002164 <_printf_float+0xb4>
 80022ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80022be:	4543      	cmp	r3, r8
 80022c0:	db02      	blt.n	80022c8 <_printf_float+0x218>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	07d8      	lsls	r0, r3, #31
 80022c6:	d50f      	bpl.n	80022e8 <_printf_float+0x238>
 80022c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80022cc:	4631      	mov	r1, r6
 80022ce:	4628      	mov	r0, r5
 80022d0:	47b8      	blx	r7
 80022d2:	3001      	adds	r0, #1
 80022d4:	f43f af46 	beq.w	8002164 <_printf_float+0xb4>
 80022d8:	f04f 0900 	mov.w	r9, #0
 80022dc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80022e0:	f104 0a1a 	add.w	sl, r4, #26
 80022e4:	45c8      	cmp	r8, r9
 80022e6:	dc09      	bgt.n	80022fc <_printf_float+0x24c>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	079b      	lsls	r3, r3, #30
 80022ec:	f100 8103 	bmi.w	80024f6 <_printf_float+0x446>
 80022f0:	68e0      	ldr	r0, [r4, #12]
 80022f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80022f4:	4298      	cmp	r0, r3
 80022f6:	bfb8      	it	lt
 80022f8:	4618      	movlt	r0, r3
 80022fa:	e735      	b.n	8002168 <_printf_float+0xb8>
 80022fc:	2301      	movs	r3, #1
 80022fe:	4652      	mov	r2, sl
 8002300:	4631      	mov	r1, r6
 8002302:	4628      	mov	r0, r5
 8002304:	47b8      	blx	r7
 8002306:	3001      	adds	r0, #1
 8002308:	f43f af2c 	beq.w	8002164 <_printf_float+0xb4>
 800230c:	f109 0901 	add.w	r9, r9, #1
 8002310:	e7e8      	b.n	80022e4 <_printf_float+0x234>
 8002312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	dc39      	bgt.n	800238c <_printf_float+0x2dc>
 8002318:	4a1b      	ldr	r2, [pc, #108]	@ (8002388 <_printf_float+0x2d8>)
 800231a:	2301      	movs	r3, #1
 800231c:	4631      	mov	r1, r6
 800231e:	4628      	mov	r0, r5
 8002320:	47b8      	blx	r7
 8002322:	3001      	adds	r0, #1
 8002324:	f43f af1e 	beq.w	8002164 <_printf_float+0xb4>
 8002328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800232c:	ea59 0303 	orrs.w	r3, r9, r3
 8002330:	d102      	bne.n	8002338 <_printf_float+0x288>
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	07d9      	lsls	r1, r3, #31
 8002336:	d5d7      	bpl.n	80022e8 <_printf_float+0x238>
 8002338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800233c:	4631      	mov	r1, r6
 800233e:	4628      	mov	r0, r5
 8002340:	47b8      	blx	r7
 8002342:	3001      	adds	r0, #1
 8002344:	f43f af0e 	beq.w	8002164 <_printf_float+0xb4>
 8002348:	f04f 0a00 	mov.w	sl, #0
 800234c:	f104 0b1a 	add.w	fp, r4, #26
 8002350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002352:	425b      	negs	r3, r3
 8002354:	4553      	cmp	r3, sl
 8002356:	dc01      	bgt.n	800235c <_printf_float+0x2ac>
 8002358:	464b      	mov	r3, r9
 800235a:	e793      	b.n	8002284 <_printf_float+0x1d4>
 800235c:	2301      	movs	r3, #1
 800235e:	465a      	mov	r2, fp
 8002360:	4631      	mov	r1, r6
 8002362:	4628      	mov	r0, r5
 8002364:	47b8      	blx	r7
 8002366:	3001      	adds	r0, #1
 8002368:	f43f aefc 	beq.w	8002164 <_printf_float+0xb4>
 800236c:	f10a 0a01 	add.w	sl, sl, #1
 8002370:	e7ee      	b.n	8002350 <_printf_float+0x2a0>
 8002372:	bf00      	nop
 8002374:	7fefffff 	.word	0x7fefffff
 8002378:	08004cd8 	.word	0x08004cd8
 800237c:	08004cd4 	.word	0x08004cd4
 8002380:	08004ce0 	.word	0x08004ce0
 8002384:	08004cdc 	.word	0x08004cdc
 8002388:	08004ce4 	.word	0x08004ce4
 800238c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800238e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002392:	4553      	cmp	r3, sl
 8002394:	bfa8      	it	ge
 8002396:	4653      	movge	r3, sl
 8002398:	2b00      	cmp	r3, #0
 800239a:	4699      	mov	r9, r3
 800239c:	dc36      	bgt.n	800240c <_printf_float+0x35c>
 800239e:	f04f 0b00 	mov.w	fp, #0
 80023a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023a6:	f104 021a 	add.w	r2, r4, #26
 80023aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80023ac:	9304      	str	r3, [sp, #16]
 80023ae:	eba3 0309 	sub.w	r3, r3, r9
 80023b2:	455b      	cmp	r3, fp
 80023b4:	dc31      	bgt.n	800241a <_printf_float+0x36a>
 80023b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023b8:	459a      	cmp	sl, r3
 80023ba:	dc3a      	bgt.n	8002432 <_printf_float+0x382>
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	07da      	lsls	r2, r3, #31
 80023c0:	d437      	bmi.n	8002432 <_printf_float+0x382>
 80023c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023c4:	ebaa 0903 	sub.w	r9, sl, r3
 80023c8:	9b04      	ldr	r3, [sp, #16]
 80023ca:	ebaa 0303 	sub.w	r3, sl, r3
 80023ce:	4599      	cmp	r9, r3
 80023d0:	bfa8      	it	ge
 80023d2:	4699      	movge	r9, r3
 80023d4:	f1b9 0f00 	cmp.w	r9, #0
 80023d8:	dc33      	bgt.n	8002442 <_printf_float+0x392>
 80023da:	f04f 0800 	mov.w	r8, #0
 80023de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023e2:	f104 0b1a 	add.w	fp, r4, #26
 80023e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023e8:	ebaa 0303 	sub.w	r3, sl, r3
 80023ec:	eba3 0309 	sub.w	r3, r3, r9
 80023f0:	4543      	cmp	r3, r8
 80023f2:	f77f af79 	ble.w	80022e8 <_printf_float+0x238>
 80023f6:	2301      	movs	r3, #1
 80023f8:	465a      	mov	r2, fp
 80023fa:	4631      	mov	r1, r6
 80023fc:	4628      	mov	r0, r5
 80023fe:	47b8      	blx	r7
 8002400:	3001      	adds	r0, #1
 8002402:	f43f aeaf 	beq.w	8002164 <_printf_float+0xb4>
 8002406:	f108 0801 	add.w	r8, r8, #1
 800240a:	e7ec      	b.n	80023e6 <_printf_float+0x336>
 800240c:	4642      	mov	r2, r8
 800240e:	4631      	mov	r1, r6
 8002410:	4628      	mov	r0, r5
 8002412:	47b8      	blx	r7
 8002414:	3001      	adds	r0, #1
 8002416:	d1c2      	bne.n	800239e <_printf_float+0x2ee>
 8002418:	e6a4      	b.n	8002164 <_printf_float+0xb4>
 800241a:	2301      	movs	r3, #1
 800241c:	4631      	mov	r1, r6
 800241e:	4628      	mov	r0, r5
 8002420:	9204      	str	r2, [sp, #16]
 8002422:	47b8      	blx	r7
 8002424:	3001      	adds	r0, #1
 8002426:	f43f ae9d 	beq.w	8002164 <_printf_float+0xb4>
 800242a:	9a04      	ldr	r2, [sp, #16]
 800242c:	f10b 0b01 	add.w	fp, fp, #1
 8002430:	e7bb      	b.n	80023aa <_printf_float+0x2fa>
 8002432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002436:	4631      	mov	r1, r6
 8002438:	4628      	mov	r0, r5
 800243a:	47b8      	blx	r7
 800243c:	3001      	adds	r0, #1
 800243e:	d1c0      	bne.n	80023c2 <_printf_float+0x312>
 8002440:	e690      	b.n	8002164 <_printf_float+0xb4>
 8002442:	9a04      	ldr	r2, [sp, #16]
 8002444:	464b      	mov	r3, r9
 8002446:	4442      	add	r2, r8
 8002448:	4631      	mov	r1, r6
 800244a:	4628      	mov	r0, r5
 800244c:	47b8      	blx	r7
 800244e:	3001      	adds	r0, #1
 8002450:	d1c3      	bne.n	80023da <_printf_float+0x32a>
 8002452:	e687      	b.n	8002164 <_printf_float+0xb4>
 8002454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002458:	f1ba 0f01 	cmp.w	sl, #1
 800245c:	dc01      	bgt.n	8002462 <_printf_float+0x3b2>
 800245e:	07db      	lsls	r3, r3, #31
 8002460:	d536      	bpl.n	80024d0 <_printf_float+0x420>
 8002462:	2301      	movs	r3, #1
 8002464:	4642      	mov	r2, r8
 8002466:	4631      	mov	r1, r6
 8002468:	4628      	mov	r0, r5
 800246a:	47b8      	blx	r7
 800246c:	3001      	adds	r0, #1
 800246e:	f43f ae79 	beq.w	8002164 <_printf_float+0xb4>
 8002472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002476:	4631      	mov	r1, r6
 8002478:	4628      	mov	r0, r5
 800247a:	47b8      	blx	r7
 800247c:	3001      	adds	r0, #1
 800247e:	f43f ae71 	beq.w	8002164 <_printf_float+0xb4>
 8002482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002486:	2200      	movs	r2, #0
 8002488:	2300      	movs	r3, #0
 800248a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800248e:	f7fe fafb 	bl	8000a88 <__aeabi_dcmpeq>
 8002492:	b9c0      	cbnz	r0, 80024c6 <_printf_float+0x416>
 8002494:	4653      	mov	r3, sl
 8002496:	f108 0201 	add.w	r2, r8, #1
 800249a:	4631      	mov	r1, r6
 800249c:	4628      	mov	r0, r5
 800249e:	47b8      	blx	r7
 80024a0:	3001      	adds	r0, #1
 80024a2:	d10c      	bne.n	80024be <_printf_float+0x40e>
 80024a4:	e65e      	b.n	8002164 <_printf_float+0xb4>
 80024a6:	2301      	movs	r3, #1
 80024a8:	465a      	mov	r2, fp
 80024aa:	4631      	mov	r1, r6
 80024ac:	4628      	mov	r0, r5
 80024ae:	47b8      	blx	r7
 80024b0:	3001      	adds	r0, #1
 80024b2:	f43f ae57 	beq.w	8002164 <_printf_float+0xb4>
 80024b6:	f108 0801 	add.w	r8, r8, #1
 80024ba:	45d0      	cmp	r8, sl
 80024bc:	dbf3      	blt.n	80024a6 <_printf_float+0x3f6>
 80024be:	464b      	mov	r3, r9
 80024c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80024c4:	e6df      	b.n	8002286 <_printf_float+0x1d6>
 80024c6:	f04f 0800 	mov.w	r8, #0
 80024ca:	f104 0b1a 	add.w	fp, r4, #26
 80024ce:	e7f4      	b.n	80024ba <_printf_float+0x40a>
 80024d0:	2301      	movs	r3, #1
 80024d2:	4642      	mov	r2, r8
 80024d4:	e7e1      	b.n	800249a <_printf_float+0x3ea>
 80024d6:	2301      	movs	r3, #1
 80024d8:	464a      	mov	r2, r9
 80024da:	4631      	mov	r1, r6
 80024dc:	4628      	mov	r0, r5
 80024de:	47b8      	blx	r7
 80024e0:	3001      	adds	r0, #1
 80024e2:	f43f ae3f 	beq.w	8002164 <_printf_float+0xb4>
 80024e6:	f108 0801 	add.w	r8, r8, #1
 80024ea:	68e3      	ldr	r3, [r4, #12]
 80024ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80024ee:	1a5b      	subs	r3, r3, r1
 80024f0:	4543      	cmp	r3, r8
 80024f2:	dcf0      	bgt.n	80024d6 <_printf_float+0x426>
 80024f4:	e6fc      	b.n	80022f0 <_printf_float+0x240>
 80024f6:	f04f 0800 	mov.w	r8, #0
 80024fa:	f104 0919 	add.w	r9, r4, #25
 80024fe:	e7f4      	b.n	80024ea <_printf_float+0x43a>

08002500 <_printf_common>:
 8002500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002504:	4616      	mov	r6, r2
 8002506:	4698      	mov	r8, r3
 8002508:	688a      	ldr	r2, [r1, #8]
 800250a:	690b      	ldr	r3, [r1, #16]
 800250c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002510:	4293      	cmp	r3, r2
 8002512:	bfb8      	it	lt
 8002514:	4613      	movlt	r3, r2
 8002516:	6033      	str	r3, [r6, #0]
 8002518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800251c:	4607      	mov	r7, r0
 800251e:	460c      	mov	r4, r1
 8002520:	b10a      	cbz	r2, 8002526 <_printf_common+0x26>
 8002522:	3301      	adds	r3, #1
 8002524:	6033      	str	r3, [r6, #0]
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	0699      	lsls	r1, r3, #26
 800252a:	bf42      	ittt	mi
 800252c:	6833      	ldrmi	r3, [r6, #0]
 800252e:	3302      	addmi	r3, #2
 8002530:	6033      	strmi	r3, [r6, #0]
 8002532:	6825      	ldr	r5, [r4, #0]
 8002534:	f015 0506 	ands.w	r5, r5, #6
 8002538:	d106      	bne.n	8002548 <_printf_common+0x48>
 800253a:	f104 0a19 	add.w	sl, r4, #25
 800253e:	68e3      	ldr	r3, [r4, #12]
 8002540:	6832      	ldr	r2, [r6, #0]
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	42ab      	cmp	r3, r5
 8002546:	dc26      	bgt.n	8002596 <_printf_common+0x96>
 8002548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	3b00      	subs	r3, #0
 8002550:	bf18      	it	ne
 8002552:	2301      	movne	r3, #1
 8002554:	0692      	lsls	r2, r2, #26
 8002556:	d42b      	bmi.n	80025b0 <_printf_common+0xb0>
 8002558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800255c:	4641      	mov	r1, r8
 800255e:	4638      	mov	r0, r7
 8002560:	47c8      	blx	r9
 8002562:	3001      	adds	r0, #1
 8002564:	d01e      	beq.n	80025a4 <_printf_common+0xa4>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	6922      	ldr	r2, [r4, #16]
 800256a:	f003 0306 	and.w	r3, r3, #6
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf02      	ittt	eq
 8002572:	68e5      	ldreq	r5, [r4, #12]
 8002574:	6833      	ldreq	r3, [r6, #0]
 8002576:	1aed      	subeq	r5, r5, r3
 8002578:	68a3      	ldr	r3, [r4, #8]
 800257a:	bf0c      	ite	eq
 800257c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002580:	2500      	movne	r5, #0
 8002582:	4293      	cmp	r3, r2
 8002584:	bfc4      	itt	gt
 8002586:	1a9b      	subgt	r3, r3, r2
 8002588:	18ed      	addgt	r5, r5, r3
 800258a:	2600      	movs	r6, #0
 800258c:	341a      	adds	r4, #26
 800258e:	42b5      	cmp	r5, r6
 8002590:	d11a      	bne.n	80025c8 <_printf_common+0xc8>
 8002592:	2000      	movs	r0, #0
 8002594:	e008      	b.n	80025a8 <_printf_common+0xa8>
 8002596:	2301      	movs	r3, #1
 8002598:	4652      	mov	r2, sl
 800259a:	4641      	mov	r1, r8
 800259c:	4638      	mov	r0, r7
 800259e:	47c8      	blx	r9
 80025a0:	3001      	adds	r0, #1
 80025a2:	d103      	bne.n	80025ac <_printf_common+0xac>
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ac:	3501      	adds	r5, #1
 80025ae:	e7c6      	b.n	800253e <_printf_common+0x3e>
 80025b0:	18e1      	adds	r1, r4, r3
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	2030      	movs	r0, #48	@ 0x30
 80025b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80025ba:	4422      	add	r2, r4
 80025bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80025c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80025c4:	3302      	adds	r3, #2
 80025c6:	e7c7      	b.n	8002558 <_printf_common+0x58>
 80025c8:	2301      	movs	r3, #1
 80025ca:	4622      	mov	r2, r4
 80025cc:	4641      	mov	r1, r8
 80025ce:	4638      	mov	r0, r7
 80025d0:	47c8      	blx	r9
 80025d2:	3001      	adds	r0, #1
 80025d4:	d0e6      	beq.n	80025a4 <_printf_common+0xa4>
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7d9      	b.n	800258e <_printf_common+0x8e>
	...

080025dc <_printf_i>:
 80025dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025e0:	7e0f      	ldrb	r7, [r1, #24]
 80025e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80025e4:	2f78      	cmp	r7, #120	@ 0x78
 80025e6:	4691      	mov	r9, r2
 80025e8:	4680      	mov	r8, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	469a      	mov	sl, r3
 80025ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80025f2:	d807      	bhi.n	8002604 <_printf_i+0x28>
 80025f4:	2f62      	cmp	r7, #98	@ 0x62
 80025f6:	d80a      	bhi.n	800260e <_printf_i+0x32>
 80025f8:	2f00      	cmp	r7, #0
 80025fa:	f000 80d2 	beq.w	80027a2 <_printf_i+0x1c6>
 80025fe:	2f58      	cmp	r7, #88	@ 0x58
 8002600:	f000 80b7 	beq.w	8002772 <_printf_i+0x196>
 8002604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800260c:	e03a      	b.n	8002684 <_printf_i+0xa8>
 800260e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002612:	2b15      	cmp	r3, #21
 8002614:	d8f6      	bhi.n	8002604 <_printf_i+0x28>
 8002616:	a101      	add	r1, pc, #4	@ (adr r1, 800261c <_printf_i+0x40>)
 8002618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800261c:	08002675 	.word	0x08002675
 8002620:	08002689 	.word	0x08002689
 8002624:	08002605 	.word	0x08002605
 8002628:	08002605 	.word	0x08002605
 800262c:	08002605 	.word	0x08002605
 8002630:	08002605 	.word	0x08002605
 8002634:	08002689 	.word	0x08002689
 8002638:	08002605 	.word	0x08002605
 800263c:	08002605 	.word	0x08002605
 8002640:	08002605 	.word	0x08002605
 8002644:	08002605 	.word	0x08002605
 8002648:	08002789 	.word	0x08002789
 800264c:	080026b3 	.word	0x080026b3
 8002650:	0800273f 	.word	0x0800273f
 8002654:	08002605 	.word	0x08002605
 8002658:	08002605 	.word	0x08002605
 800265c:	080027ab 	.word	0x080027ab
 8002660:	08002605 	.word	0x08002605
 8002664:	080026b3 	.word	0x080026b3
 8002668:	08002605 	.word	0x08002605
 800266c:	08002605 	.word	0x08002605
 8002670:	08002747 	.word	0x08002747
 8002674:	6833      	ldr	r3, [r6, #0]
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6032      	str	r2, [r6, #0]
 800267c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002684:	2301      	movs	r3, #1
 8002686:	e09d      	b.n	80027c4 <_printf_i+0x1e8>
 8002688:	6833      	ldr	r3, [r6, #0]
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	1d19      	adds	r1, r3, #4
 800268e:	6031      	str	r1, [r6, #0]
 8002690:	0606      	lsls	r6, r0, #24
 8002692:	d501      	bpl.n	8002698 <_printf_i+0xbc>
 8002694:	681d      	ldr	r5, [r3, #0]
 8002696:	e003      	b.n	80026a0 <_printf_i+0xc4>
 8002698:	0645      	lsls	r5, r0, #25
 800269a:	d5fb      	bpl.n	8002694 <_printf_i+0xb8>
 800269c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026a0:	2d00      	cmp	r5, #0
 80026a2:	da03      	bge.n	80026ac <_printf_i+0xd0>
 80026a4:	232d      	movs	r3, #45	@ 0x2d
 80026a6:	426d      	negs	r5, r5
 80026a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026ac:	4859      	ldr	r0, [pc, #356]	@ (8002814 <_printf_i+0x238>)
 80026ae:	230a      	movs	r3, #10
 80026b0:	e010      	b.n	80026d4 <_printf_i+0xf8>
 80026b2:	6821      	ldr	r1, [r4, #0]
 80026b4:	6833      	ldr	r3, [r6, #0]
 80026b6:	0608      	lsls	r0, r1, #24
 80026b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80026bc:	d402      	bmi.n	80026c4 <_printf_i+0xe8>
 80026be:	0649      	lsls	r1, r1, #25
 80026c0:	bf48      	it	mi
 80026c2:	b2ad      	uxthmi	r5, r5
 80026c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80026c6:	4853      	ldr	r0, [pc, #332]	@ (8002814 <_printf_i+0x238>)
 80026c8:	6033      	str	r3, [r6, #0]
 80026ca:	d159      	bne.n	8002780 <_printf_i+0x1a4>
 80026cc:	2308      	movs	r3, #8
 80026ce:	2100      	movs	r1, #0
 80026d0:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80026d4:	6866      	ldr	r6, [r4, #4]
 80026d6:	60a6      	str	r6, [r4, #8]
 80026d8:	2e00      	cmp	r6, #0
 80026da:	db05      	blt.n	80026e8 <_printf_i+0x10c>
 80026dc:	6821      	ldr	r1, [r4, #0]
 80026de:	432e      	orrs	r6, r5
 80026e0:	f021 0104 	bic.w	r1, r1, #4
 80026e4:	6021      	str	r1, [r4, #0]
 80026e6:	d04d      	beq.n	8002784 <_printf_i+0x1a8>
 80026e8:	4616      	mov	r6, r2
 80026ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80026ee:	fb03 5711 	mls	r7, r3, r1, r5
 80026f2:	5dc7      	ldrb	r7, [r0, r7]
 80026f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026f8:	462f      	mov	r7, r5
 80026fa:	42bb      	cmp	r3, r7
 80026fc:	460d      	mov	r5, r1
 80026fe:	d9f4      	bls.n	80026ea <_printf_i+0x10e>
 8002700:	2b08      	cmp	r3, #8
 8002702:	d10b      	bne.n	800271c <_printf_i+0x140>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	07df      	lsls	r7, r3, #31
 8002708:	d508      	bpl.n	800271c <_printf_i+0x140>
 800270a:	6923      	ldr	r3, [r4, #16]
 800270c:	6861      	ldr	r1, [r4, #4]
 800270e:	4299      	cmp	r1, r3
 8002710:	bfde      	ittt	le
 8002712:	2330      	movle	r3, #48	@ 0x30
 8002714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002718:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800271c:	1b92      	subs	r2, r2, r6
 800271e:	6122      	str	r2, [r4, #16]
 8002720:	f8cd a000 	str.w	sl, [sp]
 8002724:	464b      	mov	r3, r9
 8002726:	aa03      	add	r2, sp, #12
 8002728:	4621      	mov	r1, r4
 800272a:	4640      	mov	r0, r8
 800272c:	f7ff fee8 	bl	8002500 <_printf_common>
 8002730:	3001      	adds	r0, #1
 8002732:	d14c      	bne.n	80027ce <_printf_i+0x1f2>
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002738:	b004      	add	sp, #16
 800273a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	6023      	str	r3, [r4, #0]
 8002746:	4834      	ldr	r0, [pc, #208]	@ (8002818 <_printf_i+0x23c>)
 8002748:	2778      	movs	r7, #120	@ 0x78
 800274a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	6831      	ldr	r1, [r6, #0]
 8002752:	061f      	lsls	r7, r3, #24
 8002754:	f851 5b04 	ldr.w	r5, [r1], #4
 8002758:	d402      	bmi.n	8002760 <_printf_i+0x184>
 800275a:	065f      	lsls	r7, r3, #25
 800275c:	bf48      	it	mi
 800275e:	b2ad      	uxthmi	r5, r5
 8002760:	6031      	str	r1, [r6, #0]
 8002762:	07d9      	lsls	r1, r3, #31
 8002764:	bf44      	itt	mi
 8002766:	f043 0320 	orrmi.w	r3, r3, #32
 800276a:	6023      	strmi	r3, [r4, #0]
 800276c:	b11d      	cbz	r5, 8002776 <_printf_i+0x19a>
 800276e:	2310      	movs	r3, #16
 8002770:	e7ad      	b.n	80026ce <_printf_i+0xf2>
 8002772:	4828      	ldr	r0, [pc, #160]	@ (8002814 <_printf_i+0x238>)
 8002774:	e7e9      	b.n	800274a <_printf_i+0x16e>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	f023 0320 	bic.w	r3, r3, #32
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	e7f6      	b.n	800276e <_printf_i+0x192>
 8002780:	230a      	movs	r3, #10
 8002782:	e7a4      	b.n	80026ce <_printf_i+0xf2>
 8002784:	4616      	mov	r6, r2
 8002786:	e7bb      	b.n	8002700 <_printf_i+0x124>
 8002788:	6833      	ldr	r3, [r6, #0]
 800278a:	6825      	ldr	r5, [r4, #0]
 800278c:	6961      	ldr	r1, [r4, #20]
 800278e:	1d18      	adds	r0, r3, #4
 8002790:	6030      	str	r0, [r6, #0]
 8002792:	062e      	lsls	r6, r5, #24
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	d501      	bpl.n	800279c <_printf_i+0x1c0>
 8002798:	6019      	str	r1, [r3, #0]
 800279a:	e002      	b.n	80027a2 <_printf_i+0x1c6>
 800279c:	0668      	lsls	r0, r5, #25
 800279e:	d5fb      	bpl.n	8002798 <_printf_i+0x1bc>
 80027a0:	8019      	strh	r1, [r3, #0]
 80027a2:	2300      	movs	r3, #0
 80027a4:	6123      	str	r3, [r4, #16]
 80027a6:	4616      	mov	r6, r2
 80027a8:	e7ba      	b.n	8002720 <_printf_i+0x144>
 80027aa:	6833      	ldr	r3, [r6, #0]
 80027ac:	1d1a      	adds	r2, r3, #4
 80027ae:	6032      	str	r2, [r6, #0]
 80027b0:	681e      	ldr	r6, [r3, #0]
 80027b2:	6862      	ldr	r2, [r4, #4]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4630      	mov	r0, r6
 80027b8:	f7fd fcea 	bl	8000190 <memchr>
 80027bc:	b108      	cbz	r0, 80027c2 <_printf_i+0x1e6>
 80027be:	1b80      	subs	r0, r0, r6
 80027c0:	6060      	str	r0, [r4, #4]
 80027c2:	6863      	ldr	r3, [r4, #4]
 80027c4:	6123      	str	r3, [r4, #16]
 80027c6:	2300      	movs	r3, #0
 80027c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027cc:	e7a8      	b.n	8002720 <_printf_i+0x144>
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	4632      	mov	r2, r6
 80027d2:	4649      	mov	r1, r9
 80027d4:	4640      	mov	r0, r8
 80027d6:	47d0      	blx	sl
 80027d8:	3001      	adds	r0, #1
 80027da:	d0ab      	beq.n	8002734 <_printf_i+0x158>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	079b      	lsls	r3, r3, #30
 80027e0:	d413      	bmi.n	800280a <_printf_i+0x22e>
 80027e2:	68e0      	ldr	r0, [r4, #12]
 80027e4:	9b03      	ldr	r3, [sp, #12]
 80027e6:	4298      	cmp	r0, r3
 80027e8:	bfb8      	it	lt
 80027ea:	4618      	movlt	r0, r3
 80027ec:	e7a4      	b.n	8002738 <_printf_i+0x15c>
 80027ee:	2301      	movs	r3, #1
 80027f0:	4632      	mov	r2, r6
 80027f2:	4649      	mov	r1, r9
 80027f4:	4640      	mov	r0, r8
 80027f6:	47d0      	blx	sl
 80027f8:	3001      	adds	r0, #1
 80027fa:	d09b      	beq.n	8002734 <_printf_i+0x158>
 80027fc:	3501      	adds	r5, #1
 80027fe:	68e3      	ldr	r3, [r4, #12]
 8002800:	9903      	ldr	r1, [sp, #12]
 8002802:	1a5b      	subs	r3, r3, r1
 8002804:	42ab      	cmp	r3, r5
 8002806:	dcf2      	bgt.n	80027ee <_printf_i+0x212>
 8002808:	e7eb      	b.n	80027e2 <_printf_i+0x206>
 800280a:	2500      	movs	r5, #0
 800280c:	f104 0619 	add.w	r6, r4, #25
 8002810:	e7f5      	b.n	80027fe <_printf_i+0x222>
 8002812:	bf00      	nop
 8002814:	08004ce6 	.word	0x08004ce6
 8002818:	08004cf7 	.word	0x08004cf7

0800281c <std>:
 800281c:	2300      	movs	r3, #0
 800281e:	b510      	push	{r4, lr}
 8002820:	4604      	mov	r4, r0
 8002822:	e9c0 3300 	strd	r3, r3, [r0]
 8002826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800282a:	6083      	str	r3, [r0, #8]
 800282c:	8181      	strh	r1, [r0, #12]
 800282e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002830:	81c2      	strh	r2, [r0, #14]
 8002832:	6183      	str	r3, [r0, #24]
 8002834:	4619      	mov	r1, r3
 8002836:	2208      	movs	r2, #8
 8002838:	305c      	adds	r0, #92	@ 0x5c
 800283a:	f000 f9f9 	bl	8002c30 <memset>
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <std+0x58>)
 8002840:	6263      	str	r3, [r4, #36]	@ 0x24
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <std+0x5c>)
 8002844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <std+0x60>)
 8002848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <std+0x64>)
 800284c:	6323      	str	r3, [r4, #48]	@ 0x30
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <std+0x68>)
 8002850:	6224      	str	r4, [r4, #32]
 8002852:	429c      	cmp	r4, r3
 8002854:	d006      	beq.n	8002864 <std+0x48>
 8002856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800285a:	4294      	cmp	r4, r2
 800285c:	d002      	beq.n	8002864 <std+0x48>
 800285e:	33d0      	adds	r3, #208	@ 0xd0
 8002860:	429c      	cmp	r4, r3
 8002862:	d105      	bne.n	8002870 <std+0x54>
 8002864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800286c:	f000 ba5c 	b.w	8002d28 <__retarget_lock_init_recursive>
 8002870:	bd10      	pop	{r4, pc}
 8002872:	bf00      	nop
 8002874:	08002a85 	.word	0x08002a85
 8002878:	08002aa7 	.word	0x08002aa7
 800287c:	08002adf 	.word	0x08002adf
 8002880:	08002b05 	.word	0x08002b05
 8002884:	20000294 	.word	0x20000294

08002888 <stdio_exit_handler>:
 8002888:	4a02      	ldr	r2, [pc, #8]	@ (8002894 <stdio_exit_handler+0xc>)
 800288a:	4903      	ldr	r1, [pc, #12]	@ (8002898 <stdio_exit_handler+0x10>)
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <stdio_exit_handler+0x14>)
 800288e:	f000 b86b 	b.w	8002968 <_fwalk_sglue>
 8002892:	bf00      	nop
 8002894:	2000000c 	.word	0x2000000c
 8002898:	08004699 	.word	0x08004699
 800289c:	2000001c 	.word	0x2000001c

080028a0 <cleanup_stdio>:
 80028a0:	6841      	ldr	r1, [r0, #4]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <cleanup_stdio+0x34>)
 80028a4:	4299      	cmp	r1, r3
 80028a6:	b510      	push	{r4, lr}
 80028a8:	4604      	mov	r4, r0
 80028aa:	d001      	beq.n	80028b0 <cleanup_stdio+0x10>
 80028ac:	f001 fef4 	bl	8004698 <_fflush_r>
 80028b0:	68a1      	ldr	r1, [r4, #8]
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <cleanup_stdio+0x38>)
 80028b4:	4299      	cmp	r1, r3
 80028b6:	d002      	beq.n	80028be <cleanup_stdio+0x1e>
 80028b8:	4620      	mov	r0, r4
 80028ba:	f001 feed 	bl	8004698 <_fflush_r>
 80028be:	68e1      	ldr	r1, [r4, #12]
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <cleanup_stdio+0x3c>)
 80028c2:	4299      	cmp	r1, r3
 80028c4:	d004      	beq.n	80028d0 <cleanup_stdio+0x30>
 80028c6:	4620      	mov	r0, r4
 80028c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028cc:	f001 bee4 	b.w	8004698 <_fflush_r>
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	bf00      	nop
 80028d4:	20000294 	.word	0x20000294
 80028d8:	200002fc 	.word	0x200002fc
 80028dc:	20000364 	.word	0x20000364

080028e0 <global_stdio_init.part.0>:
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <global_stdio_init.part.0+0x34>)
 80028e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <global_stdio_init.part.0+0x38>)
 80028e4:	480d      	ldr	r0, [pc, #52]	@ (800291c <global_stdio_init.part.0+0x3c>)
 80028e6:	b510      	push	{r4, lr}
 80028e8:	2104      	movs	r1, #4
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f7ff ff95 	bl	800281c <std>
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <global_stdio_init.part.0+0x3c>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	461c      	mov	r4, r3
 80028f8:	2109      	movs	r1, #9
 80028fa:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80028fe:	f7ff ff8d 	bl	800281c <std>
 8002902:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002906:	2202      	movs	r2, #2
 8002908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800290c:	2112      	movs	r1, #18
 800290e:	f7ff bf85 	b.w	800281c <std>
 8002912:	bf00      	nop
 8002914:	200003cc 	.word	0x200003cc
 8002918:	08002889 	.word	0x08002889
 800291c:	20000294 	.word	0x20000294

08002920 <__sfp_lock_acquire>:
 8002920:	4801      	ldr	r0, [pc, #4]	@ (8002928 <__sfp_lock_acquire+0x8>)
 8002922:	f000 ba02 	b.w	8002d2a <__retarget_lock_acquire_recursive>
 8002926:	bf00      	nop
 8002928:	200003d5 	.word	0x200003d5

0800292c <__sfp_lock_release>:
 800292c:	4801      	ldr	r0, [pc, #4]	@ (8002934 <__sfp_lock_release+0x8>)
 800292e:	f000 b9fd 	b.w	8002d2c <__retarget_lock_release_recursive>
 8002932:	bf00      	nop
 8002934:	200003d5 	.word	0x200003d5

08002938 <__sinit>:
 8002938:	b510      	push	{r4, lr}
 800293a:	4604      	mov	r4, r0
 800293c:	f7ff fff0 	bl	8002920 <__sfp_lock_acquire>
 8002940:	6a23      	ldr	r3, [r4, #32]
 8002942:	b11b      	cbz	r3, 800294c <__sinit+0x14>
 8002944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002948:	f7ff bff0 	b.w	800292c <__sfp_lock_release>
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <__sinit+0x28>)
 800294e:	6223      	str	r3, [r4, #32]
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <__sinit+0x2c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f5      	bne.n	8002944 <__sinit+0xc>
 8002958:	f7ff ffc2 	bl	80028e0 <global_stdio_init.part.0>
 800295c:	e7f2      	b.n	8002944 <__sinit+0xc>
 800295e:	bf00      	nop
 8002960:	080028a1 	.word	0x080028a1
 8002964:	200003cc 	.word	0x200003cc

08002968 <_fwalk_sglue>:
 8002968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800296c:	4607      	mov	r7, r0
 800296e:	4688      	mov	r8, r1
 8002970:	4614      	mov	r4, r2
 8002972:	2600      	movs	r6, #0
 8002974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002978:	f1b9 0901 	subs.w	r9, r9, #1
 800297c:	d505      	bpl.n	800298a <_fwalk_sglue+0x22>
 800297e:	6824      	ldr	r4, [r4, #0]
 8002980:	2c00      	cmp	r4, #0
 8002982:	d1f7      	bne.n	8002974 <_fwalk_sglue+0xc>
 8002984:	4630      	mov	r0, r6
 8002986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298a:	89ab      	ldrh	r3, [r5, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d907      	bls.n	80029a0 <_fwalk_sglue+0x38>
 8002990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002994:	3301      	adds	r3, #1
 8002996:	d003      	beq.n	80029a0 <_fwalk_sglue+0x38>
 8002998:	4629      	mov	r1, r5
 800299a:	4638      	mov	r0, r7
 800299c:	47c0      	blx	r8
 800299e:	4306      	orrs	r6, r0
 80029a0:	3568      	adds	r5, #104	@ 0x68
 80029a2:	e7e9      	b.n	8002978 <_fwalk_sglue+0x10>

080029a4 <iprintf>:
 80029a4:	b40f      	push	{r0, r1, r2, r3}
 80029a6:	b507      	push	{r0, r1, r2, lr}
 80029a8:	4906      	ldr	r1, [pc, #24]	@ (80029c4 <iprintf+0x20>)
 80029aa:	ab04      	add	r3, sp, #16
 80029ac:	6808      	ldr	r0, [r1, #0]
 80029ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80029b2:	6881      	ldr	r1, [r0, #8]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	f001 fcd5 	bl	8004364 <_vfiprintf_r>
 80029ba:	b003      	add	sp, #12
 80029bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80029c0:	b004      	add	sp, #16
 80029c2:	4770      	bx	lr
 80029c4:	20000018 	.word	0x20000018

080029c8 <_puts_r>:
 80029c8:	6a03      	ldr	r3, [r0, #32]
 80029ca:	b570      	push	{r4, r5, r6, lr}
 80029cc:	6884      	ldr	r4, [r0, #8]
 80029ce:	4605      	mov	r5, r0
 80029d0:	460e      	mov	r6, r1
 80029d2:	b90b      	cbnz	r3, 80029d8 <_puts_r+0x10>
 80029d4:	f7ff ffb0 	bl	8002938 <__sinit>
 80029d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029da:	07db      	lsls	r3, r3, #31
 80029dc:	d405      	bmi.n	80029ea <_puts_r+0x22>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	0598      	lsls	r0, r3, #22
 80029e2:	d402      	bmi.n	80029ea <_puts_r+0x22>
 80029e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029e6:	f000 f9a0 	bl	8002d2a <__retarget_lock_acquire_recursive>
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	0719      	lsls	r1, r3, #28
 80029ee:	d502      	bpl.n	80029f6 <_puts_r+0x2e>
 80029f0:	6923      	ldr	r3, [r4, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d135      	bne.n	8002a62 <_puts_r+0x9a>
 80029f6:	4621      	mov	r1, r4
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 f8c5 	bl	8002b88 <__swsetup_r>
 80029fe:	b380      	cbz	r0, 8002a62 <_puts_r+0x9a>
 8002a00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a06:	07da      	lsls	r2, r3, #31
 8002a08:	d405      	bmi.n	8002a16 <_puts_r+0x4e>
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	059b      	lsls	r3, r3, #22
 8002a0e:	d402      	bmi.n	8002a16 <_puts_r+0x4e>
 8002a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a12:	f000 f98b 	bl	8002d2c <__retarget_lock_release_recursive>
 8002a16:	4628      	mov	r0, r5
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da04      	bge.n	8002a28 <_puts_r+0x60>
 8002a1e:	69a2      	ldr	r2, [r4, #24]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	db17      	blt.n	8002a54 <_puts_r+0x8c>
 8002a24:	290a      	cmp	r1, #10
 8002a26:	d015      	beq.n	8002a54 <_puts_r+0x8c>
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	6022      	str	r2, [r4, #0]
 8002a2e:	7019      	strb	r1, [r3, #0]
 8002a30:	68a3      	ldr	r3, [r4, #8]
 8002a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60a3      	str	r3, [r4, #8]
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d1ed      	bne.n	8002a1a <_puts_r+0x52>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	da11      	bge.n	8002a66 <_puts_r+0x9e>
 8002a42:	4622      	mov	r2, r4
 8002a44:	210a      	movs	r1, #10
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f860 	bl	8002b0c <__swbuf_r>
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d0d7      	beq.n	8002a00 <_puts_r+0x38>
 8002a50:	250a      	movs	r5, #10
 8002a52:	e7d7      	b.n	8002a04 <_puts_r+0x3c>
 8002a54:	4622      	mov	r2, r4
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 f858 	bl	8002b0c <__swbuf_r>
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d1e7      	bne.n	8002a30 <_puts_r+0x68>
 8002a60:	e7ce      	b.n	8002a00 <_puts_r+0x38>
 8002a62:	3e01      	subs	r6, #1
 8002a64:	e7e4      	b.n	8002a30 <_puts_r+0x68>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	6022      	str	r2, [r4, #0]
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e7ee      	b.n	8002a50 <_puts_r+0x88>
	...

08002a74 <puts>:
 8002a74:	4b02      	ldr	r3, [pc, #8]	@ (8002a80 <puts+0xc>)
 8002a76:	4601      	mov	r1, r0
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f7ff bfa5 	b.w	80029c8 <_puts_r>
 8002a7e:	bf00      	nop
 8002a80:	20000018 	.word	0x20000018

08002a84 <__sread>:
 8002a84:	b510      	push	{r4, lr}
 8002a86:	460c      	mov	r4, r1
 8002a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a8c:	f000 f8fe 	bl	8002c8c <_read_r>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	bfab      	itete	ge
 8002a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a96:	89a3      	ldrhlt	r3, [r4, #12]
 8002a98:	181b      	addge	r3, r3, r0
 8002a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a9e:	bfac      	ite	ge
 8002aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002aa2:	81a3      	strhlt	r3, [r4, #12]
 8002aa4:	bd10      	pop	{r4, pc}

08002aa6 <__swrite>:
 8002aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aaa:	461f      	mov	r7, r3
 8002aac:	898b      	ldrh	r3, [r1, #12]
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	4605      	mov	r5, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4616      	mov	r6, r2
 8002ab6:	d505      	bpl.n	8002ac4 <__swrite+0x1e>
 8002ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002abc:	2302      	movs	r3, #2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f000 f8d2 	bl	8002c68 <_lseek_r>
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
 8002ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ace:	81a3      	strh	r3, [r4, #12]
 8002ad0:	4632      	mov	r2, r6
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ada:	f000 b8e9 	b.w	8002cb0 <_write_r>

08002ade <__sseek>:
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae6:	f000 f8bf 	bl	8002c68 <_lseek_r>
 8002aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aee:	1c42      	adds	r2, r0, #1
 8002af0:	bf0b      	itete	eq
 8002af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002afa:	81a3      	strheq	r3, [r4, #12]
 8002afc:	81a3      	strhne	r3, [r4, #12]
 8002afe:	bf18      	it	ne
 8002b00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <__sclose>:
 8002b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b08:	f000 b89e 	b.w	8002c48 <_close_r>

08002b0c <__swbuf_r>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	460e      	mov	r6, r1
 8002b10:	4614      	mov	r4, r2
 8002b12:	4605      	mov	r5, r0
 8002b14:	b118      	cbz	r0, 8002b1e <__swbuf_r+0x12>
 8002b16:	6a03      	ldr	r3, [r0, #32]
 8002b18:	b90b      	cbnz	r3, 8002b1e <__swbuf_r+0x12>
 8002b1a:	f7ff ff0d 	bl	8002938 <__sinit>
 8002b1e:	69a3      	ldr	r3, [r4, #24]
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	071a      	lsls	r2, r3, #28
 8002b26:	d501      	bpl.n	8002b2c <__swbuf_r+0x20>
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	b943      	cbnz	r3, 8002b3e <__swbuf_r+0x32>
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 f82a 	bl	8002b88 <__swsetup_r>
 8002b34:	b118      	cbz	r0, 8002b3e <__swbuf_r+0x32>
 8002b36:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	6922      	ldr	r2, [r4, #16]
 8002b42:	1a98      	subs	r0, r3, r2
 8002b44:	6963      	ldr	r3, [r4, #20]
 8002b46:	b2f6      	uxtb	r6, r6
 8002b48:	4283      	cmp	r3, r0
 8002b4a:	4637      	mov	r7, r6
 8002b4c:	dc05      	bgt.n	8002b5a <__swbuf_r+0x4e>
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f001 fda1 	bl	8004698 <_fflush_r>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d1ed      	bne.n	8002b36 <__swbuf_r+0x2a>
 8002b5a:	68a3      	ldr	r3, [r4, #8]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	60a3      	str	r3, [r4, #8]
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	6022      	str	r2, [r4, #0]
 8002b66:	701e      	strb	r6, [r3, #0]
 8002b68:	6962      	ldr	r2, [r4, #20]
 8002b6a:	1c43      	adds	r3, r0, #1
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d004      	beq.n	8002b7a <__swbuf_r+0x6e>
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	07db      	lsls	r3, r3, #31
 8002b74:	d5e1      	bpl.n	8002b3a <__swbuf_r+0x2e>
 8002b76:	2e0a      	cmp	r6, #10
 8002b78:	d1df      	bne.n	8002b3a <__swbuf_r+0x2e>
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f001 fd8b 	bl	8004698 <_fflush_r>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d0d9      	beq.n	8002b3a <__swbuf_r+0x2e>
 8002b86:	e7d6      	b.n	8002b36 <__swbuf_r+0x2a>

08002b88 <__swsetup_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	4b28      	ldr	r3, [pc, #160]	@ (8002c2c <__swsetup_r+0xa4>)
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	460c      	mov	r4, r1
 8002b92:	b118      	cbz	r0, 8002b9c <__swsetup_r+0x14>
 8002b94:	6a03      	ldr	r3, [r0, #32]
 8002b96:	b90b      	cbnz	r3, 8002b9c <__swsetup_r+0x14>
 8002b98:	f7ff fece 	bl	8002938 <__sinit>
 8002b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba0:	071a      	lsls	r2, r3, #28
 8002ba2:	d421      	bmi.n	8002be8 <__swsetup_r+0x60>
 8002ba4:	06d8      	lsls	r0, r3, #27
 8002ba6:	d407      	bmi.n	8002bb8 <__swsetup_r+0x30>
 8002ba8:	2209      	movs	r2, #9
 8002baa:	602a      	str	r2, [r5, #0]
 8002bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bb0:	81a3      	strh	r3, [r4, #12]
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bb6:	e030      	b.n	8002c1a <__swsetup_r+0x92>
 8002bb8:	0759      	lsls	r1, r3, #29
 8002bba:	d512      	bpl.n	8002be2 <__swsetup_r+0x5a>
 8002bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bbe:	b141      	cbz	r1, 8002bd2 <__swsetup_r+0x4a>
 8002bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bc4:	4299      	cmp	r1, r3
 8002bc6:	d002      	beq.n	8002bce <__swsetup_r+0x46>
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 ff19 	bl	8003a00 <_free_r>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bd8:	6062      	str	r2, [r4, #4]
 8002bda:	6922      	ldr	r2, [r4, #16]
 8002bdc:	6022      	str	r2, [r4, #0]
 8002bde:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	b93a      	cbnz	r2, 8002bfc <__swsetup_r+0x74>
 8002bec:	059a      	lsls	r2, r3, #22
 8002bee:	d501      	bpl.n	8002bf4 <__swsetup_r+0x6c>
 8002bf0:	0618      	lsls	r0, r3, #24
 8002bf2:	d503      	bpl.n	8002bfc <__swsetup_r+0x74>
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f001 fd9a 	bl	8004730 <__smakebuf_r>
 8002bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c00:	f013 0201 	ands.w	r2, r3, #1
 8002c04:	d00a      	beq.n	8002c1c <__swsetup_r+0x94>
 8002c06:	2200      	movs	r2, #0
 8002c08:	60a2      	str	r2, [r4, #8]
 8002c0a:	6962      	ldr	r2, [r4, #20]
 8002c0c:	4252      	negs	r2, r2
 8002c0e:	61a2      	str	r2, [r4, #24]
 8002c10:	6922      	ldr	r2, [r4, #16]
 8002c12:	b942      	cbnz	r2, 8002c26 <__swsetup_r+0x9e>
 8002c14:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c18:	d1c8      	bne.n	8002bac <__swsetup_r+0x24>
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	0799      	lsls	r1, r3, #30
 8002c1e:	bf58      	it	pl
 8002c20:	6962      	ldrpl	r2, [r4, #20]
 8002c22:	60a2      	str	r2, [r4, #8]
 8002c24:	e7f4      	b.n	8002c10 <__swsetup_r+0x88>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e7f7      	b.n	8002c1a <__swsetup_r+0x92>
 8002c2a:	bf00      	nop
 8002c2c:	20000018 	.word	0x20000018

08002c30 <memset>:
 8002c30:	4402      	add	r2, r0
 8002c32:	4603      	mov	r3, r0
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <memset+0xa>
 8002c38:	4770      	bx	lr
 8002c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3e:	e7f9      	b.n	8002c34 <memset+0x4>

08002c40 <_localeconv_r>:
 8002c40:	4800      	ldr	r0, [pc, #0]	@ (8002c44 <_localeconv_r+0x4>)
 8002c42:	4770      	bx	lr
 8002c44:	20000158 	.word	0x20000158

08002c48 <_close_r>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4d06      	ldr	r5, [pc, #24]	@ (8002c64 <_close_r+0x1c>)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4608      	mov	r0, r1
 8002c52:	602b      	str	r3, [r5, #0]
 8002c54:	f7ff f8c6 	bl	8001de4 <_close>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d102      	bne.n	8002c62 <_close_r+0x1a>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	b103      	cbz	r3, 8002c62 <_close_r+0x1a>
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
 8002c64:	200003d0 	.word	0x200003d0

08002c68 <_lseek_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4d07      	ldr	r5, [pc, #28]	@ (8002c88 <_lseek_r+0x20>)
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	602a      	str	r2, [r5, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff f8be 	bl	8001df8 <_lseek>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_lseek_r+0x1e>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_lseek_r+0x1e>
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200003d0 	.word	0x200003d0

08002c8c <_read_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4d07      	ldr	r5, [pc, #28]	@ (8002cac <_read_r+0x20>)
 8002c90:	4604      	mov	r4, r0
 8002c92:	4608      	mov	r0, r1
 8002c94:	4611      	mov	r1, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7ff f884 	bl	8001da8 <_read>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_read_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_read_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200003d0 	.word	0x200003d0

08002cb0 <_write_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4d07      	ldr	r5, [pc, #28]	@ (8002cd0 <_write_r+0x20>)
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	4608      	mov	r0, r1
 8002cb8:	4611      	mov	r1, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	602a      	str	r2, [r5, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7ff f882 	bl	8001dc8 <_write>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d102      	bne.n	8002cce <_write_r+0x1e>
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	b103      	cbz	r3, 8002cce <_write_r+0x1e>
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	200003d0 	.word	0x200003d0

08002cd4 <__errno>:
 8002cd4:	4b01      	ldr	r3, [pc, #4]	@ (8002cdc <__errno+0x8>)
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000018 	.word	0x20000018

08002ce0 <__libc_init_array>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <__libc_init_array+0x38>)
 8002ce4:	4d0d      	ldr	r5, [pc, #52]	@ (8002d1c <__libc_init_array+0x3c>)
 8002ce6:	1b5b      	subs	r3, r3, r5
 8002ce8:	109c      	asrs	r4, r3, #2
 8002cea:	2600      	movs	r6, #0
 8002cec:	42a6      	cmp	r6, r4
 8002cee:	d109      	bne.n	8002d04 <__libc_init_array+0x24>
 8002cf0:	f001 ffc4 	bl	8004c7c <_init>
 8002cf4:	4d0a      	ldr	r5, [pc, #40]	@ (8002d20 <__libc_init_array+0x40>)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <__libc_init_array+0x44>)
 8002cf8:	1b5b      	subs	r3, r3, r5
 8002cfa:	109c      	asrs	r4, r3, #2
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	42a6      	cmp	r6, r4
 8002d00:	d105      	bne.n	8002d0e <__libc_init_array+0x2e>
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d08:	4798      	blx	r3
 8002d0a:	3601      	adds	r6, #1
 8002d0c:	e7ee      	b.n	8002cec <__libc_init_array+0xc>
 8002d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d12:	4798      	blx	r3
 8002d14:	3601      	adds	r6, #1
 8002d16:	e7f2      	b.n	8002cfe <__libc_init_array+0x1e>
 8002d18:	080050a4 	.word	0x080050a4
 8002d1c:	080050a4 	.word	0x080050a4
 8002d20:	080050a4 	.word	0x080050a4
 8002d24:	080050a8 	.word	0x080050a8

08002d28 <__retarget_lock_init_recursive>:
 8002d28:	4770      	bx	lr

08002d2a <__retarget_lock_acquire_recursive>:
 8002d2a:	4770      	bx	lr

08002d2c <__retarget_lock_release_recursive>:
 8002d2c:	4770      	bx	lr

08002d2e <quorem>:
 8002d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d32:	6903      	ldr	r3, [r0, #16]
 8002d34:	690c      	ldr	r4, [r1, #16]
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	4607      	mov	r7, r0
 8002d3a:	db7e      	blt.n	8002e3a <quorem+0x10c>
 8002d3c:	3c01      	subs	r4, #1
 8002d3e:	f101 0814 	add.w	r8, r1, #20
 8002d42:	00a3      	lsls	r3, r4, #2
 8002d44:	f100 0514 	add.w	r5, r0, #20
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d64:	d32e      	bcc.n	8002dc4 <quorem+0x96>
 8002d66:	f04f 0a00 	mov.w	sl, #0
 8002d6a:	46c4      	mov	ip, r8
 8002d6c:	46ae      	mov	lr, r5
 8002d6e:	46d3      	mov	fp, sl
 8002d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002d74:	b298      	uxth	r0, r3
 8002d76:	fb06 a000 	mla	r0, r6, r0, sl
 8002d7a:	0c02      	lsrs	r2, r0, #16
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	fb06 2303 	mla	r3, r6, r3, r2
 8002d82:	f8de 2000 	ldr.w	r2, [lr]
 8002d86:	b280      	uxth	r0, r0
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	1a12      	subs	r2, r2, r0
 8002d8c:	445a      	add	r2, fp
 8002d8e:	f8de 0000 	ldr.w	r0, [lr]
 8002d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002d9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002da0:	b292      	uxth	r2, r2
 8002da2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002da6:	45e1      	cmp	r9, ip
 8002da8:	f84e 2b04 	str.w	r2, [lr], #4
 8002dac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002db0:	d2de      	bcs.n	8002d70 <quorem+0x42>
 8002db2:	9b00      	ldr	r3, [sp, #0]
 8002db4:	58eb      	ldr	r3, [r5, r3]
 8002db6:	b92b      	cbnz	r3, 8002dc4 <quorem+0x96>
 8002db8:	9b01      	ldr	r3, [sp, #4]
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	429d      	cmp	r5, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	d32f      	bcc.n	8002e22 <quorem+0xf4>
 8002dc2:	613c      	str	r4, [r7, #16]
 8002dc4:	4638      	mov	r0, r7
 8002dc6:	f001 f997 	bl	80040f8 <__mcmp>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	db25      	blt.n	8002e1a <quorem+0xec>
 8002dce:	4629      	mov	r1, r5
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8002dd6:	f8d1 c000 	ldr.w	ip, [r1]
 8002dda:	fa1f fe82 	uxth.w	lr, r2
 8002dde:	fa1f f38c 	uxth.w	r3, ip
 8002de2:	eba3 030e 	sub.w	r3, r3, lr
 8002de6:	4403      	add	r3, r0
 8002de8:	0c12      	lsrs	r2, r2, #16
 8002dea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002dee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002df8:	45c1      	cmp	r9, r8
 8002dfa:	f841 3b04 	str.w	r3, [r1], #4
 8002dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002e02:	d2e6      	bcs.n	8002dd2 <quorem+0xa4>
 8002e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e0c:	b922      	cbnz	r2, 8002e18 <quorem+0xea>
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	429d      	cmp	r5, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	d30b      	bcc.n	8002e2e <quorem+0x100>
 8002e16:	613c      	str	r4, [r7, #16]
 8002e18:	3601      	adds	r6, #1
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	b003      	add	sp, #12
 8002e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	3b04      	subs	r3, #4
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d1cb      	bne.n	8002dc2 <quorem+0x94>
 8002e2a:	3c01      	subs	r4, #1
 8002e2c:	e7c6      	b.n	8002dbc <quorem+0x8e>
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	3b04      	subs	r3, #4
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d1ef      	bne.n	8002e16 <quorem+0xe8>
 8002e36:	3c01      	subs	r4, #1
 8002e38:	e7ea      	b.n	8002e10 <quorem+0xe2>
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e7ee      	b.n	8002e1c <quorem+0xee>
	...

08002e40 <_dtoa_r>:
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	b099      	sub	sp, #100	@ 0x64
 8002e46:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8002e4a:	920c      	str	r2, [sp, #48]	@ 0x30
 8002e4c:	69c2      	ldr	r2, [r0, #28]
 8002e4e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8002e50:	910a      	str	r1, [sp, #40]	@ 0x28
 8002e52:	ec57 6b10 	vmov	r6, r7, d0
 8002e56:	4681      	mov	r9, r0
 8002e58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002e5a:	b982      	cbnz	r2, 8002e7e <_dtoa_r+0x3e>
 8002e5c:	2010      	movs	r0, #16
 8002e5e:	f000 fe19 	bl	8003a94 <malloc>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8c9 001c 	str.w	r0, [r9, #28]
 8002e68:	b920      	cbnz	r0, 8002e74 <_dtoa_r+0x34>
 8002e6a:	4bad      	ldr	r3, [pc, #692]	@ (8003120 <_dtoa_r+0x2e0>)
 8002e6c:	21ef      	movs	r1, #239	@ 0xef
 8002e6e:	48ad      	ldr	r0, [pc, #692]	@ (8003124 <_dtoa_r+0x2e4>)
 8002e70:	f001 fcd8 	bl	8004824 <__assert_func>
 8002e74:	2300      	movs	r3, #0
 8002e76:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8002e7a:	6003      	str	r3, [r0, #0]
 8002e7c:	60c3      	str	r3, [r0, #12]
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	b159      	cbz	r1, 8002e9a <_dtoa_r+0x5a>
 8002e82:	6852      	ldr	r2, [r2, #4]
 8002e84:	604a      	str	r2, [r1, #4]
 8002e86:	2301      	movs	r3, #1
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
 8002e8c:	4648      	mov	r0, r9
 8002e8e:	f000 fef5 	bl	8003c7c <_Bfree>
 8002e92:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f1b7 0800 	subs.w	r8, r7, #0
 8002e9e:	bfb5      	itete	lt
 8002ea0:	2301      	movlt	r3, #1
 8002ea2:	2300      	movge	r3, #0
 8002ea4:	6023      	strlt	r3, [r4, #0]
 8002ea6:	6023      	strge	r3, [r4, #0]
 8002ea8:	4b9f      	ldr	r3, [pc, #636]	@ (8003128 <_dtoa_r+0x2e8>)
 8002eaa:	bfbc      	itt	lt
 8002eac:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 8002eb0:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 8002eb4:	ea33 0308 	bics.w	r3, r3, r8
 8002eb8:	d11a      	bne.n	8002ef0 <_dtoa_r+0xb0>
 8002eba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002ebc:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8002ec0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002ec4:	ea58 0806 	orrs.w	r8, r8, r6
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	f000 856c 	beq.w	80039a6 <_dtoa_r+0xb66>
 8002ece:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002ed0:	b953      	cbnz	r3, 8002ee8 <_dtoa_r+0xa8>
 8002ed2:	4b96      	ldr	r3, [pc, #600]	@ (800312c <_dtoa_r+0x2ec>)
 8002ed4:	e021      	b.n	8002f1a <_dtoa_r+0xda>
 8002ed6:	4b96      	ldr	r3, [pc, #600]	@ (8003130 <_dtoa_r+0x2f0>)
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	9800      	ldr	r0, [sp, #0]
 8002ee2:	b019      	add	sp, #100	@ 0x64
 8002ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee8:	4b90      	ldr	r3, [pc, #576]	@ (800312c <_dtoa_r+0x2ec>)
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	3303      	adds	r3, #3
 8002eee:	e7f5      	b.n	8002edc <_dtoa_r+0x9c>
 8002ef0:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	ec51 0b17 	vmov	r0, r1, d7
 8002efa:	2300      	movs	r3, #0
 8002efc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f00:	f7fd fdc2 	bl	8000a88 <__aeabi_dcmpeq>
 8002f04:	4682      	mov	sl, r0
 8002f06:	b150      	cbz	r0, 8002f1e <_dtoa_r+0xde>
 8002f08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002f10:	b113      	cbz	r3, 8002f18 <_dtoa_r+0xd8>
 8002f12:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002f14:	4b87      	ldr	r3, [pc, #540]	@ (8003134 <_dtoa_r+0x2f4>)
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b87      	ldr	r3, [pc, #540]	@ (8003138 <_dtoa_r+0x2f8>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	e7e0      	b.n	8002ee0 <_dtoa_r+0xa0>
 8002f1e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8002f22:	aa16      	add	r2, sp, #88	@ 0x58
 8002f24:	a917      	add	r1, sp, #92	@ 0x5c
 8002f26:	4648      	mov	r0, r9
 8002f28:	f001 f99a 	bl	8004260 <__d2b>
 8002f2c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8002f30:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8002f32:	9001      	str	r0, [sp, #4]
 8002f34:	d079      	beq.n	800302a <_dtoa_r+0x1ea>
 8002f36:	9b07      	ldr	r3, [sp, #28]
 8002f38:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8002f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002f48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002f4c:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8002f50:	4619      	mov	r1, r3
 8002f52:	2200      	movs	r2, #0
 8002f54:	4b79      	ldr	r3, [pc, #484]	@ (800313c <_dtoa_r+0x2fc>)
 8002f56:	f7fd f977 	bl	8000248 <__aeabi_dsub>
 8002f5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003108 <_dtoa_r+0x2c8>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fb2a 	bl	80005b8 <__aeabi_dmul>
 8002f64:	a36a      	add	r3, pc, #424	@ (adr r3, 8003110 <_dtoa_r+0x2d0>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd f96f 	bl	800024c <__adddf3>
 8002f6e:	4606      	mov	r6, r0
 8002f70:	4620      	mov	r0, r4
 8002f72:	460f      	mov	r7, r1
 8002f74:	f7fd fab6 	bl	80004e4 <__aeabi_i2d>
 8002f78:	a367      	add	r3, pc, #412	@ (adr r3, 8003118 <_dtoa_r+0x2d8>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd fb1b 	bl	80005b8 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4630      	mov	r0, r6
 8002f88:	4639      	mov	r1, r7
 8002f8a:	f7fd f95f 	bl	800024c <__adddf3>
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460f      	mov	r7, r1
 8002f92:	f7fd fdc1 	bl	8000b18 <__aeabi_d2iz>
 8002f96:	2200      	movs	r2, #0
 8002f98:	4680      	mov	r8, r0
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	4639      	mov	r1, r7
 8002fa0:	f7fd fd7c 	bl	8000a9c <__aeabi_dcmplt>
 8002fa4:	b148      	cbz	r0, 8002fba <_dtoa_r+0x17a>
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	f7fd fa9c 	bl	80004e4 <__aeabi_i2d>
 8002fac:	4632      	mov	r2, r6
 8002fae:	463b      	mov	r3, r7
 8002fb0:	f7fd fd6a 	bl	8000a88 <__aeabi_dcmpeq>
 8002fb4:	b908      	cbnz	r0, 8002fba <_dtoa_r+0x17a>
 8002fb6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002fba:	f1b8 0f16 	cmp.w	r8, #22
 8002fbe:	d851      	bhi.n	8003064 <_dtoa_r+0x224>
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <_dtoa_r+0x300>)
 8002fc2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fce:	f7fd fd65 	bl	8000a9c <__aeabi_dcmplt>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d048      	beq.n	8003068 <_dtoa_r+0x228>
 8002fd6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9312      	str	r3, [sp, #72]	@ 0x48
 8002fde:	1b2d      	subs	r5, r5, r4
 8002fe0:	1e6b      	subs	r3, r5, #1
 8002fe2:	9308      	str	r3, [sp, #32]
 8002fe4:	bf43      	ittte	mi
 8002fe6:	2300      	movmi	r3, #0
 8002fe8:	f1c5 0701 	rsbmi	r7, r5, #1
 8002fec:	9308      	strmi	r3, [sp, #32]
 8002fee:	2700      	movpl	r7, #0
 8002ff0:	f1b8 0f00 	cmp.w	r8, #0
 8002ff4:	db3a      	blt.n	800306c <_dtoa_r+0x22c>
 8002ff6:	9b08      	ldr	r3, [sp, #32]
 8002ff8:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8002ffc:	4443      	add	r3, r8
 8002ffe:	9308      	str	r3, [sp, #32]
 8003000:	2300      	movs	r3, #0
 8003002:	9309      	str	r3, [sp, #36]	@ 0x24
 8003004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003006:	2b09      	cmp	r3, #9
 8003008:	d864      	bhi.n	80030d4 <_dtoa_r+0x294>
 800300a:	2b05      	cmp	r3, #5
 800300c:	bfc4      	itt	gt
 800300e:	3b04      	subgt	r3, #4
 8003010:	930a      	strgt	r3, [sp, #40]	@ 0x28
 8003012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003014:	f1a3 0302 	sub.w	r3, r3, #2
 8003018:	bfcc      	ite	gt
 800301a:	2400      	movgt	r4, #0
 800301c:	2401      	movle	r4, #1
 800301e:	2b03      	cmp	r3, #3
 8003020:	d864      	bhi.n	80030ec <_dtoa_r+0x2ac>
 8003022:	e8df f003 	tbb	[pc, r3]
 8003026:	5553      	.short	0x5553
 8003028:	2b36      	.short	0x2b36
 800302a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800302c:	442c      	add	r4, r5
 800302e:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 8003032:	2b20      	cmp	r3, #32
 8003034:	bfc1      	itttt	gt
 8003036:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800303a:	fa08 f803 	lslgt.w	r8, r8, r3
 800303e:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 8003042:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003046:	bfd6      	itet	le
 8003048:	f1c3 0320 	rsble	r3, r3, #32
 800304c:	ea48 0003 	orrgt.w	r0, r8, r3
 8003050:	fa06 f003 	lslle.w	r0, r6, r3
 8003054:	f7fd fa36 	bl	80004c4 <__aeabi_ui2d>
 8003058:	2201      	movs	r2, #1
 800305a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800305e:	3c01      	subs	r4, #1
 8003060:	9214      	str	r2, [sp, #80]	@ 0x50
 8003062:	e775      	b.n	8002f50 <_dtoa_r+0x110>
 8003064:	2301      	movs	r3, #1
 8003066:	e7b9      	b.n	8002fdc <_dtoa_r+0x19c>
 8003068:	9012      	str	r0, [sp, #72]	@ 0x48
 800306a:	e7b8      	b.n	8002fde <_dtoa_r+0x19e>
 800306c:	f1c8 0300 	rsb	r3, r8, #0
 8003070:	9309      	str	r3, [sp, #36]	@ 0x24
 8003072:	2300      	movs	r3, #0
 8003074:	eba7 0708 	sub.w	r7, r7, r8
 8003078:	930d      	str	r3, [sp, #52]	@ 0x34
 800307a:	e7c3      	b.n	8003004 <_dtoa_r+0x1c4>
 800307c:	2301      	movs	r3, #1
 800307e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003082:	4443      	add	r3, r8
 8003084:	9305      	str	r3, [sp, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	9304      	str	r3, [sp, #16]
 800308c:	bfb8      	it	lt
 800308e:	2301      	movlt	r3, #1
 8003090:	e006      	b.n	80030a0 <_dtoa_r+0x260>
 8003092:	2301      	movs	r3, #1
 8003094:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003098:	2b00      	cmp	r3, #0
 800309a:	dd2a      	ble.n	80030f2 <_dtoa_r+0x2b2>
 800309c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80030a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80030a4:	2100      	movs	r1, #0
 80030a6:	2204      	movs	r2, #4
 80030a8:	f102 0514 	add.w	r5, r2, #20
 80030ac:	429d      	cmp	r5, r3
 80030ae:	f101 0601 	add.w	r6, r1, #1
 80030b2:	d923      	bls.n	80030fc <_dtoa_r+0x2bc>
 80030b4:	6041      	str	r1, [r0, #4]
 80030b6:	4648      	mov	r0, r9
 80030b8:	f000 fda2 	bl	8003c00 <_Balloc>
 80030bc:	9000      	str	r0, [sp, #0]
 80030be:	2800      	cmp	r0, #0
 80030c0:	d142      	bne.n	8003148 <_dtoa_r+0x308>
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <_dtoa_r+0x304>)
 80030c4:	4602      	mov	r2, r0
 80030c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80030ca:	e6d0      	b.n	8002e6e <_dtoa_r+0x2e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	e7e1      	b.n	8003094 <_dtoa_r+0x254>
 80030d0:	2300      	movs	r3, #0
 80030d2:	e7d4      	b.n	800307e <_dtoa_r+0x23e>
 80030d4:	2401      	movs	r4, #1
 80030d6:	2300      	movs	r3, #0
 80030d8:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2312      	movs	r3, #18
 80030e8:	920c      	str	r2, [sp, #48]	@ 0x30
 80030ea:	e7d9      	b.n	80030a0 <_dtoa_r+0x260>
 80030ec:	2301      	movs	r3, #1
 80030ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030f0:	e7f4      	b.n	80030dc <_dtoa_r+0x29c>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80030f8:	461a      	mov	r2, r3
 80030fa:	e7f5      	b.n	80030e8 <_dtoa_r+0x2a8>
 80030fc:	0052      	lsls	r2, r2, #1
 80030fe:	4631      	mov	r1, r6
 8003100:	e7d2      	b.n	80030a8 <_dtoa_r+0x268>
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
 8003108:	636f4361 	.word	0x636f4361
 800310c:	3fd287a7 	.word	0x3fd287a7
 8003110:	8b60c8b3 	.word	0x8b60c8b3
 8003114:	3fc68a28 	.word	0x3fc68a28
 8003118:	509f79fb 	.word	0x509f79fb
 800311c:	3fd34413 	.word	0x3fd34413
 8003120:	08004d15 	.word	0x08004d15
 8003124:	08004d2c 	.word	0x08004d2c
 8003128:	7ff00000 	.word	0x7ff00000
 800312c:	08004d11 	.word	0x08004d11
 8003130:	08004d08 	.word	0x08004d08
 8003134:	08004ce5 	.word	0x08004ce5
 8003138:	08004ce4 	.word	0x08004ce4
 800313c:	3ff80000 	.word	0x3ff80000
 8003140:	08004ed0 	.word	0x08004ed0
 8003144:	08004dae 	.word	0x08004dae
 8003148:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800314c:	9a00      	ldr	r2, [sp, #0]
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	9b04      	ldr	r3, [sp, #16]
 8003152:	2b0e      	cmp	r3, #14
 8003154:	f200 80a1 	bhi.w	800329a <_dtoa_r+0x45a>
 8003158:	2c00      	cmp	r4, #0
 800315a:	f000 809e 	beq.w	800329a <_dtoa_r+0x45a>
 800315e:	f1b8 0f00 	cmp.w	r8, #0
 8003162:	dd36      	ble.n	80031d2 <_dtoa_r+0x392>
 8003164:	4b9e      	ldr	r3, [pc, #632]	@ (80033e0 <_dtoa_r+0x5a0>)
 8003166:	f008 020f 	and.w	r2, r8, #15
 800316a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800316e:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8003172:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003176:	ea4f 1528 	mov.w	r5, r8, asr #4
 800317a:	d016      	beq.n	80031aa <_dtoa_r+0x36a>
 800317c:	4b99      	ldr	r3, [pc, #612]	@ (80033e4 <_dtoa_r+0x5a4>)
 800317e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003182:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003186:	f7fd fb41 	bl	800080c <__aeabi_ddiv>
 800318a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800318e:	f005 050f 	and.w	r5, r5, #15
 8003192:	2403      	movs	r4, #3
 8003194:	4e93      	ldr	r6, [pc, #588]	@ (80033e4 <_dtoa_r+0x5a4>)
 8003196:	b975      	cbnz	r5, 80031b6 <_dtoa_r+0x376>
 8003198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	f7fd fb34 	bl	800080c <__aeabi_ddiv>
 80031a4:	4682      	mov	sl, r0
 80031a6:	468b      	mov	fp, r1
 80031a8:	e02d      	b.n	8003206 <_dtoa_r+0x3c6>
 80031aa:	ed9d 7b06 	vldr	d7, [sp, #24]
 80031ae:	2402      	movs	r4, #2
 80031b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80031b4:	e7ee      	b.n	8003194 <_dtoa_r+0x354>
 80031b6:	07e9      	lsls	r1, r5, #31
 80031b8:	d508      	bpl.n	80031cc <_dtoa_r+0x38c>
 80031ba:	4650      	mov	r0, sl
 80031bc:	4659      	mov	r1, fp
 80031be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80031c2:	f7fd f9f9 	bl	80005b8 <__aeabi_dmul>
 80031c6:	3401      	adds	r4, #1
 80031c8:	4682      	mov	sl, r0
 80031ca:	468b      	mov	fp, r1
 80031cc:	106d      	asrs	r5, r5, #1
 80031ce:	3608      	adds	r6, #8
 80031d0:	e7e1      	b.n	8003196 <_dtoa_r+0x356>
 80031d2:	f000 80ad 	beq.w	8003330 <_dtoa_r+0x4f0>
 80031d6:	f1c8 0500 	rsb	r5, r8, #0
 80031da:	4b81      	ldr	r3, [pc, #516]	@ (80033e0 <_dtoa_r+0x5a0>)
 80031dc:	4e81      	ldr	r6, [pc, #516]	@ (80033e4 <_dtoa_r+0x5a4>)
 80031de:	f005 020f 	and.w	r2, r5, #15
 80031e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ee:	f7fd f9e3 	bl	80005b8 <__aeabi_dmul>
 80031f2:	112d      	asrs	r5, r5, #4
 80031f4:	4682      	mov	sl, r0
 80031f6:	468b      	mov	fp, r1
 80031f8:	2300      	movs	r3, #0
 80031fa:	2402      	movs	r4, #2
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	f040 808c 	bne.w	800331a <_dtoa_r+0x4da>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ce      	bne.n	80031a4 <_dtoa_r+0x364>
 8003206:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8095 	beq.w	8003338 <_dtoa_r+0x4f8>
 800320e:	4b76      	ldr	r3, [pc, #472]	@ (80033e8 <_dtoa_r+0x5a8>)
 8003210:	2200      	movs	r2, #0
 8003212:	4650      	mov	r0, sl
 8003214:	4659      	mov	r1, fp
 8003216:	f7fd fc41 	bl	8000a9c <__aeabi_dcmplt>
 800321a:	2800      	cmp	r0, #0
 800321c:	f000 808c 	beq.w	8003338 <_dtoa_r+0x4f8>
 8003220:	9b04      	ldr	r3, [sp, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8088 	beq.w	8003338 <_dtoa_r+0x4f8>
 8003228:	9b05      	ldr	r3, [sp, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd35      	ble.n	800329a <_dtoa_r+0x45a>
 800322e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	4650      	mov	r0, sl
 8003236:	4659      	mov	r1, fp
 8003238:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <_dtoa_r+0x5ac>)
 800323a:	2200      	movs	r2, #0
 800323c:	f7fd f9bc 	bl	80005b8 <__aeabi_dmul>
 8003240:	9e05      	ldr	r6, [sp, #20]
 8003242:	4682      	mov	sl, r0
 8003244:	468b      	mov	fp, r1
 8003246:	3401      	adds	r4, #1
 8003248:	4620      	mov	r0, r4
 800324a:	f7fd f94b 	bl	80004e4 <__aeabi_i2d>
 800324e:	4652      	mov	r2, sl
 8003250:	465b      	mov	r3, fp
 8003252:	f7fd f9b1 	bl	80005b8 <__aeabi_dmul>
 8003256:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <_dtoa_r+0x5b0>)
 8003258:	2200      	movs	r2, #0
 800325a:	f7fc fff7 	bl	800024c <__adddf3>
 800325e:	4604      	mov	r4, r0
 8003260:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 8003264:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8003268:	2e00      	cmp	r6, #0
 800326a:	d169      	bne.n	8003340 <_dtoa_r+0x500>
 800326c:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <_dtoa_r+0x5b4>)
 800326e:	2200      	movs	r2, #0
 8003270:	4650      	mov	r0, sl
 8003272:	4659      	mov	r1, fp
 8003274:	f7fc ffe8 	bl	8000248 <__aeabi_dsub>
 8003278:	4622      	mov	r2, r4
 800327a:	462b      	mov	r3, r5
 800327c:	4682      	mov	sl, r0
 800327e:	468b      	mov	fp, r1
 8003280:	f7fd fc2a 	bl	8000ad8 <__aeabi_dcmpgt>
 8003284:	2800      	cmp	r0, #0
 8003286:	f040 8294 	bne.w	80037b2 <_dtoa_r+0x972>
 800328a:	4622      	mov	r2, r4
 800328c:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8003290:	4650      	mov	r0, sl
 8003292:	4659      	mov	r1, fp
 8003294:	f7fd fc02 	bl	8000a9c <__aeabi_dcmplt>
 8003298:	bb20      	cbnz	r0, 80032e4 <_dtoa_r+0x4a4>
 800329a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800329c:	2b00      	cmp	r3, #0
 800329e:	f2c0 8160 	blt.w	8003562 <_dtoa_r+0x722>
 80032a2:	f1b8 0f0e 	cmp.w	r8, #14
 80032a6:	f300 815c 	bgt.w	8003562 <_dtoa_r+0x722>
 80032aa:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <_dtoa_r+0x5a0>)
 80032ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80032b0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80032b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f280 80ee 	bge.w	8003498 <_dtoa_r+0x658>
 80032bc:	9b04      	ldr	r3, [sp, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f300 80ea 	bgt.w	8003498 <_dtoa_r+0x658>
 80032c4:	d10e      	bne.n	80032e4 <_dtoa_r+0x4a4>
 80032c6:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <_dtoa_r+0x5b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	4650      	mov	r0, sl
 80032cc:	4659      	mov	r1, fp
 80032ce:	f7fd f973 	bl	80005b8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032da:	f7fd fbe9 	bl	8000ab0 <__aeabi_dcmple>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f000 826a 	beq.w	80037b8 <_dtoa_r+0x978>
 80032e4:	2500      	movs	r5, #0
 80032e6:	462c      	mov	r4, r5
 80032e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80032ea:	9e00      	ldr	r6, [sp, #0]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	4627      	mov	r7, r4
 80032f2:	2400      	movs	r4, #0
 80032f4:	4629      	mov	r1, r5
 80032f6:	4648      	mov	r0, r9
 80032f8:	f000 fcc0 	bl	8003c7c <_Bfree>
 80032fc:	2f00      	cmp	r7, #0
 80032fe:	f000 80c1 	beq.w	8003484 <_dtoa_r+0x644>
 8003302:	b12c      	cbz	r4, 8003310 <_dtoa_r+0x4d0>
 8003304:	42bc      	cmp	r4, r7
 8003306:	d003      	beq.n	8003310 <_dtoa_r+0x4d0>
 8003308:	4621      	mov	r1, r4
 800330a:	4648      	mov	r0, r9
 800330c:	f000 fcb6 	bl	8003c7c <_Bfree>
 8003310:	4639      	mov	r1, r7
 8003312:	4648      	mov	r0, r9
 8003314:	f000 fcb2 	bl	8003c7c <_Bfree>
 8003318:	e0b4      	b.n	8003484 <_dtoa_r+0x644>
 800331a:	07ea      	lsls	r2, r5, #31
 800331c:	d505      	bpl.n	800332a <_dtoa_r+0x4ea>
 800331e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003322:	f7fd f949 	bl	80005b8 <__aeabi_dmul>
 8003326:	3401      	adds	r4, #1
 8003328:	2301      	movs	r3, #1
 800332a:	106d      	asrs	r5, r5, #1
 800332c:	3608      	adds	r6, #8
 800332e:	e765      	b.n	80031fc <_dtoa_r+0x3bc>
 8003330:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8003334:	2402      	movs	r4, #2
 8003336:	e766      	b.n	8003206 <_dtoa_r+0x3c6>
 8003338:	9e04      	ldr	r6, [sp, #16]
 800333a:	f8cd 8008 	str.w	r8, [sp, #8]
 800333e:	e783      	b.n	8003248 <_dtoa_r+0x408>
 8003340:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <_dtoa_r+0x5a0>)
 8003342:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003346:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800334a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d055      	beq.n	80033fc <_dtoa_r+0x5bc>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	2000      	movs	r0, #0
 8003356:	4928      	ldr	r1, [pc, #160]	@ (80033f8 <_dtoa_r+0x5b8>)
 8003358:	f7fd fa58 	bl	800080c <__aeabi_ddiv>
 800335c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003360:	f7fc ff72 	bl	8000248 <__aeabi_dsub>
 8003364:	9b00      	ldr	r3, [sp, #0]
 8003366:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800336a:	199d      	adds	r5, r3, r6
 800336c:	461e      	mov	r6, r3
 800336e:	4659      	mov	r1, fp
 8003370:	4650      	mov	r0, sl
 8003372:	f7fd fbd1 	bl	8000b18 <__aeabi_d2iz>
 8003376:	4604      	mov	r4, r0
 8003378:	f7fd f8b4 	bl	80004e4 <__aeabi_i2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4650      	mov	r0, sl
 8003382:	4659      	mov	r1, fp
 8003384:	f7fc ff60 	bl	8000248 <__aeabi_dsub>
 8003388:	3430      	adds	r4, #48	@ 0x30
 800338a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800338e:	f806 4b01 	strb.w	r4, [r6], #1
 8003392:	4682      	mov	sl, r0
 8003394:	468b      	mov	fp, r1
 8003396:	f7fd fb81 	bl	8000a9c <__aeabi_dcmplt>
 800339a:	2800      	cmp	r0, #0
 800339c:	d172      	bne.n	8003484 <_dtoa_r+0x644>
 800339e:	4652      	mov	r2, sl
 80033a0:	465b      	mov	r3, fp
 80033a2:	4911      	ldr	r1, [pc, #68]	@ (80033e8 <_dtoa_r+0x5a8>)
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7fc ff4f 	bl	8000248 <__aeabi_dsub>
 80033aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80033ae:	f7fd fb75 	bl	8000a9c <__aeabi_dcmplt>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f040 80b6 	bne.w	8003524 <_dtoa_r+0x6e4>
 80033b8:	42ae      	cmp	r6, r5
 80033ba:	f43f af6e 	beq.w	800329a <_dtoa_r+0x45a>
 80033be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <_dtoa_r+0x5ac>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	f7fd f8f7 	bl	80005b8 <__aeabi_dmul>
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <_dtoa_r+0x5ac>)
 80033cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80033d0:	2200      	movs	r2, #0
 80033d2:	4650      	mov	r0, sl
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fd f8ef 	bl	80005b8 <__aeabi_dmul>
 80033da:	4682      	mov	sl, r0
 80033dc:	468b      	mov	fp, r1
 80033de:	e7c6      	b.n	800336e <_dtoa_r+0x52e>
 80033e0:	08004ed0 	.word	0x08004ed0
 80033e4:	08004ea8 	.word	0x08004ea8
 80033e8:	3ff00000 	.word	0x3ff00000
 80033ec:	40240000 	.word	0x40240000
 80033f0:	401c0000 	.word	0x401c0000
 80033f4:	40140000 	.word	0x40140000
 80033f8:	3fe00000 	.word	0x3fe00000
 80033fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003400:	f7fd f8da 	bl	80005b8 <__aeabi_dmul>
 8003404:	9b00      	ldr	r3, [sp, #0]
 8003406:	9d00      	ldr	r5, [sp, #0]
 8003408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800340c:	4433      	add	r3, r6
 800340e:	9315      	str	r3, [sp, #84]	@ 0x54
 8003410:	4659      	mov	r1, fp
 8003412:	4650      	mov	r0, sl
 8003414:	f7fd fb80 	bl	8000b18 <__aeabi_d2iz>
 8003418:	4604      	mov	r4, r0
 800341a:	f7fd f863 	bl	80004e4 <__aeabi_i2d>
 800341e:	3430      	adds	r4, #48	@ 0x30
 8003420:	460b      	mov	r3, r1
 8003422:	4602      	mov	r2, r0
 8003424:	4659      	mov	r1, fp
 8003426:	4650      	mov	r0, sl
 8003428:	f7fc ff0e 	bl	8000248 <__aeabi_dsub>
 800342c:	f805 4b01 	strb.w	r4, [r5], #1
 8003430:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003432:	429d      	cmp	r5, r3
 8003434:	4682      	mov	sl, r0
 8003436:	468b      	mov	fp, r1
 8003438:	d127      	bne.n	800348a <_dtoa_r+0x64a>
 800343a:	9b00      	ldr	r3, [sp, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003442:	441e      	add	r6, r3
 8003444:	4bb3      	ldr	r3, [pc, #716]	@ (8003714 <_dtoa_r+0x8d4>)
 8003446:	f7fc ff01 	bl	800024c <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4650      	mov	r0, sl
 8003450:	4659      	mov	r1, fp
 8003452:	f7fd fb41 	bl	8000ad8 <__aeabi_dcmpgt>
 8003456:	2800      	cmp	r0, #0
 8003458:	d164      	bne.n	8003524 <_dtoa_r+0x6e4>
 800345a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800345e:	49ad      	ldr	r1, [pc, #692]	@ (8003714 <_dtoa_r+0x8d4>)
 8003460:	2000      	movs	r0, #0
 8003462:	f7fc fef1 	bl	8000248 <__aeabi_dsub>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4650      	mov	r0, sl
 800346c:	4659      	mov	r1, fp
 800346e:	f7fd fb15 	bl	8000a9c <__aeabi_dcmplt>
 8003472:	2800      	cmp	r0, #0
 8003474:	f43f af11 	beq.w	800329a <_dtoa_r+0x45a>
 8003478:	4633      	mov	r3, r6
 800347a:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800347e:	2a30      	cmp	r2, #48	@ 0x30
 8003480:	d0fa      	beq.n	8003478 <_dtoa_r+0x638>
 8003482:	461e      	mov	r6, r3
 8003484:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003488:	e03a      	b.n	8003500 <_dtoa_r+0x6c0>
 800348a:	4ba3      	ldr	r3, [pc, #652]	@ (8003718 <_dtoa_r+0x8d8>)
 800348c:	2200      	movs	r2, #0
 800348e:	f7fd f893 	bl	80005b8 <__aeabi_dmul>
 8003492:	4682      	mov	sl, r0
 8003494:	468b      	mov	fp, r1
 8003496:	e7bb      	b.n	8003410 <_dtoa_r+0x5d0>
 8003498:	9e00      	ldr	r6, [sp, #0]
 800349a:	4652      	mov	r2, sl
 800349c:	465b      	mov	r3, fp
 800349e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034a2:	f7fd f9b3 	bl	800080c <__aeabi_ddiv>
 80034a6:	f7fd fb37 	bl	8000b18 <__aeabi_d2iz>
 80034aa:	4607      	mov	r7, r0
 80034ac:	f7fd f81a 	bl	80004e4 <__aeabi_i2d>
 80034b0:	4652      	mov	r2, sl
 80034b2:	465b      	mov	r3, fp
 80034b4:	f7fd f880 	bl	80005b8 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034c0:	f7fc fec2 	bl	8000248 <__aeabi_dsub>
 80034c4:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 80034c8:	9c00      	ldr	r4, [sp, #0]
 80034ca:	f806 cb01 	strb.w	ip, [r6], #1
 80034ce:	eba6 0c04 	sub.w	ip, r6, r4
 80034d2:	9c04      	ldr	r4, [sp, #16]
 80034d4:	4564      	cmp	r4, ip
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	d133      	bne.n	8003544 <_dtoa_r+0x704>
 80034dc:	f7fc feb6 	bl	800024c <__adddf3>
 80034e0:	4652      	mov	r2, sl
 80034e2:	465b      	mov	r3, fp
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	f7fd faf6 	bl	8000ad8 <__aeabi_dcmpgt>
 80034ec:	b9c0      	cbnz	r0, 8003520 <_dtoa_r+0x6e0>
 80034ee:	4652      	mov	r2, sl
 80034f0:	465b      	mov	r3, fp
 80034f2:	4620      	mov	r0, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	f7fd fac7 	bl	8000a88 <__aeabi_dcmpeq>
 80034fa:	b108      	cbz	r0, 8003500 <_dtoa_r+0x6c0>
 80034fc:	07fb      	lsls	r3, r7, #31
 80034fe:	d40f      	bmi.n	8003520 <_dtoa_r+0x6e0>
 8003500:	9901      	ldr	r1, [sp, #4]
 8003502:	4648      	mov	r0, r9
 8003504:	f000 fbba 	bl	8003c7c <_Bfree>
 8003508:	2300      	movs	r3, #0
 800350a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800350c:	7033      	strb	r3, [r6, #0]
 800350e:	f108 0301 	add.w	r3, r8, #1
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003516:	2b00      	cmp	r3, #0
 8003518:	f43f ace2 	beq.w	8002ee0 <_dtoa_r+0xa0>
 800351c:	601e      	str	r6, [r3, #0]
 800351e:	e4df      	b.n	8002ee0 <_dtoa_r+0xa0>
 8003520:	f8cd 8008 	str.w	r8, [sp, #8]
 8003524:	4633      	mov	r3, r6
 8003526:	461e      	mov	r6, r3
 8003528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800352c:	2a39      	cmp	r2, #57	@ 0x39
 800352e:	d106      	bne.n	800353e <_dtoa_r+0x6fe>
 8003530:	9a00      	ldr	r2, [sp, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d1f7      	bne.n	8003526 <_dtoa_r+0x6e6>
 8003536:	9a02      	ldr	r2, [sp, #8]
 8003538:	3201      	adds	r2, #1
 800353a:	9202      	str	r2, [sp, #8]
 800353c:	2230      	movs	r2, #48	@ 0x30
 800353e:	3201      	adds	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e79f      	b.n	8003484 <_dtoa_r+0x644>
 8003544:	4b74      	ldr	r3, [pc, #464]	@ (8003718 <_dtoa_r+0x8d8>)
 8003546:	2200      	movs	r2, #0
 8003548:	f7fd f836 	bl	80005b8 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003554:	2200      	movs	r2, #0
 8003556:	2300      	movs	r3, #0
 8003558:	f7fd fa96 	bl	8000a88 <__aeabi_dcmpeq>
 800355c:	2800      	cmp	r0, #0
 800355e:	d09c      	beq.n	800349a <_dtoa_r+0x65a>
 8003560:	e7ce      	b.n	8003500 <_dtoa_r+0x6c0>
 8003562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003564:	2a00      	cmp	r2, #0
 8003566:	f000 80e3 	beq.w	8003730 <_dtoa_r+0x8f0>
 800356a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800356c:	2a01      	cmp	r2, #1
 800356e:	f300 80c2 	bgt.w	80036f6 <_dtoa_r+0x8b6>
 8003572:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003574:	2a00      	cmp	r2, #0
 8003576:	f000 80ba 	beq.w	80036ee <_dtoa_r+0x8ae>
 800357a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800357e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003580:	463e      	mov	r6, r7
 8003582:	9a08      	ldr	r2, [sp, #32]
 8003584:	2101      	movs	r1, #1
 8003586:	441a      	add	r2, r3
 8003588:	4648      	mov	r0, r9
 800358a:	441f      	add	r7, r3
 800358c:	9208      	str	r2, [sp, #32]
 800358e:	f000 fc29 	bl	8003de4 <__i2b>
 8003592:	4604      	mov	r4, r0
 8003594:	b156      	cbz	r6, 80035ac <_dtoa_r+0x76c>
 8003596:	9b08      	ldr	r3, [sp, #32]
 8003598:	2b00      	cmp	r3, #0
 800359a:	dd07      	ble.n	80035ac <_dtoa_r+0x76c>
 800359c:	42b3      	cmp	r3, r6
 800359e:	9a08      	ldr	r2, [sp, #32]
 80035a0:	bfa8      	it	ge
 80035a2:	4633      	movge	r3, r6
 80035a4:	1aff      	subs	r7, r7, r3
 80035a6:	1af6      	subs	r6, r6, r3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	9308      	str	r3, [sp, #32]
 80035ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ae:	b30b      	cbz	r3, 80035f4 <_dtoa_r+0x7b4>
 80035b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80c3 	beq.w	800373e <_dtoa_r+0x8fe>
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	f000 80bd 	beq.w	8003738 <_dtoa_r+0x8f8>
 80035be:	4621      	mov	r1, r4
 80035c0:	462a      	mov	r2, r5
 80035c2:	4648      	mov	r0, r9
 80035c4:	f000 fcce 	bl	8003f64 <__pow5mult>
 80035c8:	9a01      	ldr	r2, [sp, #4]
 80035ca:	4601      	mov	r1, r0
 80035cc:	4604      	mov	r4, r0
 80035ce:	4648      	mov	r0, r9
 80035d0:	f000 fc1e 	bl	8003e10 <__multiply>
 80035d4:	9901      	ldr	r1, [sp, #4]
 80035d6:	4682      	mov	sl, r0
 80035d8:	4648      	mov	r0, r9
 80035da:	f000 fb4f 	bl	8003c7c <_Bfree>
 80035de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035e0:	1b5b      	subs	r3, r3, r5
 80035e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035e4:	f000 80ae 	beq.w	8003744 <_dtoa_r+0x904>
 80035e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035ea:	4651      	mov	r1, sl
 80035ec:	4648      	mov	r0, r9
 80035ee:	f000 fcb9 	bl	8003f64 <__pow5mult>
 80035f2:	9001      	str	r0, [sp, #4]
 80035f4:	2101      	movs	r1, #1
 80035f6:	4648      	mov	r0, r9
 80035f8:	f000 fbf4 	bl	8003de4 <__i2b>
 80035fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035fe:	4605      	mov	r5, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 81d7 	beq.w	80039b4 <_dtoa_r+0xb74>
 8003606:	461a      	mov	r2, r3
 8003608:	4601      	mov	r1, r0
 800360a:	4648      	mov	r0, r9
 800360c:	f000 fcaa 	bl	8003f64 <__pow5mult>
 8003610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	4605      	mov	r5, r0
 8003616:	f300 809d 	bgt.w	8003754 <_dtoa_r+0x914>
 800361a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8094 	bne.w	800374a <_dtoa_r+0x90a>
 8003622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 808e 	bne.w	800374a <_dtoa_r+0x90a>
 800362e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003634:	0d1b      	lsrs	r3, r3, #20
 8003636:	051b      	lsls	r3, r3, #20
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8089 	beq.w	8003750 <_dtoa_r+0x910>
 800363e:	9b08      	ldr	r3, [sp, #32]
 8003640:	3301      	adds	r3, #1
 8003642:	3701      	adds	r7, #1
 8003644:	9308      	str	r3, [sp, #32]
 8003646:	f04f 0a01 	mov.w	sl, #1
 800364a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 81b7 	beq.w	80039c0 <_dtoa_r+0xb80>
 8003652:	692b      	ldr	r3, [r5, #16]
 8003654:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003658:	6918      	ldr	r0, [r3, #16]
 800365a:	f000 fb77 	bl	8003d4c <__hi0bits>
 800365e:	f1c0 0020 	rsb	r0, r0, #32
 8003662:	9b08      	ldr	r3, [sp, #32]
 8003664:	4418      	add	r0, r3
 8003666:	f010 001f 	ands.w	r0, r0, #31
 800366a:	d07e      	beq.n	800376a <_dtoa_r+0x92a>
 800366c:	f1c0 0320 	rsb	r3, r0, #32
 8003670:	2b04      	cmp	r3, #4
 8003672:	dd72      	ble.n	800375a <_dtoa_r+0x91a>
 8003674:	9b08      	ldr	r3, [sp, #32]
 8003676:	f1c0 001c 	rsb	r0, r0, #28
 800367a:	4403      	add	r3, r0
 800367c:	4407      	add	r7, r0
 800367e:	4406      	add	r6, r0
 8003680:	9308      	str	r3, [sp, #32]
 8003682:	2f00      	cmp	r7, #0
 8003684:	dd05      	ble.n	8003692 <_dtoa_r+0x852>
 8003686:	9901      	ldr	r1, [sp, #4]
 8003688:	463a      	mov	r2, r7
 800368a:	4648      	mov	r0, r9
 800368c:	f000 fcc6 	bl	800401c <__lshift>
 8003690:	9001      	str	r0, [sp, #4]
 8003692:	9b08      	ldr	r3, [sp, #32]
 8003694:	2b00      	cmp	r3, #0
 8003696:	dd05      	ble.n	80036a4 <_dtoa_r+0x864>
 8003698:	4629      	mov	r1, r5
 800369a:	461a      	mov	r2, r3
 800369c:	4648      	mov	r0, r9
 800369e:	f000 fcbd 	bl	800401c <__lshift>
 80036a2:	4605      	mov	r5, r0
 80036a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d061      	beq.n	800376e <_dtoa_r+0x92e>
 80036aa:	9801      	ldr	r0, [sp, #4]
 80036ac:	4629      	mov	r1, r5
 80036ae:	f000 fd23 	bl	80040f8 <__mcmp>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	da5b      	bge.n	800376e <_dtoa_r+0x92e>
 80036b6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	9901      	ldr	r1, [sp, #4]
 80036be:	2300      	movs	r3, #0
 80036c0:	220a      	movs	r2, #10
 80036c2:	4648      	mov	r0, r9
 80036c4:	f000 fafc 	bl	8003cc0 <__multadd>
 80036c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036ca:	9001      	str	r0, [sp, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8179 	beq.w	80039c4 <_dtoa_r+0xb84>
 80036d2:	2300      	movs	r3, #0
 80036d4:	4621      	mov	r1, r4
 80036d6:	220a      	movs	r2, #10
 80036d8:	4648      	mov	r0, r9
 80036da:	f000 faf1 	bl	8003cc0 <__multadd>
 80036de:	9b05      	ldr	r3, [sp, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	4604      	mov	r4, r0
 80036e4:	dc72      	bgt.n	80037cc <_dtoa_r+0x98c>
 80036e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	dc49      	bgt.n	8003780 <_dtoa_r+0x940>
 80036ec:	e06e      	b.n	80037cc <_dtoa_r+0x98c>
 80036ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80036f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80036f4:	e743      	b.n	800357e <_dtoa_r+0x73e>
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	1e5d      	subs	r5, r3, #1
 80036fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036fc:	42ab      	cmp	r3, r5
 80036fe:	db0d      	blt.n	800371c <_dtoa_r+0x8dc>
 8003700:	1b5d      	subs	r5, r3, r5
 8003702:	9b04      	ldr	r3, [sp, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f6bf af3b 	bge.w	8003580 <_dtoa_r+0x740>
 800370a:	9b04      	ldr	r3, [sp, #16]
 800370c:	1afe      	subs	r6, r7, r3
 800370e:	2300      	movs	r3, #0
 8003710:	e737      	b.n	8003582 <_dtoa_r+0x742>
 8003712:	bf00      	nop
 8003714:	3fe00000 	.word	0x3fe00000
 8003718:	40240000 	.word	0x40240000
 800371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800371e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003720:	9509      	str	r5, [sp, #36]	@ 0x24
 8003722:	1aeb      	subs	r3, r5, r3
 8003724:	441a      	add	r2, r3
 8003726:	920d      	str	r2, [sp, #52]	@ 0x34
 8003728:	9b04      	ldr	r3, [sp, #16]
 800372a:	463e      	mov	r6, r7
 800372c:	2500      	movs	r5, #0
 800372e:	e728      	b.n	8003582 <_dtoa_r+0x742>
 8003730:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003732:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8003734:	463e      	mov	r6, r7
 8003736:	e72d      	b.n	8003594 <_dtoa_r+0x754>
 8003738:	f8dd a004 	ldr.w	sl, [sp, #4]
 800373c:	e754      	b.n	80035e8 <_dtoa_r+0x7a8>
 800373e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003740:	9901      	ldr	r1, [sp, #4]
 8003742:	e753      	b.n	80035ec <_dtoa_r+0x7ac>
 8003744:	f8cd a004 	str.w	sl, [sp, #4]
 8003748:	e754      	b.n	80035f4 <_dtoa_r+0x7b4>
 800374a:	f04f 0a00 	mov.w	sl, #0
 800374e:	e77c      	b.n	800364a <_dtoa_r+0x80a>
 8003750:	469a      	mov	sl, r3
 8003752:	e77a      	b.n	800364a <_dtoa_r+0x80a>
 8003754:	f04f 0a00 	mov.w	sl, #0
 8003758:	e77b      	b.n	8003652 <_dtoa_r+0x812>
 800375a:	d092      	beq.n	8003682 <_dtoa_r+0x842>
 800375c:	9a08      	ldr	r2, [sp, #32]
 800375e:	331c      	adds	r3, #28
 8003760:	441a      	add	r2, r3
 8003762:	441f      	add	r7, r3
 8003764:	441e      	add	r6, r3
 8003766:	9208      	str	r2, [sp, #32]
 8003768:	e78b      	b.n	8003682 <_dtoa_r+0x842>
 800376a:	4603      	mov	r3, r0
 800376c:	e7f6      	b.n	800375c <_dtoa_r+0x91c>
 800376e:	9b04      	ldr	r3, [sp, #16]
 8003770:	f8cd 8008 	str.w	r8, [sp, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dc23      	bgt.n	80037c0 <_dtoa_r+0x980>
 8003778:	9305      	str	r3, [sp, #20]
 800377a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800377c:	2b02      	cmp	r3, #2
 800377e:	dd21      	ble.n	80037c4 <_dtoa_r+0x984>
 8003780:	9b05      	ldr	r3, [sp, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f47f adb0 	bne.w	80032e8 <_dtoa_r+0x4a8>
 8003788:	4629      	mov	r1, r5
 800378a:	2205      	movs	r2, #5
 800378c:	4648      	mov	r0, r9
 800378e:	f000 fa97 	bl	8003cc0 <__multadd>
 8003792:	4601      	mov	r1, r0
 8003794:	4605      	mov	r5, r0
 8003796:	9801      	ldr	r0, [sp, #4]
 8003798:	f000 fcae 	bl	80040f8 <__mcmp>
 800379c:	2800      	cmp	r0, #0
 800379e:	f77f ada3 	ble.w	80032e8 <_dtoa_r+0x4a8>
 80037a2:	9e00      	ldr	r6, [sp, #0]
 80037a4:	2331      	movs	r3, #49	@ 0x31
 80037a6:	f806 3b01 	strb.w	r3, [r6], #1
 80037aa:	9b02      	ldr	r3, [sp, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	9302      	str	r3, [sp, #8]
 80037b0:	e59e      	b.n	80032f0 <_dtoa_r+0x4b0>
 80037b2:	4635      	mov	r5, r6
 80037b4:	462c      	mov	r4, r5
 80037b6:	e7f4      	b.n	80037a2 <_dtoa_r+0x962>
 80037b8:	9d04      	ldr	r5, [sp, #16]
 80037ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80037be:	e7f9      	b.n	80037b4 <_dtoa_r+0x974>
 80037c0:	9b04      	ldr	r3, [sp, #16]
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8100 	beq.w	80039cc <_dtoa_r+0xb8c>
 80037cc:	2e00      	cmp	r6, #0
 80037ce:	dd05      	ble.n	80037dc <_dtoa_r+0x99c>
 80037d0:	4621      	mov	r1, r4
 80037d2:	4632      	mov	r2, r6
 80037d4:	4648      	mov	r0, r9
 80037d6:	f000 fc21 	bl	800401c <__lshift>
 80037da:	4604      	mov	r4, r0
 80037dc:	f1ba 0f00 	cmp.w	sl, #0
 80037e0:	d05a      	beq.n	8003898 <_dtoa_r+0xa58>
 80037e2:	6861      	ldr	r1, [r4, #4]
 80037e4:	4648      	mov	r0, r9
 80037e6:	f000 fa0b 	bl	8003c00 <_Balloc>
 80037ea:	4606      	mov	r6, r0
 80037ec:	b928      	cbnz	r0, 80037fa <_dtoa_r+0x9ba>
 80037ee:	4b82      	ldr	r3, [pc, #520]	@ (80039f8 <_dtoa_r+0xbb8>)
 80037f0:	4602      	mov	r2, r0
 80037f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80037f6:	f7ff bb3a 	b.w	8002e6e <_dtoa_r+0x2e>
 80037fa:	6922      	ldr	r2, [r4, #16]
 80037fc:	3202      	adds	r2, #2
 80037fe:	0092      	lsls	r2, r2, #2
 8003800:	f104 010c 	add.w	r1, r4, #12
 8003804:	300c      	adds	r0, #12
 8003806:	f000 ffff 	bl	8004808 <memcpy>
 800380a:	2201      	movs	r2, #1
 800380c:	4631      	mov	r1, r6
 800380e:	4648      	mov	r0, r9
 8003810:	f000 fc04 	bl	800401c <__lshift>
 8003814:	4607      	mov	r7, r0
 8003816:	9b00      	ldr	r3, [sp, #0]
 8003818:	9a00      	ldr	r2, [sp, #0]
 800381a:	f103 0b01 	add.w	fp, r3, #1
 800381e:	9b05      	ldr	r3, [sp, #20]
 8003820:	4413      	add	r3, r2
 8003822:	9306      	str	r3, [sp, #24]
 8003824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	9308      	str	r3, [sp, #32]
 800382c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8003830:	4629      	mov	r1, r5
 8003832:	9801      	ldr	r0, [sp, #4]
 8003834:	9304      	str	r3, [sp, #16]
 8003836:	f7ff fa7a 	bl	8002d2e <quorem>
 800383a:	4621      	mov	r1, r4
 800383c:	9005      	str	r0, [sp, #20]
 800383e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8003842:	9801      	ldr	r0, [sp, #4]
 8003844:	f000 fc58 	bl	80040f8 <__mcmp>
 8003848:	463a      	mov	r2, r7
 800384a:	4680      	mov	r8, r0
 800384c:	4629      	mov	r1, r5
 800384e:	4648      	mov	r0, r9
 8003850:	f000 fc6e 	bl	8004130 <__mdiff>
 8003854:	68c2      	ldr	r2, [r0, #12]
 8003856:	4606      	mov	r6, r0
 8003858:	bb02      	cbnz	r2, 800389c <_dtoa_r+0xa5c>
 800385a:	4601      	mov	r1, r0
 800385c:	9801      	ldr	r0, [sp, #4]
 800385e:	f000 fc4b 	bl	80040f8 <__mcmp>
 8003862:	4602      	mov	r2, r0
 8003864:	4631      	mov	r1, r6
 8003866:	4648      	mov	r0, r9
 8003868:	9209      	str	r2, [sp, #36]	@ 0x24
 800386a:	f000 fa07 	bl	8003c7c <_Bfree>
 800386e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8003872:	ea42 0103 	orr.w	r1, r2, r3
 8003876:	9b08      	ldr	r3, [sp, #32]
 8003878:	4319      	orrs	r1, r3
 800387a:	465e      	mov	r6, fp
 800387c:	d110      	bne.n	80038a0 <_dtoa_r+0xa60>
 800387e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8003882:	d02b      	beq.n	80038dc <_dtoa_r+0xa9c>
 8003884:	f1b8 0f00 	cmp.w	r8, #0
 8003888:	dd02      	ble.n	8003890 <_dtoa_r+0xa50>
 800388a:	9b05      	ldr	r3, [sp, #20]
 800388c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	f883 a000 	strb.w	sl, [r3]
 8003896:	e52d      	b.n	80032f4 <_dtoa_r+0x4b4>
 8003898:	4627      	mov	r7, r4
 800389a:	e7bc      	b.n	8003816 <_dtoa_r+0x9d6>
 800389c:	2201      	movs	r2, #1
 800389e:	e7e1      	b.n	8003864 <_dtoa_r+0xa24>
 80038a0:	f1b8 0f00 	cmp.w	r8, #0
 80038a4:	db06      	blt.n	80038b4 <_dtoa_r+0xa74>
 80038a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038a8:	ea48 0803 	orr.w	r8, r8, r3
 80038ac:	9b08      	ldr	r3, [sp, #32]
 80038ae:	ea58 0803 	orrs.w	r8, r8, r3
 80038b2:	d120      	bne.n	80038f6 <_dtoa_r+0xab6>
 80038b4:	2a00      	cmp	r2, #0
 80038b6:	ddeb      	ble.n	8003890 <_dtoa_r+0xa50>
 80038b8:	9901      	ldr	r1, [sp, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	4648      	mov	r0, r9
 80038be:	f000 fbad 	bl	800401c <__lshift>
 80038c2:	4629      	mov	r1, r5
 80038c4:	9001      	str	r0, [sp, #4]
 80038c6:	f000 fc17 	bl	80040f8 <__mcmp>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	dc03      	bgt.n	80038d6 <_dtoa_r+0xa96>
 80038ce:	d1df      	bne.n	8003890 <_dtoa_r+0xa50>
 80038d0:	f01a 0f01 	tst.w	sl, #1
 80038d4:	d0dc      	beq.n	8003890 <_dtoa_r+0xa50>
 80038d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80038da:	d1d6      	bne.n	800388a <_dtoa_r+0xa4a>
 80038dc:	9a04      	ldr	r2, [sp, #16]
 80038de:	2339      	movs	r3, #57	@ 0x39
 80038e0:	7013      	strb	r3, [r2, #0]
 80038e2:	4633      	mov	r3, r6
 80038e4:	461e      	mov	r6, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80038ec:	2a39      	cmp	r2, #57	@ 0x39
 80038ee:	d052      	beq.n	8003996 <_dtoa_r+0xb56>
 80038f0:	3201      	adds	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e4fe      	b.n	80032f4 <_dtoa_r+0x4b4>
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	dd07      	ble.n	800390a <_dtoa_r+0xaca>
 80038fa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80038fe:	d0ed      	beq.n	80038dc <_dtoa_r+0xa9c>
 8003900:	9a04      	ldr	r2, [sp, #16]
 8003902:	f10a 0301 	add.w	r3, sl, #1
 8003906:	7013      	strb	r3, [r2, #0]
 8003908:	e4f4      	b.n	80032f4 <_dtoa_r+0x4b4>
 800390a:	9b06      	ldr	r3, [sp, #24]
 800390c:	f80b ac01 	strb.w	sl, [fp, #-1]
 8003910:	455b      	cmp	r3, fp
 8003912:	d02a      	beq.n	800396a <_dtoa_r+0xb2a>
 8003914:	9901      	ldr	r1, [sp, #4]
 8003916:	2300      	movs	r3, #0
 8003918:	220a      	movs	r2, #10
 800391a:	4648      	mov	r0, r9
 800391c:	f000 f9d0 	bl	8003cc0 <__multadd>
 8003920:	42bc      	cmp	r4, r7
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	f04f 020a 	mov.w	r2, #10
 800392c:	4621      	mov	r1, r4
 800392e:	4648      	mov	r0, r9
 8003930:	d106      	bne.n	8003940 <_dtoa_r+0xb00>
 8003932:	f000 f9c5 	bl	8003cc0 <__multadd>
 8003936:	4604      	mov	r4, r0
 8003938:	4607      	mov	r7, r0
 800393a:	f10b 0b01 	add.w	fp, fp, #1
 800393e:	e775      	b.n	800382c <_dtoa_r+0x9ec>
 8003940:	f000 f9be 	bl	8003cc0 <__multadd>
 8003944:	4639      	mov	r1, r7
 8003946:	4604      	mov	r4, r0
 8003948:	2300      	movs	r3, #0
 800394a:	220a      	movs	r2, #10
 800394c:	4648      	mov	r0, r9
 800394e:	f000 f9b7 	bl	8003cc0 <__multadd>
 8003952:	4607      	mov	r7, r0
 8003954:	e7f1      	b.n	800393a <_dtoa_r+0xafa>
 8003956:	9b05      	ldr	r3, [sp, #20]
 8003958:	1e5e      	subs	r6, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	9b00      	ldr	r3, [sp, #0]
 800395e:	bfd8      	it	le
 8003960:	2600      	movle	r6, #0
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	4627      	mov	r7, r4
 8003966:	4416      	add	r6, r2
 8003968:	2400      	movs	r4, #0
 800396a:	9901      	ldr	r1, [sp, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	4648      	mov	r0, r9
 8003970:	f000 fb54 	bl	800401c <__lshift>
 8003974:	4629      	mov	r1, r5
 8003976:	9001      	str	r0, [sp, #4]
 8003978:	f000 fbbe 	bl	80040f8 <__mcmp>
 800397c:	2800      	cmp	r0, #0
 800397e:	dcb0      	bgt.n	80038e2 <_dtoa_r+0xaa2>
 8003980:	d102      	bne.n	8003988 <_dtoa_r+0xb48>
 8003982:	f01a 0f01 	tst.w	sl, #1
 8003986:	d1ac      	bne.n	80038e2 <_dtoa_r+0xaa2>
 8003988:	4633      	mov	r3, r6
 800398a:	461e      	mov	r6, r3
 800398c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003990:	2a30      	cmp	r2, #48	@ 0x30
 8003992:	d0fa      	beq.n	800398a <_dtoa_r+0xb4a>
 8003994:	e4ae      	b.n	80032f4 <_dtoa_r+0x4b4>
 8003996:	9a00      	ldr	r2, [sp, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1a3      	bne.n	80038e4 <_dtoa_r+0xaa4>
 800399c:	9b02      	ldr	r3, [sp, #8]
 800399e:	3301      	adds	r3, #1
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	2331      	movs	r3, #49	@ 0x31
 80039a4:	e7af      	b.n	8003906 <_dtoa_r+0xac6>
 80039a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f aa94 	bne.w	8002ed6 <_dtoa_r+0x96>
 80039ae:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <_dtoa_r+0xbbc>)
 80039b0:	f7ff bab3 	b.w	8002f1a <_dtoa_r+0xda>
 80039b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f77f ae2f 	ble.w	800361a <_dtoa_r+0x7da>
 80039bc:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80039c0:	2001      	movs	r0, #1
 80039c2:	e64e      	b.n	8003662 <_dtoa_r+0x822>
 80039c4:	9b05      	ldr	r3, [sp, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f77f aed7 	ble.w	800377a <_dtoa_r+0x93a>
 80039cc:	9e00      	ldr	r6, [sp, #0]
 80039ce:	9801      	ldr	r0, [sp, #4]
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7ff f9ac 	bl	8002d2e <quorem>
 80039d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80039da:	9b00      	ldr	r3, [sp, #0]
 80039dc:	f806 ab01 	strb.w	sl, [r6], #1
 80039e0:	1af2      	subs	r2, r6, r3
 80039e2:	9b05      	ldr	r3, [sp, #20]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	ddb6      	ble.n	8003956 <_dtoa_r+0xb16>
 80039e8:	9901      	ldr	r1, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	220a      	movs	r2, #10
 80039ee:	4648      	mov	r0, r9
 80039f0:	f000 f966 	bl	8003cc0 <__multadd>
 80039f4:	9001      	str	r0, [sp, #4]
 80039f6:	e7ea      	b.n	80039ce <_dtoa_r+0xb8e>
 80039f8:	08004dae 	.word	0x08004dae
 80039fc:	08004d08 	.word	0x08004d08

08003a00 <_free_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4605      	mov	r5, r0
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d041      	beq.n	8003a8c <_free_r+0x8c>
 8003a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a0c:	1f0c      	subs	r4, r1, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bfb8      	it	lt
 8003a12:	18e4      	addlt	r4, r4, r3
 8003a14:	f000 f8e8 	bl	8003be8 <__malloc_lock>
 8003a18:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <_free_r+0x90>)
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	b933      	cbnz	r3, 8003a2c <_free_r+0x2c>
 8003a1e:	6063      	str	r3, [r4, #4]
 8003a20:	6014      	str	r4, [r2, #0]
 8003a22:	4628      	mov	r0, r5
 8003a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a28:	f000 b8e4 	b.w	8003bf4 <__malloc_unlock>
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	d908      	bls.n	8003a42 <_free_r+0x42>
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	1821      	adds	r1, r4, r0
 8003a34:	428b      	cmp	r3, r1
 8003a36:	bf01      	itttt	eq
 8003a38:	6819      	ldreq	r1, [r3, #0]
 8003a3a:	685b      	ldreq	r3, [r3, #4]
 8003a3c:	1809      	addeq	r1, r1, r0
 8003a3e:	6021      	streq	r1, [r4, #0]
 8003a40:	e7ed      	b.n	8003a1e <_free_r+0x1e>
 8003a42:	461a      	mov	r2, r3
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b10b      	cbz	r3, 8003a4c <_free_r+0x4c>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d9fa      	bls.n	8003a42 <_free_r+0x42>
 8003a4c:	6811      	ldr	r1, [r2, #0]
 8003a4e:	1850      	adds	r0, r2, r1
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d10b      	bne.n	8003a6c <_free_r+0x6c>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	4401      	add	r1, r0
 8003a58:	1850      	adds	r0, r2, r1
 8003a5a:	4283      	cmp	r3, r0
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	d1e0      	bne.n	8003a22 <_free_r+0x22>
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6053      	str	r3, [r2, #4]
 8003a66:	4408      	add	r0, r1
 8003a68:	6010      	str	r0, [r2, #0]
 8003a6a:	e7da      	b.n	8003a22 <_free_r+0x22>
 8003a6c:	d902      	bls.n	8003a74 <_free_r+0x74>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	e7d6      	b.n	8003a22 <_free_r+0x22>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	1821      	adds	r1, r4, r0
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf04      	itt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	bf04      	itt	eq
 8003a84:	1809      	addeq	r1, r1, r0
 8003a86:	6021      	streq	r1, [r4, #0]
 8003a88:	6054      	str	r4, [r2, #4]
 8003a8a:	e7ca      	b.n	8003a22 <_free_r+0x22>
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
 8003a8e:	bf00      	nop
 8003a90:	200003dc 	.word	0x200003dc

08003a94 <malloc>:
 8003a94:	4b02      	ldr	r3, [pc, #8]	@ (8003aa0 <malloc+0xc>)
 8003a96:	4601      	mov	r1, r0
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f000 b825 	b.w	8003ae8 <_malloc_r>
 8003a9e:	bf00      	nop
 8003aa0:	20000018 	.word	0x20000018

08003aa4 <sbrk_aligned>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8003ae4 <sbrk_aligned+0x40>)
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	6831      	ldr	r1, [r6, #0]
 8003aac:	4605      	mov	r5, r0
 8003aae:	b911      	cbnz	r1, 8003ab6 <sbrk_aligned+0x12>
 8003ab0:	f000 fe9a 	bl	80047e8 <_sbrk_r>
 8003ab4:	6030      	str	r0, [r6, #0]
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 fe95 	bl	80047e8 <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d103      	bne.n	8003aca <sbrk_aligned+0x26>
 8003ac2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	1cc4      	adds	r4, r0, #3
 8003acc:	f024 0403 	bic.w	r4, r4, #3
 8003ad0:	42a0      	cmp	r0, r4
 8003ad2:	d0f8      	beq.n	8003ac6 <sbrk_aligned+0x22>
 8003ad4:	1a21      	subs	r1, r4, r0
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f000 fe86 	bl	80047e8 <_sbrk_r>
 8003adc:	3001      	adds	r0, #1
 8003ade:	d1f2      	bne.n	8003ac6 <sbrk_aligned+0x22>
 8003ae0:	e7ef      	b.n	8003ac2 <sbrk_aligned+0x1e>
 8003ae2:	bf00      	nop
 8003ae4:	200003d8 	.word	0x200003d8

08003ae8 <_malloc_r>:
 8003ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aec:	1ccd      	adds	r5, r1, #3
 8003aee:	f025 0503 	bic.w	r5, r5, #3
 8003af2:	3508      	adds	r5, #8
 8003af4:	2d0c      	cmp	r5, #12
 8003af6:	bf38      	it	cc
 8003af8:	250c      	movcc	r5, #12
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	4606      	mov	r6, r0
 8003afe:	db01      	blt.n	8003b04 <_malloc_r+0x1c>
 8003b00:	42a9      	cmp	r1, r5
 8003b02:	d904      	bls.n	8003b0e <_malloc_r+0x26>
 8003b04:	230c      	movs	r3, #12
 8003b06:	6033      	str	r3, [r6, #0]
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003be4 <_malloc_r+0xfc>
 8003b12:	f000 f869 	bl	8003be8 <__malloc_lock>
 8003b16:	f8d8 3000 	ldr.w	r3, [r8]
 8003b1a:	461c      	mov	r4, r3
 8003b1c:	bb44      	cbnz	r4, 8003b70 <_malloc_r+0x88>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4630      	mov	r0, r6
 8003b22:	f7ff ffbf 	bl	8003aa4 <sbrk_aligned>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	4604      	mov	r4, r0
 8003b2a:	d158      	bne.n	8003bde <_malloc_r+0xf6>
 8003b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b30:	4627      	mov	r7, r4
 8003b32:	2f00      	cmp	r7, #0
 8003b34:	d143      	bne.n	8003bbe <_malloc_r+0xd6>
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d04b      	beq.n	8003bd2 <_malloc_r+0xea>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	eb04 0903 	add.w	r9, r4, r3
 8003b44:	f000 fe50 	bl	80047e8 <_sbrk_r>
 8003b48:	4581      	cmp	r9, r0
 8003b4a:	d142      	bne.n	8003bd2 <_malloc_r+0xea>
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	1a6d      	subs	r5, r5, r1
 8003b50:	4629      	mov	r1, r5
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7ff ffa6 	bl	8003aa4 <sbrk_aligned>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d03a      	beq.n	8003bd2 <_malloc_r+0xea>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	442b      	add	r3, r5
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	f8d8 3000 	ldr.w	r3, [r8]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	bb62      	cbnz	r2, 8003bc4 <_malloc_r+0xdc>
 8003b6a:	f8c8 7000 	str.w	r7, [r8]
 8003b6e:	e00f      	b.n	8003b90 <_malloc_r+0xa8>
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	1b52      	subs	r2, r2, r5
 8003b74:	d420      	bmi.n	8003bb8 <_malloc_r+0xd0>
 8003b76:	2a0b      	cmp	r2, #11
 8003b78:	d917      	bls.n	8003baa <_malloc_r+0xc2>
 8003b7a:	1961      	adds	r1, r4, r5
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	6025      	str	r5, [r4, #0]
 8003b80:	bf18      	it	ne
 8003b82:	6059      	strne	r1, [r3, #4]
 8003b84:	6863      	ldr	r3, [r4, #4]
 8003b86:	bf08      	it	eq
 8003b88:	f8c8 1000 	streq.w	r1, [r8]
 8003b8c:	5162      	str	r2, [r4, r5]
 8003b8e:	604b      	str	r3, [r1, #4]
 8003b90:	4630      	mov	r0, r6
 8003b92:	f000 f82f 	bl	8003bf4 <__malloc_unlock>
 8003b96:	f104 000b 	add.w	r0, r4, #11
 8003b9a:	1d23      	adds	r3, r4, #4
 8003b9c:	f020 0007 	bic.w	r0, r0, #7
 8003ba0:	1ac2      	subs	r2, r0, r3
 8003ba2:	bf1c      	itt	ne
 8003ba4:	1a1b      	subne	r3, r3, r0
 8003ba6:	50a3      	strne	r3, [r4, r2]
 8003ba8:	e7af      	b.n	8003b0a <_malloc_r+0x22>
 8003baa:	6862      	ldr	r2, [r4, #4]
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	bf0c      	ite	eq
 8003bb0:	f8c8 2000 	streq.w	r2, [r8]
 8003bb4:	605a      	strne	r2, [r3, #4]
 8003bb6:	e7eb      	b.n	8003b90 <_malloc_r+0xa8>
 8003bb8:	4623      	mov	r3, r4
 8003bba:	6864      	ldr	r4, [r4, #4]
 8003bbc:	e7ae      	b.n	8003b1c <_malloc_r+0x34>
 8003bbe:	463c      	mov	r4, r7
 8003bc0:	687f      	ldr	r7, [r7, #4]
 8003bc2:	e7b6      	b.n	8003b32 <_malloc_r+0x4a>
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	d1fb      	bne.n	8003bc4 <_malloc_r+0xdc>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6053      	str	r3, [r2, #4]
 8003bd0:	e7de      	b.n	8003b90 <_malloc_r+0xa8>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	6033      	str	r3, [r6, #0]
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f000 f80c 	bl	8003bf4 <__malloc_unlock>
 8003bdc:	e794      	b.n	8003b08 <_malloc_r+0x20>
 8003bde:	6005      	str	r5, [r0, #0]
 8003be0:	e7d6      	b.n	8003b90 <_malloc_r+0xa8>
 8003be2:	bf00      	nop
 8003be4:	200003dc 	.word	0x200003dc

08003be8 <__malloc_lock>:
 8003be8:	4801      	ldr	r0, [pc, #4]	@ (8003bf0 <__malloc_lock+0x8>)
 8003bea:	f7ff b89e 	b.w	8002d2a <__retarget_lock_acquire_recursive>
 8003bee:	bf00      	nop
 8003bf0:	200003d4 	.word	0x200003d4

08003bf4 <__malloc_unlock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	@ (8003bfc <__malloc_unlock+0x8>)
 8003bf6:	f7ff b899 	b.w	8002d2c <__retarget_lock_release_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200003d4 	.word	0x200003d4

08003c00 <_Balloc>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	69c4      	ldr	r4, [r0, #28]
 8003c04:	4605      	mov	r5, r0
 8003c06:	460e      	mov	r6, r1
 8003c08:	b984      	cbnz	r4, 8003c2c <_Balloc+0x2c>
 8003c0a:	2010      	movs	r0, #16
 8003c0c:	f7ff ff42 	bl	8003a94 <malloc>
 8003c10:	4604      	mov	r4, r0
 8003c12:	61e8      	str	r0, [r5, #28]
 8003c14:	b928      	cbnz	r0, 8003c22 <_Balloc+0x22>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b16      	ldr	r3, [pc, #88]	@ (8003c74 <_Balloc+0x74>)
 8003c1a:	4817      	ldr	r0, [pc, #92]	@ (8003c78 <_Balloc+0x78>)
 8003c1c:	216b      	movs	r1, #107	@ 0x6b
 8003c1e:	f000 fe01 	bl	8004824 <__assert_func>
 8003c22:	2300      	movs	r3, #0
 8003c24:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8003c28:	6003      	str	r3, [r0, #0]
 8003c2a:	60c3      	str	r3, [r0, #12]
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	b953      	cbnz	r3, 8003c46 <_Balloc+0x46>
 8003c30:	2221      	movs	r2, #33	@ 0x21
 8003c32:	2104      	movs	r1, #4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 fe13 	bl	8004860 <_calloc_r>
 8003c3a:	69eb      	ldr	r3, [r5, #28]
 8003c3c:	60e0      	str	r0, [r4, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	b90b      	cbnz	r3, 8003c46 <_Balloc+0x46>
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
 8003c46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003c4a:	b130      	cbz	r0, 8003c5a <_Balloc+0x5a>
 8003c4c:	6802      	ldr	r2, [r0, #0]
 8003c4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003c52:	2300      	movs	r3, #0
 8003c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003c58:	e7f4      	b.n	8003c44 <_Balloc+0x44>
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f406 	lsl.w	r4, r1, r6
 8003c60:	1d62      	adds	r2, r4, #5
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4628      	mov	r0, r5
 8003c66:	f000 fdfb 	bl	8004860 <_calloc_r>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d0e9      	beq.n	8003c42 <_Balloc+0x42>
 8003c6e:	e9c0 6401 	strd	r6, r4, [r0, #4]
 8003c72:	e7ee      	b.n	8003c52 <_Balloc+0x52>
 8003c74:	08004d15 	.word	0x08004d15
 8003c78:	08004dbf 	.word	0x08004dbf

08003c7c <_Bfree>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	69c6      	ldr	r6, [r0, #28]
 8003c80:	4605      	mov	r5, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	b976      	cbnz	r6, 8003ca4 <_Bfree+0x28>
 8003c86:	2010      	movs	r0, #16
 8003c88:	f7ff ff04 	bl	8003a94 <malloc>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	61e8      	str	r0, [r5, #28]
 8003c90:	b920      	cbnz	r0, 8003c9c <_Bfree+0x20>
 8003c92:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <_Bfree+0x3c>)
 8003c94:	4809      	ldr	r0, [pc, #36]	@ (8003cbc <_Bfree+0x40>)
 8003c96:	218f      	movs	r1, #143	@ 0x8f
 8003c98:	f000 fdc4 	bl	8004824 <__assert_func>
 8003c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ca0:	6006      	str	r6, [r0, #0]
 8003ca2:	60c6      	str	r6, [r0, #12]
 8003ca4:	b13c      	cbz	r4, 8003cb6 <_Bfree+0x3a>
 8003ca6:	69eb      	ldr	r3, [r5, #28]
 8003ca8:	6862      	ldr	r2, [r4, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cb0:	6021      	str	r1, [r4, #0]
 8003cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	08004d15 	.word	0x08004d15
 8003cbc:	08004dbf 	.word	0x08004dbf

08003cc0 <__multadd>:
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	690d      	ldr	r5, [r1, #16]
 8003cc6:	4607      	mov	r7, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	461e      	mov	r6, r3
 8003ccc:	f101 0c14 	add.w	ip, r1, #20
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f8dc 3000 	ldr.w	r3, [ip]
 8003cd6:	b299      	uxth	r1, r3
 8003cd8:	fb02 6101 	mla	r1, r2, r1, r6
 8003cdc:	0c1e      	lsrs	r6, r3, #16
 8003cde:	0c0b      	lsrs	r3, r1, #16
 8003ce0:	fb02 3306 	mla	r3, r2, r6, r3
 8003ce4:	b289      	uxth	r1, r1
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003cec:	4285      	cmp	r5, r0
 8003cee:	f84c 1b04 	str.w	r1, [ip], #4
 8003cf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003cf6:	dcec      	bgt.n	8003cd2 <__multadd+0x12>
 8003cf8:	b30e      	cbz	r6, 8003d3e <__multadd+0x7e>
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	42ab      	cmp	r3, r5
 8003cfe:	dc19      	bgt.n	8003d34 <__multadd+0x74>
 8003d00:	6861      	ldr	r1, [r4, #4]
 8003d02:	4638      	mov	r0, r7
 8003d04:	3101      	adds	r1, #1
 8003d06:	f7ff ff7b 	bl	8003c00 <_Balloc>
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	b928      	cbnz	r0, 8003d1a <__multadd+0x5a>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <__multadd+0x84>)
 8003d12:	480d      	ldr	r0, [pc, #52]	@ (8003d48 <__multadd+0x88>)
 8003d14:	21ba      	movs	r1, #186	@ 0xba
 8003d16:	f000 fd85 	bl	8004824 <__assert_func>
 8003d1a:	6922      	ldr	r2, [r4, #16]
 8003d1c:	3202      	adds	r2, #2
 8003d1e:	f104 010c 	add.w	r1, r4, #12
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	300c      	adds	r0, #12
 8003d26:	f000 fd6f 	bl	8004808 <memcpy>
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f7ff ffa5 	bl	8003c7c <_Bfree>
 8003d32:	4644      	mov	r4, r8
 8003d34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003d38:	3501      	adds	r5, #1
 8003d3a:	615e      	str	r6, [r3, #20]
 8003d3c:	6125      	str	r5, [r4, #16]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d44:	08004dae 	.word	0x08004dae
 8003d48:	08004dbf 	.word	0x08004dbf

08003d4c <__hi0bits>:
 8003d4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003d50:	4603      	mov	r3, r0
 8003d52:	bf36      	itet	cc
 8003d54:	0403      	lslcc	r3, r0, #16
 8003d56:	2000      	movcs	r0, #0
 8003d58:	2010      	movcc	r0, #16
 8003d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d5e:	bf3c      	itt	cc
 8003d60:	021b      	lslcc	r3, r3, #8
 8003d62:	3008      	addcc	r0, #8
 8003d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d68:	bf3c      	itt	cc
 8003d6a:	011b      	lslcc	r3, r3, #4
 8003d6c:	3004      	addcc	r0, #4
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d72:	bf3c      	itt	cc
 8003d74:	009b      	lslcc	r3, r3, #2
 8003d76:	3002      	addcc	r0, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db05      	blt.n	8003d88 <__hi0bits+0x3c>
 8003d7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003d80:	f100 0001 	add.w	r0, r0, #1
 8003d84:	bf08      	it	eq
 8003d86:	2020      	moveq	r0, #32
 8003d88:	4770      	bx	lr

08003d8a <__lo0bits>:
 8003d8a:	6803      	ldr	r3, [r0, #0]
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	f013 0007 	ands.w	r0, r3, #7
 8003d92:	d00b      	beq.n	8003dac <__lo0bits+0x22>
 8003d94:	07d9      	lsls	r1, r3, #31
 8003d96:	d421      	bmi.n	8003ddc <__lo0bits+0x52>
 8003d98:	0798      	lsls	r0, r3, #30
 8003d9a:	bf49      	itett	mi
 8003d9c:	085b      	lsrmi	r3, r3, #1
 8003d9e:	089b      	lsrpl	r3, r3, #2
 8003da0:	2001      	movmi	r0, #1
 8003da2:	6013      	strmi	r3, [r2, #0]
 8003da4:	bf5c      	itt	pl
 8003da6:	6013      	strpl	r3, [r2, #0]
 8003da8:	2002      	movpl	r0, #2
 8003daa:	4770      	bx	lr
 8003dac:	b299      	uxth	r1, r3
 8003dae:	b909      	cbnz	r1, 8003db4 <__lo0bits+0x2a>
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	2010      	movs	r0, #16
 8003db4:	b2d9      	uxtb	r1, r3
 8003db6:	b909      	cbnz	r1, 8003dbc <__lo0bits+0x32>
 8003db8:	3008      	adds	r0, #8
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	0719      	lsls	r1, r3, #28
 8003dbe:	bf04      	itt	eq
 8003dc0:	091b      	lsreq	r3, r3, #4
 8003dc2:	3004      	addeq	r0, #4
 8003dc4:	0799      	lsls	r1, r3, #30
 8003dc6:	bf04      	itt	eq
 8003dc8:	089b      	lsreq	r3, r3, #2
 8003dca:	3002      	addeq	r0, #2
 8003dcc:	07d9      	lsls	r1, r3, #31
 8003dce:	d403      	bmi.n	8003dd8 <__lo0bits+0x4e>
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	f100 0001 	add.w	r0, r0, #1
 8003dd6:	d003      	beq.n	8003de0 <__lo0bits+0x56>
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4770      	bx	lr
 8003ddc:	2000      	movs	r0, #0
 8003dde:	4770      	bx	lr
 8003de0:	2020      	movs	r0, #32
 8003de2:	4770      	bx	lr

08003de4 <__i2b>:
 8003de4:	b510      	push	{r4, lr}
 8003de6:	460c      	mov	r4, r1
 8003de8:	2101      	movs	r1, #1
 8003dea:	f7ff ff09 	bl	8003c00 <_Balloc>
 8003dee:	4602      	mov	r2, r0
 8003df0:	b928      	cbnz	r0, 8003dfe <__i2b+0x1a>
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <__i2b+0x24>)
 8003df4:	4805      	ldr	r0, [pc, #20]	@ (8003e0c <__i2b+0x28>)
 8003df6:	f240 1145 	movw	r1, #325	@ 0x145
 8003dfa:	f000 fd13 	bl	8004824 <__assert_func>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	6144      	str	r4, [r0, #20]
 8003e02:	6103      	str	r3, [r0, #16]
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	08004dae 	.word	0x08004dae
 8003e0c:	08004dbf 	.word	0x08004dbf

08003e10 <__multiply>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8003e18:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003e1c:	45d1      	cmp	r9, sl
 8003e1e:	b085      	sub	sp, #20
 8003e20:	4688      	mov	r8, r1
 8003e22:	4614      	mov	r4, r2
 8003e24:	db04      	blt.n	8003e30 <__multiply+0x20>
 8003e26:	4653      	mov	r3, sl
 8003e28:	460c      	mov	r4, r1
 8003e2a:	46ca      	mov	sl, r9
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	68a3      	ldr	r3, [r4, #8]
 8003e32:	6861      	ldr	r1, [r4, #4]
 8003e34:	eb0a 0609 	add.w	r6, sl, r9
 8003e38:	42b3      	cmp	r3, r6
 8003e3a:	bfb8      	it	lt
 8003e3c:	3101      	addlt	r1, #1
 8003e3e:	f7ff fedf 	bl	8003c00 <_Balloc>
 8003e42:	b930      	cbnz	r0, 8003e52 <__multiply+0x42>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b45      	ldr	r3, [pc, #276]	@ (8003f5c <__multiply+0x14c>)
 8003e48:	4845      	ldr	r0, [pc, #276]	@ (8003f60 <__multiply+0x150>)
 8003e4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003e4e:	f000 fce9 	bl	8004824 <__assert_func>
 8003e52:	f100 0514 	add.w	r5, r0, #20
 8003e56:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	42bb      	cmp	r3, r7
 8003e60:	d31f      	bcc.n	8003ea2 <__multiply+0x92>
 8003e62:	f104 0c14 	add.w	ip, r4, #20
 8003e66:	f108 0114 	add.w	r1, r8, #20
 8003e6a:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 8003e6e:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	1b1a      	subs	r2, r3, r4
 8003e76:	3a15      	subs	r2, #21
 8003e78:	f022 0203 	bic.w	r2, r2, #3
 8003e7c:	3415      	adds	r4, #21
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	bf88      	it	hi
 8003e82:	2200      	movhi	r2, #0
 8003e84:	9201      	str	r2, [sp, #4]
 8003e86:	9a02      	ldr	r2, [sp, #8]
 8003e88:	9103      	str	r1, [sp, #12]
 8003e8a:	428a      	cmp	r2, r1
 8003e8c:	d80c      	bhi.n	8003ea8 <__multiply+0x98>
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	dd03      	ble.n	8003e9a <__multiply+0x8a>
 8003e92:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05d      	beq.n	8003f56 <__multiply+0x146>
 8003e9a:	6106      	str	r6, [r0, #16]
 8003e9c:	b005      	add	sp, #20
 8003e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea2:	f843 2b04 	str.w	r2, [r3], #4
 8003ea6:	e7da      	b.n	8003e5e <__multiply+0x4e>
 8003ea8:	f8b1 a000 	ldrh.w	sl, [r1]
 8003eac:	f1ba 0f00 	cmp.w	sl, #0
 8003eb0:	d024      	beq.n	8003efc <__multiply+0xec>
 8003eb2:	46e0      	mov	r8, ip
 8003eb4:	46a9      	mov	r9, r5
 8003eb6:	f04f 0e00 	mov.w	lr, #0
 8003eba:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ebe:	f8d9 4000 	ldr.w	r4, [r9]
 8003ec2:	fa1f fb82 	uxth.w	fp, r2
 8003ec6:	b2a4      	uxth	r4, r4
 8003ec8:	fb0a 440b 	mla	r4, sl, fp, r4
 8003ecc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed4:	4474      	add	r4, lr
 8003ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003eda:	fb0a e20b 	mla	r2, sl, fp, lr
 8003ede:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8003ee2:	b2a4      	uxth	r4, r4
 8003ee4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003ee8:	4543      	cmp	r3, r8
 8003eea:	f849 4b04 	str.w	r4, [r9], #4
 8003eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ef2:	d8e2      	bhi.n	8003eba <__multiply+0xaa>
 8003ef4:	9a01      	ldr	r2, [sp, #4]
 8003ef6:	18aa      	adds	r2, r5, r2
 8003ef8:	f8c2 e004 	str.w	lr, [r2, #4]
 8003efc:	9a03      	ldr	r2, [sp, #12]
 8003efe:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8003f02:	3104      	adds	r1, #4
 8003f04:	f1b8 0f00 	cmp.w	r8, #0
 8003f08:	d023      	beq.n	8003f52 <__multiply+0x142>
 8003f0a:	682a      	ldr	r2, [r5, #0]
 8003f0c:	46e6      	mov	lr, ip
 8003f0e:	4691      	mov	r9, r2
 8003f10:	46aa      	mov	sl, r5
 8003f12:	f04f 0b00 	mov.w	fp, #0
 8003f16:	f8be 4000 	ldrh.w	r4, [lr]
 8003f1a:	fb08 b404 	mla	r4, r8, r4, fp
 8003f1e:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 8003f22:	b292      	uxth	r2, r2
 8003f24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f28:	f84a 2b04 	str.w	r2, [sl], #4
 8003f2c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003f30:	f8da 9000 	ldr.w	r9, [sl]
 8003f34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003f38:	fa1f f289 	uxth.w	r2, r9
 8003f3c:	fb08 220b 	mla	r2, r8, fp, r2
 8003f40:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8003f44:	4573      	cmp	r3, lr
 8003f46:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003f4a:	d8e4      	bhi.n	8003f16 <__multiply+0x106>
 8003f4c:	9c01      	ldr	r4, [sp, #4]
 8003f4e:	192c      	adds	r4, r5, r4
 8003f50:	6062      	str	r2, [r4, #4]
 8003f52:	3504      	adds	r5, #4
 8003f54:	e797      	b.n	8003e86 <__multiply+0x76>
 8003f56:	3e01      	subs	r6, #1
 8003f58:	e799      	b.n	8003e8e <__multiply+0x7e>
 8003f5a:	bf00      	nop
 8003f5c:	08004dae 	.word	0x08004dae
 8003f60:	08004dbf 	.word	0x08004dbf

08003f64 <__pow5mult>:
 8003f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f68:	4617      	mov	r7, r2
 8003f6a:	f012 0203 	ands.w	r2, r2, #3
 8003f6e:	4680      	mov	r8, r0
 8003f70:	460d      	mov	r5, r1
 8003f72:	d007      	beq.n	8003f84 <__pow5mult+0x20>
 8003f74:	4c26      	ldr	r4, [pc, #152]	@ (8004010 <__pow5mult+0xac>)
 8003f76:	3a01      	subs	r2, #1
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f7e:	f7ff fe9f 	bl	8003cc0 <__multadd>
 8003f82:	4605      	mov	r5, r0
 8003f84:	10bf      	asrs	r7, r7, #2
 8003f86:	d03f      	beq.n	8004008 <__pow5mult+0xa4>
 8003f88:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8003f8c:	b994      	cbnz	r4, 8003fb4 <__pow5mult+0x50>
 8003f8e:	2010      	movs	r0, #16
 8003f90:	f7ff fd80 	bl	8003a94 <malloc>
 8003f94:	4604      	mov	r4, r0
 8003f96:	f8c8 001c 	str.w	r0, [r8, #28]
 8003f9a:	b930      	cbnz	r0, 8003faa <__pow5mult+0x46>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <__pow5mult+0xb0>)
 8003fa0:	481d      	ldr	r0, [pc, #116]	@ (8004018 <__pow5mult+0xb4>)
 8003fa2:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003fa6:	f000 fc3d 	bl	8004824 <__assert_func>
 8003faa:	2300      	movs	r3, #0
 8003fac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8003fb0:	6003      	str	r3, [r0, #0]
 8003fb2:	60c3      	str	r3, [r0, #12]
 8003fb4:	68a6      	ldr	r6, [r4, #8]
 8003fb6:	b946      	cbnz	r6, 8003fca <__pow5mult+0x66>
 8003fb8:	f240 2171 	movw	r1, #625	@ 0x271
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	f7ff ff11 	bl	8003de4 <__i2b>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60a0      	str	r0, [r4, #8]
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	6003      	str	r3, [r0, #0]
 8003fca:	462c      	mov	r4, r5
 8003fcc:	f04f 0900 	mov.w	r9, #0
 8003fd0:	f007 0301 	and.w	r3, r7, #1
 8003fd4:	107f      	asrs	r7, r7, #1
 8003fd6:	b153      	cbz	r3, 8003fee <__pow5mult+0x8a>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4632      	mov	r2, r6
 8003fdc:	4640      	mov	r0, r8
 8003fde:	f7ff ff17 	bl	8003e10 <__multiply>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff fe48 	bl	8003c7c <_Bfree>
 8003fec:	b167      	cbz	r7, 8004008 <__pow5mult+0xa4>
 8003fee:	6830      	ldr	r0, [r6, #0]
 8003ff0:	b938      	cbnz	r0, 8004002 <__pow5mult+0x9e>
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff ff0a 	bl	8003e10 <__multiply>
 8003ffc:	6030      	str	r0, [r6, #0]
 8003ffe:	f8c0 9000 	str.w	r9, [r0]
 8004002:	4606      	mov	r6, r0
 8004004:	462c      	mov	r4, r5
 8004006:	e7e3      	b.n	8003fd0 <__pow5mult+0x6c>
 8004008:	4628      	mov	r0, r5
 800400a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400e:	bf00      	nop
 8004010:	08004e9c 	.word	0x08004e9c
 8004014:	08004d15 	.word	0x08004d15
 8004018:	08004dbf 	.word	0x08004dbf

0800401c <__lshift>:
 800401c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	460c      	mov	r4, r1
 8004022:	6849      	ldr	r1, [r1, #4]
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800402a:	68a3      	ldr	r3, [r4, #8]
 800402c:	4607      	mov	r7, r0
 800402e:	4615      	mov	r5, r2
 8004030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004034:	f108 0901 	add.w	r9, r8, #1
 8004038:	454b      	cmp	r3, r9
 800403a:	db0b      	blt.n	8004054 <__lshift+0x38>
 800403c:	4638      	mov	r0, r7
 800403e:	f7ff fddf 	bl	8003c00 <_Balloc>
 8004042:	4606      	mov	r6, r0
 8004044:	b948      	cbnz	r0, 800405a <__lshift+0x3e>
 8004046:	4602      	mov	r2, r0
 8004048:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <__lshift+0xd4>)
 800404a:	482a      	ldr	r0, [pc, #168]	@ (80040f4 <__lshift+0xd8>)
 800404c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004050:	f000 fbe8 	bl	8004824 <__assert_func>
 8004054:	3101      	adds	r1, #1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	e7ee      	b.n	8004038 <__lshift+0x1c>
 800405a:	2300      	movs	r3, #0
 800405c:	f100 0c14 	add.w	ip, r0, #20
 8004060:	f100 0210 	add.w	r2, r0, #16
 8004064:	4619      	mov	r1, r3
 8004066:	4553      	cmp	r3, sl
 8004068:	db35      	blt.n	80040d6 <__lshift+0xba>
 800406a:	6922      	ldr	r2, [r4, #16]
 800406c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004070:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004074:	f104 0314 	add.w	r3, r4, #20
 8004078:	f015 0e1f 	ands.w	lr, r5, #31
 800407c:	4661      	mov	r1, ip
 800407e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004082:	d02c      	beq.n	80040de <__lshift+0xc2>
 8004084:	f1ce 0a20 	rsb	sl, lr, #32
 8004088:	2500      	movs	r5, #0
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	468b      	mov	fp, r1
 800408e:	fa00 f00e 	lsl.w	r0, r0, lr
 8004092:	4328      	orrs	r0, r5
 8004094:	f8cb 0000 	str.w	r0, [fp]
 8004098:	f853 5b04 	ldr.w	r5, [r3], #4
 800409c:	429a      	cmp	r2, r3
 800409e:	f101 0104 	add.w	r1, r1, #4
 80040a2:	fa25 f50a 	lsr.w	r5, r5, sl
 80040a6:	d8f0      	bhi.n	800408a <__lshift+0x6e>
 80040a8:	1b13      	subs	r3, r2, r4
 80040aa:	3b15      	subs	r3, #21
 80040ac:	f023 0303 	bic.w	r3, r3, #3
 80040b0:	f104 0115 	add.w	r1, r4, #21
 80040b4:	428a      	cmp	r2, r1
 80040b6:	bf38      	it	cc
 80040b8:	2300      	movcc	r3, #0
 80040ba:	449c      	add	ip, r3
 80040bc:	f8cc 5004 	str.w	r5, [ip, #4]
 80040c0:	b905      	cbnz	r5, 80040c4 <__lshift+0xa8>
 80040c2:	46c1      	mov	r9, r8
 80040c4:	4638      	mov	r0, r7
 80040c6:	f8c6 9010 	str.w	r9, [r6, #16]
 80040ca:	4621      	mov	r1, r4
 80040cc:	f7ff fdd6 	bl	8003c7c <_Bfree>
 80040d0:	4630      	mov	r0, r6
 80040d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80040da:	3301      	adds	r3, #1
 80040dc:	e7c3      	b.n	8004066 <__lshift+0x4a>
 80040de:	f853 5b04 	ldr.w	r5, [r3], #4
 80040e2:	600d      	str	r5, [r1, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	f101 0104 	add.w	r1, r1, #4
 80040ea:	d8f8      	bhi.n	80040de <__lshift+0xc2>
 80040ec:	e7e9      	b.n	80040c2 <__lshift+0xa6>
 80040ee:	bf00      	nop
 80040f0:	08004dae 	.word	0x08004dae
 80040f4:	08004dbf 	.word	0x08004dbf

080040f8 <__mcmp>:
 80040f8:	690a      	ldr	r2, [r1, #16]
 80040fa:	4603      	mov	r3, r0
 80040fc:	6900      	ldr	r0, [r0, #16]
 80040fe:	1a80      	subs	r0, r0, r2
 8004100:	b530      	push	{r4, r5, lr}
 8004102:	d10e      	bne.n	8004122 <__mcmp+0x2a>
 8004104:	3314      	adds	r3, #20
 8004106:	3114      	adds	r1, #20
 8004108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800410c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004118:	4295      	cmp	r5, r2
 800411a:	d003      	beq.n	8004124 <__mcmp+0x2c>
 800411c:	d205      	bcs.n	800412a <__mcmp+0x32>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004122:	bd30      	pop	{r4, r5, pc}
 8004124:	42a3      	cmp	r3, r4
 8004126:	d3f3      	bcc.n	8004110 <__mcmp+0x18>
 8004128:	e7fb      	b.n	8004122 <__mcmp+0x2a>
 800412a:	2001      	movs	r0, #1
 800412c:	e7f9      	b.n	8004122 <__mcmp+0x2a>
	...

08004130 <__mdiff>:
 8004130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	468a      	mov	sl, r1
 8004136:	4606      	mov	r6, r0
 8004138:	4611      	mov	r1, r2
 800413a:	4650      	mov	r0, sl
 800413c:	4614      	mov	r4, r2
 800413e:	f7ff ffdb 	bl	80040f8 <__mcmp>
 8004142:	1e05      	subs	r5, r0, #0
 8004144:	d112      	bne.n	800416c <__mdiff+0x3c>
 8004146:	4629      	mov	r1, r5
 8004148:	4630      	mov	r0, r6
 800414a:	f7ff fd59 	bl	8003c00 <_Balloc>
 800414e:	4602      	mov	r2, r0
 8004150:	b928      	cbnz	r0, 800415e <__mdiff+0x2e>
 8004152:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <__mdiff+0x128>)
 8004154:	f240 2137 	movw	r1, #567	@ 0x237
 8004158:	4840      	ldr	r0, [pc, #256]	@ (800425c <__mdiff+0x12c>)
 800415a:	f000 fb63 	bl	8004824 <__assert_func>
 800415e:	2301      	movs	r3, #1
 8004160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004164:	4610      	mov	r0, r2
 8004166:	b003      	add	sp, #12
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	bfbc      	itt	lt
 800416e:	4653      	movlt	r3, sl
 8004170:	46a2      	movlt	sl, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004178:	bfba      	itte	lt
 800417a:	461c      	movlt	r4, r3
 800417c:	2501      	movlt	r5, #1
 800417e:	2500      	movge	r5, #0
 8004180:	f7ff fd3e 	bl	8003c00 <_Balloc>
 8004184:	4602      	mov	r2, r0
 8004186:	b918      	cbnz	r0, 8004190 <__mdiff+0x60>
 8004188:	4b33      	ldr	r3, [pc, #204]	@ (8004258 <__mdiff+0x128>)
 800418a:	f240 2145 	movw	r1, #581	@ 0x245
 800418e:	e7e3      	b.n	8004158 <__mdiff+0x28>
 8004190:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004194:	6926      	ldr	r6, [r4, #16]
 8004196:	60c5      	str	r5, [r0, #12]
 8004198:	f10a 0914 	add.w	r9, sl, #20
 800419c:	f104 0e14 	add.w	lr, r4, #20
 80041a0:	f100 0514 	add.w	r5, r0, #20
 80041a4:	f10a 0310 	add.w	r3, sl, #16
 80041a8:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 80041ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	46ab      	mov	fp, r5
 80041b4:	f04f 0c00 	mov.w	ip, #0
 80041b8:	9b01      	ldr	r3, [sp, #4]
 80041ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80041be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	fa1f f38a 	uxth.w	r3, sl
 80041c8:	4619      	mov	r1, r3
 80041ca:	b283      	uxth	r3, r0
 80041cc:	1acb      	subs	r3, r1, r3
 80041ce:	0c00      	lsrs	r0, r0, #16
 80041d0:	4463      	add	r3, ip
 80041d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80041d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80041da:	b29b      	uxth	r3, r3
 80041dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041e0:	4576      	cmp	r6, lr
 80041e2:	f84b 3b04 	str.w	r3, [fp], #4
 80041e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80041ea:	d8e5      	bhi.n	80041b8 <__mdiff+0x88>
 80041ec:	1b33      	subs	r3, r6, r4
 80041ee:	3b15      	subs	r3, #21
 80041f0:	3415      	adds	r4, #21
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	42a6      	cmp	r6, r4
 80041f8:	bf38      	it	cc
 80041fa:	2300      	movcc	r3, #0
 80041fc:	18e8      	adds	r0, r5, r3
 80041fe:	444b      	add	r3, r9
 8004200:	1d1c      	adds	r4, r3, #4
 8004202:	3004      	adds	r0, #4
 8004204:	4626      	mov	r6, r4
 8004206:	eba5 0509 	sub.w	r5, r5, r9
 800420a:	4546      	cmp	r6, r8
 800420c:	eb06 0e05 	add.w	lr, r6, r5
 8004210:	d30e      	bcc.n	8004230 <__mdiff+0x100>
 8004212:	f108 0103 	add.w	r1, r8, #3
 8004216:	1b09      	subs	r1, r1, r4
 8004218:	f021 0103 	bic.w	r1, r1, #3
 800421c:	3301      	adds	r3, #1
 800421e:	4598      	cmp	r8, r3
 8004220:	bf38      	it	cc
 8004222:	2100      	movcc	r1, #0
 8004224:	4401      	add	r1, r0
 8004226:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800422a:	b19b      	cbz	r3, 8004254 <__mdiff+0x124>
 800422c:	6117      	str	r7, [r2, #16]
 800422e:	e799      	b.n	8004164 <__mdiff+0x34>
 8004230:	f856 1b04 	ldr.w	r1, [r6], #4
 8004234:	46e2      	mov	sl, ip
 8004236:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800423a:	fa1c fc81 	uxtah	ip, ip, r1
 800423e:	4451      	add	r1, sl
 8004240:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8004244:	b289      	uxth	r1, r1
 8004246:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800424a:	ea4f 4c29 	mov.w	ip, r9, asr #16
 800424e:	f8ce 1000 	str.w	r1, [lr]
 8004252:	e7da      	b.n	800420a <__mdiff+0xda>
 8004254:	3f01      	subs	r7, #1
 8004256:	e7e6      	b.n	8004226 <__mdiff+0xf6>
 8004258:	08004dae 	.word	0x08004dae
 800425c:	08004dbf 	.word	0x08004dbf

08004260 <__d2b>:
 8004260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004264:	460f      	mov	r7, r1
 8004266:	2101      	movs	r1, #1
 8004268:	ec59 8b10 	vmov	r8, r9, d0
 800426c:	4616      	mov	r6, r2
 800426e:	f7ff fcc7 	bl	8003c00 <_Balloc>
 8004272:	4604      	mov	r4, r0
 8004274:	b930      	cbnz	r0, 8004284 <__d2b+0x24>
 8004276:	4602      	mov	r2, r0
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <__d2b+0xa8>)
 800427a:	4824      	ldr	r0, [pc, #144]	@ (800430c <__d2b+0xac>)
 800427c:	f240 310f 	movw	r1, #783	@ 0x30f
 8004280:	f000 fad0 	bl	8004824 <__assert_func>
 8004284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800428c:	b10d      	cbz	r5, 8004292 <__d2b+0x32>
 800428e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	f1b8 0300 	subs.w	r3, r8, #0
 8004298:	d023      	beq.n	80042e2 <__d2b+0x82>
 800429a:	4668      	mov	r0, sp
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f7ff fd74 	bl	8003d8a <__lo0bits>
 80042a2:	9900      	ldr	r1, [sp, #0]
 80042a4:	b1d8      	cbz	r0, 80042de <__d2b+0x7e>
 80042a6:	9a01      	ldr	r2, [sp, #4]
 80042a8:	f1c0 0320 	rsb	r3, r0, #32
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	430b      	orrs	r3, r1
 80042b2:	40c2      	lsrs	r2, r0
 80042b4:	6163      	str	r3, [r4, #20]
 80042b6:	9201      	str	r2, [sp, #4]
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	61a3      	str	r3, [r4, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2201      	moveq	r2, #1
 80042c2:	2202      	movne	r2, #2
 80042c4:	6122      	str	r2, [r4, #16]
 80042c6:	b1a5      	cbz	r5, 80042f2 <__d2b+0x92>
 80042c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80042cc:	4405      	add	r5, r0
 80042ce:	603d      	str	r5, [r7, #0]
 80042d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80042d4:	6030      	str	r0, [r6, #0]
 80042d6:	4620      	mov	r0, r4
 80042d8:	b003      	add	sp, #12
 80042da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042de:	6161      	str	r1, [r4, #20]
 80042e0:	e7ea      	b.n	80042b8 <__d2b+0x58>
 80042e2:	a801      	add	r0, sp, #4
 80042e4:	f7ff fd51 	bl	8003d8a <__lo0bits>
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	6163      	str	r3, [r4, #20]
 80042ec:	3020      	adds	r0, #32
 80042ee:	2201      	movs	r2, #1
 80042f0:	e7e8      	b.n	80042c4 <__d2b+0x64>
 80042f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80042f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80042fa:	6038      	str	r0, [r7, #0]
 80042fc:	6918      	ldr	r0, [r3, #16]
 80042fe:	f7ff fd25 	bl	8003d4c <__hi0bits>
 8004302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004306:	e7e5      	b.n	80042d4 <__d2b+0x74>
 8004308:	08004dae 	.word	0x08004dae
 800430c:	08004dbf 	.word	0x08004dbf

08004310 <__sfputc_r>:
 8004310:	6893      	ldr	r3, [r2, #8]
 8004312:	3b01      	subs	r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	b410      	push	{r4}
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	da08      	bge.n	800432e <__sfputc_r+0x1e>
 800431c:	6994      	ldr	r4, [r2, #24]
 800431e:	42a3      	cmp	r3, r4
 8004320:	db01      	blt.n	8004326 <__sfputc_r+0x16>
 8004322:	290a      	cmp	r1, #10
 8004324:	d103      	bne.n	800432e <__sfputc_r+0x1e>
 8004326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800432a:	f7fe bbef 	b.w	8002b0c <__swbuf_r>
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	1c58      	adds	r0, r3, #1
 8004332:	6010      	str	r0, [r2, #0]
 8004334:	7019      	strb	r1, [r3, #0]
 8004336:	4608      	mov	r0, r1
 8004338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433c:	4770      	bx	lr

0800433e <__sfputs_r>:
 800433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004340:	4606      	mov	r6, r0
 8004342:	460f      	mov	r7, r1
 8004344:	4614      	mov	r4, r2
 8004346:	18d5      	adds	r5, r2, r3
 8004348:	42ac      	cmp	r4, r5
 800434a:	d101      	bne.n	8004350 <__sfputs_r+0x12>
 800434c:	2000      	movs	r0, #0
 800434e:	e007      	b.n	8004360 <__sfputs_r+0x22>
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	463a      	mov	r2, r7
 8004356:	4630      	mov	r0, r6
 8004358:	f7ff ffda 	bl	8004310 <__sfputc_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d1f3      	bne.n	8004348 <__sfputs_r+0xa>
 8004360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004364 <_vfiprintf_r>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	460d      	mov	r5, r1
 800436a:	b09d      	sub	sp, #116	@ 0x74
 800436c:	4614      	mov	r4, r2
 800436e:	4698      	mov	r8, r3
 8004370:	4606      	mov	r6, r0
 8004372:	b118      	cbz	r0, 800437c <_vfiprintf_r+0x18>
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b90b      	cbnz	r3, 800437c <_vfiprintf_r+0x18>
 8004378:	f7fe fade 	bl	8002938 <__sinit>
 800437c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	d405      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d402      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800438a:	f7fe fcce 	bl	8002d2a <__retarget_lock_acquire_recursive>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	d501      	bpl.n	8004398 <_vfiprintf_r+0x34>
 8004394:	692b      	ldr	r3, [r5, #16]
 8004396:	b99b      	cbnz	r3, 80043c0 <_vfiprintf_r+0x5c>
 8004398:	4629      	mov	r1, r5
 800439a:	4630      	mov	r0, r6
 800439c:	f7fe fbf4 	bl	8002b88 <__swsetup_r>
 80043a0:	b170      	cbz	r0, 80043c0 <_vfiprintf_r+0x5c>
 80043a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043a4:	07dc      	lsls	r4, r3, #31
 80043a6:	d504      	bpl.n	80043b2 <_vfiprintf_r+0x4e>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043ac:	b01d      	add	sp, #116	@ 0x74
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	0598      	lsls	r0, r3, #22
 80043b6:	d4f7      	bmi.n	80043a8 <_vfiprintf_r+0x44>
 80043b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ba:	f7fe fcb7 	bl	8002d2c <__retarget_lock_release_recursive>
 80043be:	e7f3      	b.n	80043a8 <_vfiprintf_r+0x44>
 80043c0:	2300      	movs	r3, #0
 80043c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043c4:	2320      	movs	r3, #32
 80043c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ce:	2330      	movs	r3, #48	@ 0x30
 80043d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004580 <_vfiprintf_r+0x21c>
 80043d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043d8:	f04f 0901 	mov.w	r9, #1
 80043dc:	4623      	mov	r3, r4
 80043de:	469a      	mov	sl, r3
 80043e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043e4:	b10a      	cbz	r2, 80043ea <_vfiprintf_r+0x86>
 80043e6:	2a25      	cmp	r2, #37	@ 0x25
 80043e8:	d1f9      	bne.n	80043de <_vfiprintf_r+0x7a>
 80043ea:	ebba 0b04 	subs.w	fp, sl, r4
 80043ee:	d00b      	beq.n	8004408 <_vfiprintf_r+0xa4>
 80043f0:	465b      	mov	r3, fp
 80043f2:	4622      	mov	r2, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7ff ffa1 	bl	800433e <__sfputs_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	f000 80a7 	beq.w	8004550 <_vfiprintf_r+0x1ec>
 8004402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004404:	445a      	add	r2, fp
 8004406:	9209      	str	r2, [sp, #36]	@ 0x24
 8004408:	f89a 3000 	ldrb.w	r3, [sl]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809f 	beq.w	8004550 <_vfiprintf_r+0x1ec>
 8004412:	2300      	movs	r3, #0
 8004414:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800441c:	f10a 0a01 	add.w	sl, sl, #1
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	9307      	str	r3, [sp, #28]
 8004424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004428:	931a      	str	r3, [sp, #104]	@ 0x68
 800442a:	4654      	mov	r4, sl
 800442c:	2205      	movs	r2, #5
 800442e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004432:	4853      	ldr	r0, [pc, #332]	@ (8004580 <_vfiprintf_r+0x21c>)
 8004434:	f7fb feac 	bl	8000190 <memchr>
 8004438:	9a04      	ldr	r2, [sp, #16]
 800443a:	b9d8      	cbnz	r0, 8004474 <_vfiprintf_r+0x110>
 800443c:	06d1      	lsls	r1, r2, #27
 800443e:	bf44      	itt	mi
 8004440:	2320      	movmi	r3, #32
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004446:	0713      	lsls	r3, r2, #28
 8004448:	bf44      	itt	mi
 800444a:	232b      	movmi	r3, #43	@ 0x2b
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004450:	f89a 3000 	ldrb.w	r3, [sl]
 8004454:	2b2a      	cmp	r3, #42	@ 0x2a
 8004456:	d015      	beq.n	8004484 <_vfiprintf_r+0x120>
 8004458:	9a07      	ldr	r2, [sp, #28]
 800445a:	4654      	mov	r4, sl
 800445c:	2000      	movs	r0, #0
 800445e:	f04f 0c0a 	mov.w	ip, #10
 8004462:	4621      	mov	r1, r4
 8004464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004468:	3b30      	subs	r3, #48	@ 0x30
 800446a:	2b09      	cmp	r3, #9
 800446c:	d94b      	bls.n	8004506 <_vfiprintf_r+0x1a2>
 800446e:	b1b0      	cbz	r0, 800449e <_vfiprintf_r+0x13a>
 8004470:	9207      	str	r2, [sp, #28]
 8004472:	e014      	b.n	800449e <_vfiprintf_r+0x13a>
 8004474:	eba0 0308 	sub.w	r3, r0, r8
 8004478:	fa09 f303 	lsl.w	r3, r9, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	46a2      	mov	sl, r4
 8004482:	e7d2      	b.n	800442a <_vfiprintf_r+0xc6>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	1d19      	adds	r1, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	9103      	str	r1, [sp, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfbb      	ittet	lt
 8004490:	425b      	neglt	r3, r3
 8004492:	f042 0202 	orrlt.w	r2, r2, #2
 8004496:	9307      	strge	r3, [sp, #28]
 8004498:	9307      	strlt	r3, [sp, #28]
 800449a:	bfb8      	it	lt
 800449c:	9204      	strlt	r2, [sp, #16]
 800449e:	7823      	ldrb	r3, [r4, #0]
 80044a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80044a2:	d10a      	bne.n	80044ba <_vfiprintf_r+0x156>
 80044a4:	7863      	ldrb	r3, [r4, #1]
 80044a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a8:	d132      	bne.n	8004510 <_vfiprintf_r+0x1ac>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9203      	str	r2, [sp, #12]
 80044b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044b6:	3402      	adds	r4, #2
 80044b8:	9305      	str	r3, [sp, #20]
 80044ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004590 <_vfiprintf_r+0x22c>
 80044be:	7821      	ldrb	r1, [r4, #0]
 80044c0:	2203      	movs	r2, #3
 80044c2:	4650      	mov	r0, sl
 80044c4:	f7fb fe64 	bl	8000190 <memchr>
 80044c8:	b138      	cbz	r0, 80044da <_vfiprintf_r+0x176>
 80044ca:	9b04      	ldr	r3, [sp, #16]
 80044cc:	eba0 000a 	sub.w	r0, r0, sl
 80044d0:	2240      	movs	r2, #64	@ 0x40
 80044d2:	4082      	lsls	r2, r0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	3401      	adds	r4, #1
 80044d8:	9304      	str	r3, [sp, #16]
 80044da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044de:	4829      	ldr	r0, [pc, #164]	@ (8004584 <_vfiprintf_r+0x220>)
 80044e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044e4:	2206      	movs	r2, #6
 80044e6:	f7fb fe53 	bl	8000190 <memchr>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d03f      	beq.n	800456e <_vfiprintf_r+0x20a>
 80044ee:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <_vfiprintf_r+0x224>)
 80044f0:	bb1b      	cbnz	r3, 800453a <_vfiprintf_r+0x1d6>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	3308      	adds	r3, #8
 80044fc:	9303      	str	r3, [sp, #12]
 80044fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004500:	443b      	add	r3, r7
 8004502:	9309      	str	r3, [sp, #36]	@ 0x24
 8004504:	e76a      	b.n	80043dc <_vfiprintf_r+0x78>
 8004506:	fb0c 3202 	mla	r2, ip, r2, r3
 800450a:	460c      	mov	r4, r1
 800450c:	2001      	movs	r0, #1
 800450e:	e7a8      	b.n	8004462 <_vfiprintf_r+0xfe>
 8004510:	2300      	movs	r3, #0
 8004512:	3401      	adds	r4, #1
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	4619      	mov	r1, r3
 8004518:	f04f 0c0a 	mov.w	ip, #10
 800451c:	4620      	mov	r0, r4
 800451e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004522:	3a30      	subs	r2, #48	@ 0x30
 8004524:	2a09      	cmp	r2, #9
 8004526:	d903      	bls.n	8004530 <_vfiprintf_r+0x1cc>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0c6      	beq.n	80044ba <_vfiprintf_r+0x156>
 800452c:	9105      	str	r1, [sp, #20]
 800452e:	e7c4      	b.n	80044ba <_vfiprintf_r+0x156>
 8004530:	fb0c 2101 	mla	r1, ip, r1, r2
 8004534:	4604      	mov	r4, r0
 8004536:	2301      	movs	r3, #1
 8004538:	e7f0      	b.n	800451c <_vfiprintf_r+0x1b8>
 800453a:	ab03      	add	r3, sp, #12
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	462a      	mov	r2, r5
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <_vfiprintf_r+0x228>)
 8004542:	a904      	add	r1, sp, #16
 8004544:	4630      	mov	r0, r6
 8004546:	f7fd fdb3 	bl	80020b0 <_printf_float>
 800454a:	4607      	mov	r7, r0
 800454c:	1c78      	adds	r0, r7, #1
 800454e:	d1d6      	bne.n	80044fe <_vfiprintf_r+0x19a>
 8004550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004552:	07d9      	lsls	r1, r3, #31
 8004554:	d405      	bmi.n	8004562 <_vfiprintf_r+0x1fe>
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	059a      	lsls	r2, r3, #22
 800455a:	d402      	bmi.n	8004562 <_vfiprintf_r+0x1fe>
 800455c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800455e:	f7fe fbe5 	bl	8002d2c <__retarget_lock_release_recursive>
 8004562:	89ab      	ldrh	r3, [r5, #12]
 8004564:	065b      	lsls	r3, r3, #25
 8004566:	f53f af1f 	bmi.w	80043a8 <_vfiprintf_r+0x44>
 800456a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800456c:	e71e      	b.n	80043ac <_vfiprintf_r+0x48>
 800456e:	ab03      	add	r3, sp, #12
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	462a      	mov	r2, r5
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <_vfiprintf_r+0x228>)
 8004576:	a904      	add	r1, sp, #16
 8004578:	4630      	mov	r0, r6
 800457a:	f7fe f82f 	bl	80025dc <_printf_i>
 800457e:	e7e4      	b.n	800454a <_vfiprintf_r+0x1e6>
 8004580:	08004e42 	.word	0x08004e42
 8004584:	08004e4c 	.word	0x08004e4c
 8004588:	080020b1 	.word	0x080020b1
 800458c:	0800433f 	.word	0x0800433f
 8004590:	08004e48 	.word	0x08004e48

08004594 <__sflush_r>:
 8004594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	0716      	lsls	r6, r2, #28
 800459e:	4605      	mov	r5, r0
 80045a0:	460c      	mov	r4, r1
 80045a2:	d451      	bmi.n	8004648 <__sflush_r+0xb4>
 80045a4:	684b      	ldr	r3, [r1, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	dc02      	bgt.n	80045b0 <__sflush_r+0x1c>
 80045aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dd49      	ble.n	8004644 <__sflush_r+0xb0>
 80045b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	d046      	beq.n	8004644 <__sflush_r+0xb0>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045bc:	682f      	ldr	r7, [r5, #0]
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	d031      	beq.n	8004626 <__sflush_r+0x92>
 80045c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	0759      	lsls	r1, r3, #29
 80045c8:	d505      	bpl.n	80045d6 <__sflush_r+0x42>
 80045ca:	6863      	ldr	r3, [r4, #4]
 80045cc:	1ad2      	subs	r2, r2, r3
 80045ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045d0:	b10b      	cbz	r3, 80045d6 <__sflush_r+0x42>
 80045d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	2300      	movs	r3, #0
 80045d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045da:	6a21      	ldr	r1, [r4, #32]
 80045dc:	4628      	mov	r0, r5
 80045de:	47b0      	blx	r6
 80045e0:	1c42      	adds	r2, r0, #1
 80045e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e6:	d106      	bne.n	80045f6 <__sflush_r+0x62>
 80045e8:	6829      	ldr	r1, [r5, #0]
 80045ea:	291d      	cmp	r1, #29
 80045ec:	d846      	bhi.n	800467c <__sflush_r+0xe8>
 80045ee:	4a29      	ldr	r2, [pc, #164]	@ (8004694 <__sflush_r+0x100>)
 80045f0:	40ca      	lsrs	r2, r1
 80045f2:	07d6      	lsls	r6, r2, #31
 80045f4:	d542      	bpl.n	800467c <__sflush_r+0xe8>
 80045f6:	2200      	movs	r2, #0
 80045f8:	6062      	str	r2, [r4, #4]
 80045fa:	04d9      	lsls	r1, r3, #19
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	6022      	str	r2, [r4, #0]
 8004600:	d504      	bpl.n	800460c <__sflush_r+0x78>
 8004602:	1c42      	adds	r2, r0, #1
 8004604:	d101      	bne.n	800460a <__sflush_r+0x76>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	b903      	cbnz	r3, 800460c <__sflush_r+0x78>
 800460a:	6560      	str	r0, [r4, #84]	@ 0x54
 800460c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800460e:	602f      	str	r7, [r5, #0]
 8004610:	b1c1      	cbz	r1, 8004644 <__sflush_r+0xb0>
 8004612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004616:	4299      	cmp	r1, r3
 8004618:	d002      	beq.n	8004620 <__sflush_r+0x8c>
 800461a:	4628      	mov	r0, r5
 800461c:	f7ff f9f0 	bl	8003a00 <_free_r>
 8004620:	2300      	movs	r3, #0
 8004622:	6363      	str	r3, [r4, #52]	@ 0x34
 8004624:	e00e      	b.n	8004644 <__sflush_r+0xb0>
 8004626:	6a21      	ldr	r1, [r4, #32]
 8004628:	2301      	movs	r3, #1
 800462a:	4628      	mov	r0, r5
 800462c:	47b0      	blx	r6
 800462e:	4602      	mov	r2, r0
 8004630:	1c50      	adds	r0, r2, #1
 8004632:	d1c7      	bne.n	80045c4 <__sflush_r+0x30>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0c4      	beq.n	80045c4 <__sflush_r+0x30>
 800463a:	2b1d      	cmp	r3, #29
 800463c:	d001      	beq.n	8004642 <__sflush_r+0xae>
 800463e:	2b16      	cmp	r3, #22
 8004640:	d11a      	bne.n	8004678 <__sflush_r+0xe4>
 8004642:	602f      	str	r7, [r5, #0]
 8004644:	2000      	movs	r0, #0
 8004646:	e01e      	b.n	8004686 <__sflush_r+0xf2>
 8004648:	690f      	ldr	r7, [r1, #16]
 800464a:	2f00      	cmp	r7, #0
 800464c:	d0fa      	beq.n	8004644 <__sflush_r+0xb0>
 800464e:	0793      	lsls	r3, r2, #30
 8004650:	680e      	ldr	r6, [r1, #0]
 8004652:	bf08      	it	eq
 8004654:	694b      	ldreq	r3, [r1, #20]
 8004656:	600f      	str	r7, [r1, #0]
 8004658:	bf18      	it	ne
 800465a:	2300      	movne	r3, #0
 800465c:	eba6 0807 	sub.w	r8, r6, r7
 8004660:	608b      	str	r3, [r1, #8]
 8004662:	f1b8 0f00 	cmp.w	r8, #0
 8004666:	dded      	ble.n	8004644 <__sflush_r+0xb0>
 8004668:	6a21      	ldr	r1, [r4, #32]
 800466a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800466c:	4643      	mov	r3, r8
 800466e:	463a      	mov	r2, r7
 8004670:	4628      	mov	r0, r5
 8004672:	47b0      	blx	r6
 8004674:	2800      	cmp	r0, #0
 8004676:	dc08      	bgt.n	800468a <__sflush_r+0xf6>
 8004678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800467c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800468a:	4407      	add	r7, r0
 800468c:	eba8 0800 	sub.w	r8, r8, r0
 8004690:	e7e7      	b.n	8004662 <__sflush_r+0xce>
 8004692:	bf00      	nop
 8004694:	20400001 	.word	0x20400001

08004698 <_fflush_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	690b      	ldr	r3, [r1, #16]
 800469c:	4605      	mov	r5, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	b913      	cbnz	r3, 80046a8 <_fflush_r+0x10>
 80046a2:	2500      	movs	r5, #0
 80046a4:	4628      	mov	r0, r5
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	b118      	cbz	r0, 80046b2 <_fflush_r+0x1a>
 80046aa:	6a03      	ldr	r3, [r0, #32]
 80046ac:	b90b      	cbnz	r3, 80046b2 <_fflush_r+0x1a>
 80046ae:	f7fe f943 	bl	8002938 <__sinit>
 80046b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f3      	beq.n	80046a2 <_fflush_r+0xa>
 80046ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046bc:	07d0      	lsls	r0, r2, #31
 80046be:	d404      	bmi.n	80046ca <_fflush_r+0x32>
 80046c0:	0599      	lsls	r1, r3, #22
 80046c2:	d402      	bmi.n	80046ca <_fflush_r+0x32>
 80046c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046c6:	f7fe fb30 	bl	8002d2a <__retarget_lock_acquire_recursive>
 80046ca:	4628      	mov	r0, r5
 80046cc:	4621      	mov	r1, r4
 80046ce:	f7ff ff61 	bl	8004594 <__sflush_r>
 80046d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046d4:	07da      	lsls	r2, r3, #31
 80046d6:	4605      	mov	r5, r0
 80046d8:	d4e4      	bmi.n	80046a4 <_fflush_r+0xc>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	059b      	lsls	r3, r3, #22
 80046de:	d4e1      	bmi.n	80046a4 <_fflush_r+0xc>
 80046e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046e2:	f7fe fb23 	bl	8002d2c <__retarget_lock_release_recursive>
 80046e6:	e7dd      	b.n	80046a4 <_fflush_r+0xc>

080046e8 <__swhatbuf_r>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	460c      	mov	r4, r1
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	2900      	cmp	r1, #0
 80046f2:	b096      	sub	sp, #88	@ 0x58
 80046f4:	4615      	mov	r5, r2
 80046f6:	461e      	mov	r6, r3
 80046f8:	da0a      	bge.n	8004710 <__swhatbuf_r+0x28>
 80046fa:	89a1      	ldrh	r1, [r4, #12]
 80046fc:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8004700:	d113      	bne.n	800472a <__swhatbuf_r+0x42>
 8004702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004706:	2000      	movs	r0, #0
 8004708:	6031      	str	r1, [r6, #0]
 800470a:	602a      	str	r2, [r5, #0]
 800470c:	b016      	add	sp, #88	@ 0x58
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	466a      	mov	r2, sp
 8004712:	f000 f847 	bl	80047a4 <_fstat_r>
 8004716:	2800      	cmp	r0, #0
 8004718:	dbef      	blt.n	80046fa <__swhatbuf_r+0x12>
 800471a:	9901      	ldr	r1, [sp, #4]
 800471c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004724:	4259      	negs	r1, r3
 8004726:	4159      	adcs	r1, r3
 8004728:	e7eb      	b.n	8004702 <__swhatbuf_r+0x1a>
 800472a:	2100      	movs	r1, #0
 800472c:	2240      	movs	r2, #64	@ 0x40
 800472e:	e7ea      	b.n	8004706 <__swhatbuf_r+0x1e>

08004730 <__smakebuf_r>:
 8004730:	898b      	ldrh	r3, [r1, #12]
 8004732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004734:	079e      	lsls	r6, r3, #30
 8004736:	4605      	mov	r5, r0
 8004738:	460c      	mov	r4, r1
 800473a:	d507      	bpl.n	800474c <__smakebuf_r+0x1c>
 800473c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	2301      	movs	r3, #1
 8004746:	6163      	str	r3, [r4, #20]
 8004748:	b002      	add	sp, #8
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	ab01      	add	r3, sp, #4
 800474e:	466a      	mov	r2, sp
 8004750:	f7ff ffca 	bl	80046e8 <__swhatbuf_r>
 8004754:	9e00      	ldr	r6, [sp, #0]
 8004756:	4628      	mov	r0, r5
 8004758:	4631      	mov	r1, r6
 800475a:	f7ff f9c5 	bl	8003ae8 <_malloc_r>
 800475e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004762:	b938      	cbnz	r0, 8004774 <__smakebuf_r+0x44>
 8004764:	059a      	lsls	r2, r3, #22
 8004766:	d4ef      	bmi.n	8004748 <__smakebuf_r+0x18>
 8004768:	f023 0303 	bic.w	r3, r3, #3
 800476c:	f043 0302 	orr.w	r3, r3, #2
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	e7e3      	b.n	800473c <__smakebuf_r+0xc>
 8004774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0e0      	beq.n	8004748 <__smakebuf_r+0x18>
 8004786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f81c 	bl	80047c8 <_isatty_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	d0d9      	beq.n	8004748 <__smakebuf_r+0x18>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	e7d2      	b.n	8004748 <__smakebuf_r+0x18>
	...

080047a4 <_fstat_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	@ (80047c4 <_fstat_r+0x20>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	f7fd fb1a 	bl	8001dea <_fstat>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d102      	bne.n	80047c0 <_fstat_r+0x1c>
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	b103      	cbz	r3, 80047c0 <_fstat_r+0x1c>
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
 80047c2:	bf00      	nop
 80047c4:	200003d0 	.word	0x200003d0

080047c8 <_isatty_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d06      	ldr	r5, [pc, #24]	@ (80047e4 <_isatty_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fd fb0e 	bl	8001df4 <_isatty>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_isatty_r+0x1a>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_isatty_r+0x1a>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200003d0 	.word	0x200003d0

080047e8 <_sbrk_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d06      	ldr	r5, [pc, #24]	@ (8004804 <_sbrk_r+0x1c>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f7fd fb02 	bl	8001dfc <_sbrk>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_sbrk_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_sbrk_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200003d0 	.word	0x200003d0

08004808 <memcpy>:
 8004808:	440a      	add	r2, r1
 800480a:	4291      	cmp	r1, r2
 800480c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004810:	d100      	bne.n	8004814 <memcpy+0xc>
 8004812:	4770      	bx	lr
 8004814:	b510      	push	{r4, lr}
 8004816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800481a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481e:	4291      	cmp	r1, r2
 8004820:	d1f9      	bne.n	8004816 <memcpy+0xe>
 8004822:	bd10      	pop	{r4, pc}

08004824 <__assert_func>:
 8004824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004826:	4614      	mov	r4, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <__assert_func+0x2c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4605      	mov	r5, r0
 8004830:	68d8      	ldr	r0, [r3, #12]
 8004832:	b14c      	cbz	r4, 8004848 <__assert_func+0x24>
 8004834:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <__assert_func+0x30>)
 8004836:	9100      	str	r1, [sp, #0]
 8004838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800483c:	4906      	ldr	r1, [pc, #24]	@ (8004858 <__assert_func+0x34>)
 800483e:	462b      	mov	r3, r5
 8004840:	f000 f842 	bl	80048c8 <fiprintf>
 8004844:	f000 f852 	bl	80048ec <abort>
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <__assert_func+0x38>)
 800484a:	461c      	mov	r4, r3
 800484c:	e7f3      	b.n	8004836 <__assert_func+0x12>
 800484e:	bf00      	nop
 8004850:	20000018 	.word	0x20000018
 8004854:	08004e5d 	.word	0x08004e5d
 8004858:	08004e6a 	.word	0x08004e6a
 800485c:	08004e98 	.word	0x08004e98

08004860 <_calloc_r>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	fba1 5402 	umull	r5, r4, r1, r2
 8004866:	b934      	cbnz	r4, 8004876 <_calloc_r+0x16>
 8004868:	4629      	mov	r1, r5
 800486a:	f7ff f93d 	bl	8003ae8 <_malloc_r>
 800486e:	4606      	mov	r6, r0
 8004870:	b928      	cbnz	r0, 800487e <_calloc_r+0x1e>
 8004872:	4630      	mov	r0, r6
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	220c      	movs	r2, #12
 8004878:	6002      	str	r2, [r0, #0]
 800487a:	2600      	movs	r6, #0
 800487c:	e7f9      	b.n	8004872 <_calloc_r+0x12>
 800487e:	462a      	mov	r2, r5
 8004880:	4621      	mov	r1, r4
 8004882:	f7fe f9d5 	bl	8002c30 <memset>
 8004886:	e7f4      	b.n	8004872 <_calloc_r+0x12>

08004888 <__ascii_mbtowc>:
 8004888:	b082      	sub	sp, #8
 800488a:	b901      	cbnz	r1, 800488e <__ascii_mbtowc+0x6>
 800488c:	a901      	add	r1, sp, #4
 800488e:	b142      	cbz	r2, 80048a2 <__ascii_mbtowc+0x1a>
 8004890:	b14b      	cbz	r3, 80048a6 <__ascii_mbtowc+0x1e>
 8004892:	7813      	ldrb	r3, [r2, #0]
 8004894:	600b      	str	r3, [r1, #0]
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	1e10      	subs	r0, r2, #0
 800489a:	bf18      	it	ne
 800489c:	2001      	movne	r0, #1
 800489e:	b002      	add	sp, #8
 80048a0:	4770      	bx	lr
 80048a2:	4610      	mov	r0, r2
 80048a4:	e7fb      	b.n	800489e <__ascii_mbtowc+0x16>
 80048a6:	f06f 0001 	mvn.w	r0, #1
 80048aa:	e7f8      	b.n	800489e <__ascii_mbtowc+0x16>

080048ac <__ascii_wctomb>:
 80048ac:	4603      	mov	r3, r0
 80048ae:	4608      	mov	r0, r1
 80048b0:	b141      	cbz	r1, 80048c4 <__ascii_wctomb+0x18>
 80048b2:	2aff      	cmp	r2, #255	@ 0xff
 80048b4:	d904      	bls.n	80048c0 <__ascii_wctomb+0x14>
 80048b6:	228a      	movs	r2, #138	@ 0x8a
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048be:	4770      	bx	lr
 80048c0:	700a      	strb	r2, [r1, #0]
 80048c2:	2001      	movs	r0, #1
 80048c4:	4770      	bx	lr
	...

080048c8 <fiprintf>:
 80048c8:	b40e      	push	{r1, r2, r3}
 80048ca:	b503      	push	{r0, r1, lr}
 80048cc:	4601      	mov	r1, r0
 80048ce:	ab03      	add	r3, sp, #12
 80048d0:	4805      	ldr	r0, [pc, #20]	@ (80048e8 <fiprintf+0x20>)
 80048d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d6:	6800      	ldr	r0, [r0, #0]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	f7ff fd43 	bl	8004364 <_vfiprintf_r>
 80048de:	b002      	add	sp, #8
 80048e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e4:	b003      	add	sp, #12
 80048e6:	4770      	bx	lr
 80048e8:	20000018 	.word	0x20000018

080048ec <abort>:
 80048ec:	b508      	push	{r3, lr}
 80048ee:	2006      	movs	r0, #6
 80048f0:	f000 f82c 	bl	800494c <raise>
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fd fa51 	bl	8001d9c <_exit>

080048fa <_raise_r>:
 80048fa:	291f      	cmp	r1, #31
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4605      	mov	r5, r0
 8004900:	460c      	mov	r4, r1
 8004902:	d904      	bls.n	800490e <_raise_r+0x14>
 8004904:	2316      	movs	r3, #22
 8004906:	6003      	str	r3, [r0, #0]
 8004908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800490c:	bd38      	pop	{r3, r4, r5, pc}
 800490e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004910:	b112      	cbz	r2, 8004918 <_raise_r+0x1e>
 8004912:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004916:	b94b      	cbnz	r3, 800492c <_raise_r+0x32>
 8004918:	4628      	mov	r0, r5
 800491a:	f000 f831 	bl	8004980 <_getpid_r>
 800491e:	4622      	mov	r2, r4
 8004920:	4601      	mov	r1, r0
 8004922:	4628      	mov	r0, r5
 8004924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004928:	f000 b818 	b.w	800495c <_kill_r>
 800492c:	2b01      	cmp	r3, #1
 800492e:	d00a      	beq.n	8004946 <_raise_r+0x4c>
 8004930:	1c59      	adds	r1, r3, #1
 8004932:	d103      	bne.n	800493c <_raise_r+0x42>
 8004934:	2316      	movs	r3, #22
 8004936:	6003      	str	r3, [r0, #0]
 8004938:	2001      	movs	r0, #1
 800493a:	e7e7      	b.n	800490c <_raise_r+0x12>
 800493c:	2100      	movs	r1, #0
 800493e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004942:	4620      	mov	r0, r4
 8004944:	4798      	blx	r3
 8004946:	2000      	movs	r0, #0
 8004948:	e7e0      	b.n	800490c <_raise_r+0x12>
	...

0800494c <raise>:
 800494c:	4b02      	ldr	r3, [pc, #8]	@ (8004958 <raise+0xc>)
 800494e:	4601      	mov	r1, r0
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f7ff bfd2 	b.w	80048fa <_raise_r>
 8004956:	bf00      	nop
 8004958:	20000018 	.word	0x20000018

0800495c <_kill_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	@ (800497c <_kill_r+0x20>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	f7fd fa0f 	bl	8001d8c <_kill>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d102      	bne.n	8004978 <_kill_r+0x1c>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	b103      	cbz	r3, 8004978 <_kill_r+0x1c>
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	200003d0 	.word	0x200003d0

08004980 <_getpid_r>:
 8004980:	f7fd ba02 	b.w	8001d88 <_getpid>

08004984 <__udivmoddi4>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	9d08      	ldr	r5, [sp, #32]
 800498a:	460f      	mov	r7, r1
 800498c:	4604      	mov	r4, r0
 800498e:	468c      	mov	ip, r1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d148      	bne.n	8004a26 <__udivmoddi4+0xa2>
 8004994:	428a      	cmp	r2, r1
 8004996:	4616      	mov	r6, r2
 8004998:	d961      	bls.n	8004a5e <__udivmoddi4+0xda>
 800499a:	fab2 f382 	clz	r3, r2
 800499e:	b14b      	cbz	r3, 80049b4 <__udivmoddi4+0x30>
 80049a0:	f1c3 0220 	rsb	r2, r3, #32
 80049a4:	fa01 fc03 	lsl.w	ip, r1, r3
 80049a8:	fa20 f202 	lsr.w	r2, r0, r2
 80049ac:	409e      	lsls	r6, r3
 80049ae:	ea42 0c0c 	orr.w	ip, r2, ip
 80049b2:	409c      	lsls	r4, r3
 80049b4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80049b8:	b2b7      	uxth	r7, r6
 80049ba:	fbbc f1fe 	udiv	r1, ip, lr
 80049be:	0c22      	lsrs	r2, r4, #16
 80049c0:	fb0e cc11 	mls	ip, lr, r1, ip
 80049c4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80049c8:	fb01 f007 	mul.w	r0, r1, r7
 80049cc:	4290      	cmp	r0, r2
 80049ce:	d909      	bls.n	80049e4 <__udivmoddi4+0x60>
 80049d0:	18b2      	adds	r2, r6, r2
 80049d2:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80049d6:	f080 80ee 	bcs.w	8004bb6 <__udivmoddi4+0x232>
 80049da:	4290      	cmp	r0, r2
 80049dc:	f240 80eb 	bls.w	8004bb6 <__udivmoddi4+0x232>
 80049e0:	3902      	subs	r1, #2
 80049e2:	4432      	add	r2, r6
 80049e4:	1a12      	subs	r2, r2, r0
 80049e6:	b2a4      	uxth	r4, r4
 80049e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80049ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80049f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80049f4:	fb00 f707 	mul.w	r7, r0, r7
 80049f8:	42a7      	cmp	r7, r4
 80049fa:	d909      	bls.n	8004a10 <__udivmoddi4+0x8c>
 80049fc:	1934      	adds	r4, r6, r4
 80049fe:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8004a02:	f080 80da 	bcs.w	8004bba <__udivmoddi4+0x236>
 8004a06:	42a7      	cmp	r7, r4
 8004a08:	f240 80d7 	bls.w	8004bba <__udivmoddi4+0x236>
 8004a0c:	4434      	add	r4, r6
 8004a0e:	3802      	subs	r0, #2
 8004a10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004a14:	1be4      	subs	r4, r4, r7
 8004a16:	2100      	movs	r1, #0
 8004a18:	b11d      	cbz	r5, 8004a22 <__udivmoddi4+0x9e>
 8004a1a:	40dc      	lsrs	r4, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e9c5 4300 	strd	r4, r3, [r5]
 8004a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a26:	428b      	cmp	r3, r1
 8004a28:	d906      	bls.n	8004a38 <__udivmoddi4+0xb4>
 8004a2a:	b10d      	cbz	r5, 8004a30 <__udivmoddi4+0xac>
 8004a2c:	e9c5 0100 	strd	r0, r1, [r5]
 8004a30:	2100      	movs	r1, #0
 8004a32:	4608      	mov	r0, r1
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	fab3 f183 	clz	r1, r3
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d148      	bne.n	8004ad2 <__udivmoddi4+0x14e>
 8004a40:	42bb      	cmp	r3, r7
 8004a42:	d302      	bcc.n	8004a4a <__udivmoddi4+0xc6>
 8004a44:	4282      	cmp	r2, r0
 8004a46:	f200 8107 	bhi.w	8004c58 <__udivmoddi4+0x2d4>
 8004a4a:	1a84      	subs	r4, r0, r2
 8004a4c:	eb67 0203 	sbc.w	r2, r7, r3
 8004a50:	2001      	movs	r0, #1
 8004a52:	4694      	mov	ip, r2
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	d0e4      	beq.n	8004a22 <__udivmoddi4+0x9e>
 8004a58:	e9c5 4c00 	strd	r4, ip, [r5]
 8004a5c:	e7e1      	b.n	8004a22 <__udivmoddi4+0x9e>
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	f000 8092 	beq.w	8004b88 <__udivmoddi4+0x204>
 8004a64:	fab2 f382 	clz	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 80a8 	bne.w	8004bbe <__udivmoddi4+0x23a>
 8004a6e:	1a8a      	subs	r2, r1, r2
 8004a70:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004a74:	fa1f fc86 	uxth.w	ip, r6
 8004a78:	2101      	movs	r1, #1
 8004a7a:	0c20      	lsrs	r0, r4, #16
 8004a7c:	fbb2 f7fe 	udiv	r7, r2, lr
 8004a80:	fb0e 2217 	mls	r2, lr, r7, r2
 8004a84:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8004a88:	fb0c f007 	mul.w	r0, ip, r7
 8004a8c:	4290      	cmp	r0, r2
 8004a8e:	d907      	bls.n	8004aa0 <__udivmoddi4+0x11c>
 8004a90:	18b2      	adds	r2, r6, r2
 8004a92:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004a96:	d202      	bcs.n	8004a9e <__udivmoddi4+0x11a>
 8004a98:	4290      	cmp	r0, r2
 8004a9a:	f200 80e2 	bhi.w	8004c62 <__udivmoddi4+0x2de>
 8004a9e:	4647      	mov	r7, r8
 8004aa0:	1a12      	subs	r2, r2, r0
 8004aa2:	b2a4      	uxth	r4, r4
 8004aa4:	fbb2 f0fe 	udiv	r0, r2, lr
 8004aa8:	fb0e 2210 	mls	r2, lr, r0, r2
 8004aac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004ab0:	fb0c fc00 	mul.w	ip, ip, r0
 8004ab4:	45a4      	cmp	ip, r4
 8004ab6:	d907      	bls.n	8004ac8 <__udivmoddi4+0x144>
 8004ab8:	1934      	adds	r4, r6, r4
 8004aba:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8004abe:	d202      	bcs.n	8004ac6 <__udivmoddi4+0x142>
 8004ac0:	45a4      	cmp	ip, r4
 8004ac2:	f200 80cb 	bhi.w	8004c5c <__udivmoddi4+0x2d8>
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	eba4 040c 	sub.w	r4, r4, ip
 8004acc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004ad0:	e7a2      	b.n	8004a18 <__udivmoddi4+0x94>
 8004ad2:	f1c1 0620 	rsb	r6, r1, #32
 8004ad6:	408b      	lsls	r3, r1
 8004ad8:	fa22 fc06 	lsr.w	ip, r2, r6
 8004adc:	ea4c 0c03 	orr.w	ip, ip, r3
 8004ae0:	fa07 f401 	lsl.w	r4, r7, r1
 8004ae4:	fa20 f306 	lsr.w	r3, r0, r6
 8004ae8:	40f7      	lsrs	r7, r6
 8004aea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004aee:	4323      	orrs	r3, r4
 8004af0:	fa00 f801 	lsl.w	r8, r0, r1
 8004af4:	fa1f fe8c 	uxth.w	lr, ip
 8004af8:	fbb7 f0f9 	udiv	r0, r7, r9
 8004afc:	0c1c      	lsrs	r4, r3, #16
 8004afe:	fb09 7710 	mls	r7, r9, r0, r7
 8004b02:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8004b06:	fb00 f70e 	mul.w	r7, r0, lr
 8004b0a:	42a7      	cmp	r7, r4
 8004b0c:	fa02 f201 	lsl.w	r2, r2, r1
 8004b10:	d90a      	bls.n	8004b28 <__udivmoddi4+0x1a4>
 8004b12:	eb1c 0404 	adds.w	r4, ip, r4
 8004b16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8004b1a:	f080 809b 	bcs.w	8004c54 <__udivmoddi4+0x2d0>
 8004b1e:	42a7      	cmp	r7, r4
 8004b20:	f240 8098 	bls.w	8004c54 <__udivmoddi4+0x2d0>
 8004b24:	3802      	subs	r0, #2
 8004b26:	4464      	add	r4, ip
 8004b28:	1be4      	subs	r4, r4, r7
 8004b2a:	b29f      	uxth	r7, r3
 8004b2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8004b30:	fb09 4413 	mls	r4, r9, r3, r4
 8004b34:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8004b38:	fb03 fe0e 	mul.w	lr, r3, lr
 8004b3c:	45a6      	cmp	lr, r4
 8004b3e:	d909      	bls.n	8004b54 <__udivmoddi4+0x1d0>
 8004b40:	eb1c 0404 	adds.w	r4, ip, r4
 8004b44:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 8004b48:	f080 8082 	bcs.w	8004c50 <__udivmoddi4+0x2cc>
 8004b4c:	45a6      	cmp	lr, r4
 8004b4e:	d97f      	bls.n	8004c50 <__udivmoddi4+0x2cc>
 8004b50:	3b02      	subs	r3, #2
 8004b52:	4464      	add	r4, ip
 8004b54:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004b58:	eba4 040e 	sub.w	r4, r4, lr
 8004b5c:	fba0 e702 	umull	lr, r7, r0, r2
 8004b60:	42bc      	cmp	r4, r7
 8004b62:	4673      	mov	r3, lr
 8004b64:	46b9      	mov	r9, r7
 8004b66:	d363      	bcc.n	8004c30 <__udivmoddi4+0x2ac>
 8004b68:	d060      	beq.n	8004c2c <__udivmoddi4+0x2a8>
 8004b6a:	b15d      	cbz	r5, 8004b84 <__udivmoddi4+0x200>
 8004b6c:	ebb8 0203 	subs.w	r2, r8, r3
 8004b70:	eb64 0409 	sbc.w	r4, r4, r9
 8004b74:	fa04 f606 	lsl.w	r6, r4, r6
 8004b78:	fa22 f301 	lsr.w	r3, r2, r1
 8004b7c:	431e      	orrs	r6, r3
 8004b7e:	40cc      	lsrs	r4, r1
 8004b80:	e9c5 6400 	strd	r6, r4, [r5]
 8004b84:	2100      	movs	r1, #0
 8004b86:	e74c      	b.n	8004a22 <__udivmoddi4+0x9e>
 8004b88:	0862      	lsrs	r2, r4, #1
 8004b8a:	0848      	lsrs	r0, r1, #1
 8004b8c:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8004b90:	0c0b      	lsrs	r3, r1, #16
 8004b92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b96:	b28a      	uxth	r2, r1
 8004b98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b9c:	fbb3 f1f6 	udiv	r1, r3, r6
 8004ba0:	07e4      	lsls	r4, r4, #31
 8004ba2:	46b4      	mov	ip, r6
 8004ba4:	4637      	mov	r7, r6
 8004ba6:	46b6      	mov	lr, r6
 8004ba8:	231f      	movs	r3, #31
 8004baa:	fbb0 f0f6 	udiv	r0, r0, r6
 8004bae:	1bd2      	subs	r2, r2, r7
 8004bb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004bb4:	e761      	b.n	8004a7a <__udivmoddi4+0xf6>
 8004bb6:	4661      	mov	r1, ip
 8004bb8:	e714      	b.n	80049e4 <__udivmoddi4+0x60>
 8004bba:	4610      	mov	r0, r2
 8004bbc:	e728      	b.n	8004a10 <__udivmoddi4+0x8c>
 8004bbe:	f1c3 0120 	rsb	r1, r3, #32
 8004bc2:	fa20 f201 	lsr.w	r2, r0, r1
 8004bc6:	409e      	lsls	r6, r3
 8004bc8:	fa27 f101 	lsr.w	r1, r7, r1
 8004bcc:	409f      	lsls	r7, r3
 8004bce:	433a      	orrs	r2, r7
 8004bd0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004bd4:	fa1f fc86 	uxth.w	ip, r6
 8004bd8:	fbb1 f7fe 	udiv	r7, r1, lr
 8004bdc:	fb0e 1017 	mls	r0, lr, r7, r1
 8004be0:	0c11      	lsrs	r1, r2, #16
 8004be2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004be6:	fb07 f80c 	mul.w	r8, r7, ip
 8004bea:	4588      	cmp	r8, r1
 8004bec:	fa04 f403 	lsl.w	r4, r4, r3
 8004bf0:	d93a      	bls.n	8004c68 <__udivmoddi4+0x2e4>
 8004bf2:	1871      	adds	r1, r6, r1
 8004bf4:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8004bf8:	d201      	bcs.n	8004bfe <__udivmoddi4+0x27a>
 8004bfa:	4588      	cmp	r8, r1
 8004bfc:	d81f      	bhi.n	8004c3e <__udivmoddi4+0x2ba>
 8004bfe:	eba1 0108 	sub.w	r1, r1, r8
 8004c02:	fbb1 f8fe 	udiv	r8, r1, lr
 8004c06:	fb08 f70c 	mul.w	r7, r8, ip
 8004c0a:	fb0e 1118 	mls	r1, lr, r8, r1
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c14:	42ba      	cmp	r2, r7
 8004c16:	d22f      	bcs.n	8004c78 <__udivmoddi4+0x2f4>
 8004c18:	18b2      	adds	r2, r6, r2
 8004c1a:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004c1e:	d2c6      	bcs.n	8004bae <__udivmoddi4+0x22a>
 8004c20:	42ba      	cmp	r2, r7
 8004c22:	d2c4      	bcs.n	8004bae <__udivmoddi4+0x22a>
 8004c24:	f1a8 0102 	sub.w	r1, r8, #2
 8004c28:	4432      	add	r2, r6
 8004c2a:	e7c0      	b.n	8004bae <__udivmoddi4+0x22a>
 8004c2c:	45f0      	cmp	r8, lr
 8004c2e:	d29c      	bcs.n	8004b6a <__udivmoddi4+0x1e6>
 8004c30:	ebbe 0302 	subs.w	r3, lr, r2
 8004c34:	eb67 070c 	sbc.w	r7, r7, ip
 8004c38:	3801      	subs	r0, #1
 8004c3a:	46b9      	mov	r9, r7
 8004c3c:	e795      	b.n	8004b6a <__udivmoddi4+0x1e6>
 8004c3e:	eba6 0808 	sub.w	r8, r6, r8
 8004c42:	4441      	add	r1, r8
 8004c44:	1eb8      	subs	r0, r7, #2
 8004c46:	fbb1 f8fe 	udiv	r8, r1, lr
 8004c4a:	fb08 f70c 	mul.w	r7, r8, ip
 8004c4e:	e7dc      	b.n	8004c0a <__udivmoddi4+0x286>
 8004c50:	463b      	mov	r3, r7
 8004c52:	e77f      	b.n	8004b54 <__udivmoddi4+0x1d0>
 8004c54:	4650      	mov	r0, sl
 8004c56:	e767      	b.n	8004b28 <__udivmoddi4+0x1a4>
 8004c58:	4608      	mov	r0, r1
 8004c5a:	e6fb      	b.n	8004a54 <__udivmoddi4+0xd0>
 8004c5c:	4434      	add	r4, r6
 8004c5e:	3802      	subs	r0, #2
 8004c60:	e732      	b.n	8004ac8 <__udivmoddi4+0x144>
 8004c62:	3f02      	subs	r7, #2
 8004c64:	4432      	add	r2, r6
 8004c66:	e71b      	b.n	8004aa0 <__udivmoddi4+0x11c>
 8004c68:	eba1 0108 	sub.w	r1, r1, r8
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	fbb1 f8fe 	udiv	r8, r1, lr
 8004c72:	fb08 f70c 	mul.w	r7, r8, ip
 8004c76:	e7c8      	b.n	8004c0a <__udivmoddi4+0x286>
 8004c78:	4641      	mov	r1, r8
 8004c7a:	e798      	b.n	8004bae <__udivmoddi4+0x22a>

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
